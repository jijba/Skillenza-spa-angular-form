/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FormGroup, FormArray, FormControl, AbstractControl, Validators } from '@angular/forms';
import { FormlyConfig } from './formly.config';
import { FORMLY_VALIDATORS, evalStringExpression, evalExpressionValueSetter, getFieldId, isObject, isNullOrUndefined, clone, assignModelToFields } from './../utils';
import { getKeyPath, isFunction } from '../utils';
import { FormlyFormExpression } from './formly.form.expression';
var FormlyFormBuilder = /** @class */ (function () {
    function FormlyFormBuilder(formlyConfig, formlyFormExpression) {
        this.formlyConfig = formlyConfig;
        this.formlyFormExpression = formlyFormExpression;
        this.formId = 0;
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    FormlyFormBuilder.prototype.buildForm = /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    function (form, fields, model, options) {
        if (fields === void 0) { fields = []; }
        var /** @type {?} */ fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        if (!Array.isArray(fieldTransforms)) {
            fieldTransforms = [fieldTransforms];
        }
        fieldTransforms.forEach(function (fieldTransform) {
            if (fieldTransform) {
                fields = fieldTransform(fields, model, form, options);
                if (!fields) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
        assignModelToFields(fields, model);
        this._buildForm(form, fields, options);
        this.formlyFormExpression.checkFields(form, fields, model, options);
    };
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} options
     * @return {?}
     */
    FormlyFormBuilder.prototype._buildForm = /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} options
     * @return {?}
     */
    function (form, fields, options) {
        if (fields === void 0) { fields = []; }
        this.formId++;
        this.registerFormControls(form, fields, options);
    };
    /**
     * @param {?} form
     * @param {?} fields
     * @param {?} options
     * @return {?}
     */
    FormlyFormBuilder.prototype.registerFormControls = /**
     * @param {?} form
     * @param {?} fields
     * @param {?} options
     * @return {?}
     */
    function (form, fields, options) {
        var _this = this;
        fields.forEach(function (field, index) {
            field.id = getFieldId("formly_" + _this.formId, field, index);
            _this.initFieldOptions(field);
            _this.initFieldExpression(field, options);
            _this.initFieldValidation(field);
            _this.initFieldWrappers(field);
            _this.initFieldAsyncValidation(field);
            if (field.key && field.type) {
                var /** @type {?} */ paths_1 = getKeyPath({ key: field.key });
                var /** @type {?} */ rootForm_1 = form, /** @type {?} */ rootModel_1 = field.model;
                paths_1.forEach(function (path, index) {
                    // FormGroup/FormArray only allow string value for path
                    var /** @type {?} */ formPath = path.toString();
                    // is last item
                    if (index === paths_1.length - 1) {
                        _this.addFormControl(rootForm_1, field, rootModel_1, formPath);
                        if (field.fieldArray) {
                            field.fieldGroup = [];
                            field.model.forEach(function (m, i) { return field.fieldGroup.push(tslib_1.__assign({}, clone(field.fieldArray), { key: "" + i })); });
                            assignModelToFields(field.fieldGroup, rootModel_1);
                        }
                    }
                    else {
                        var /** @type {?} */ nestedForm = /** @type {?} */ (rootForm_1.get(formPath));
                        if (!nestedForm) {
                            nestedForm = new FormGroup({});
                            _this.addControl(rootForm_1, formPath, nestedForm);
                        }
                        if (!rootModel_1[path]) {
                            rootModel_1[path] = typeof path === 'string' ? {} : [];
                        }
                        rootForm_1 = nestedForm;
                        rootModel_1 = rootModel_1[path];
                    }
                });
            }
            if (field.fieldGroup) {
                if (!field.type) {
                    field.type = 'formly-group';
                }
                // if `hideExpression` is set in that case we have to deal
                // with toggle FormControl for each field in fieldGroup separately
                if (field.hideExpression) {
                    field.fieldGroup.forEach(function (f) {
                        var /** @type {?} */ hideExpression = f.hideExpression || (function () { return false; });
                        if (typeof hideExpression === 'string') {
                            hideExpression = evalStringExpression(hideExpression, ['model', 'formState']);
                        }
                        f.hideExpression = function (model, formState) { return field.hide || hideExpression(model, formState); };
                    });
                }
                if (field.key) {
                    _this.addFormControl(form, field, (_a = {}, _a[field.key] = field.fieldArray ? [] : {}, _a), field.key);
                    _this._buildForm(/** @type {?} */ (field.formControl), field.fieldGroup, options);
                }
                else {
                    _this._buildForm(form, field.fieldGroup, options);
                }
            }
            var _a;
        });
    };
    /**
     * @param {?} field
     * @param {?} options
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldExpression = /**
     * @param {?} field
     * @param {?} options
     * @return {?}
     */
    function (field, options) {
        if (field.expressionProperties) {
            for (var /** @type {?} */ key in /** @type {?} */ (field.expressionProperties)) {
                if (typeof field.expressionProperties[key] === 'string' || isFunction(field.expressionProperties[key])) {
                    // cache built expression
                    field.expressionProperties[key] = {
                        expression: isFunction(field.expressionProperties[key]) ? field.expressionProperties[key] : evalStringExpression(field.expressionProperties[key], ['model', 'formState']),
                        expressionValueSetter: evalExpressionValueSetter("field." + key, ['expressionValue', 'model', 'field']),
                    };
                }
            }
        }
        if (field.hideExpression) {
            // delete hide value in order to force re-evaluate it in FormlyFormExpression.
            delete field.hide;
            if (typeof field.hideExpression === 'string') {
                // cache built expression
                field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldOptions = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        field.templateOptions = field.templateOptions || {};
        if (field.type) {
            this.formlyConfig.getMergedField(field);
            if (field.key) {
                field.templateOptions = Object.assign({
                    label: '',
                    placeholder: '',
                    focus: false,
                }, field.templateOptions);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldAsyncValidation = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        var /** @type {?} */ validators = [];
        if (field.asyncValidators) {
            var _loop_1 = function (validatorName) {
                if (validatorName !== 'validation') {
                    var /** @type {?} */ validator_1 = field.asyncValidators[validatorName];
                    if (isObject(validator_1)) {
                        validator_1 = validator_1.expression;
                    }
                    validators.push(function (control) { return new Promise(function (resolve) {
                        return validator_1(control, field).then(function (result) {
                            resolve(result ? null : (_a = {}, _a[validatorName] = true, _a));
                            var _a;
                        });
                    }); });
                }
            };
            for (var /** @type {?} */ validatorName in field.asyncValidators) {
                _loop_1(validatorName);
            }
        }
        if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {
            field.asyncValidators.validation
                .forEach(function (validator) { return validators.push(_this.wrapNgValidatorFn(field, validator)); });
        }
        if (validators.length) {
            if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {
                field.asyncValidators.validation = Validators.composeAsync(tslib_1.__spread([field.asyncValidators.validation], validators));
            }
            else {
                field.asyncValidators = {
                    validation: Validators.composeAsync(validators),
                };
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldValidation = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        var /** @type {?} */ validators = [];
        FORMLY_VALIDATORS
            .filter(function (opt) { return (field.templateOptions && field.templateOptions.hasOwnProperty(opt))
            || (field.expressionProperties && field.expressionProperties["templateOptions." + opt]); })
            .forEach(function (opt) {
            validators.push(function (control) {
                if (field.templateOptions[opt] === false) {
                    return null;
                }
                return _this.getValidation(opt, field.templateOptions[opt])(control);
            });
        });
        if (field.validators) {
            var _loop_2 = function (validatorName) {
                if (validatorName !== 'validation') {
                    var /** @type {?} */ validator_2 = field.validators[validatorName];
                    if (isObject(validator_2)) {
                        validator_2 = validator_2.expression;
                    }
                    validators.push(function (control) {
                        return validator_2(control, field) ? null : (_a = {}, _a[validatorName] = true, _a);
                        var _a;
                    });
                }
            };
            for (var /** @type {?} */ validatorName in field.validators) {
                _loop_2(validatorName);
            }
        }
        if (field.validators && Array.isArray(field.validators.validation)) {
            field.validators.validation
                .forEach(function (validator) { return validators.push(_this.wrapNgValidatorFn(field, validator)); });
        }
        if (validators.length) {
            if (field.validators && !Array.isArray(field.validators.validation)) {
                field.validators.validation = Validators.compose(tslib_1.__spread([field.validators.validation], validators));
            }
            else {
                field.validators = {
                    validation: Validators.compose(validators),
                };
            }
        }
    };
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    FormlyFormBuilder.prototype.addFormControl = /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    function (form, field, model, path) {
        var /** @type {?} */ control;
        var /** @type {?} */ validators = field.validators ? field.validators.validation : undefined, /** @type {?} */
        asyncValidators = field.asyncValidators ? field.asyncValidators.validation : undefined, /** @type {?} */
        updateOn = field.modelOptions && field.modelOptions.updateOn ?
            field.modelOptions.updateOn : undefined;
        var /** @type {?} */ abstractControlOptions = /** @type {?} */ ({
            validators: validators,
            asyncValidators: asyncValidators,
            updateOn: updateOn,
        });
        if (field.formControl instanceof AbstractControl || form.get(path)) {
            control = field.formControl || form.get(path);
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
        }
        else if (field.component && field.component.createControl) {
            control = field.component.createControl(model[path], field);
        }
        else if (field.fieldGroup && field.key && field.key === path && !field.fieldArray) {
            control = new FormGroup(model[path], abstractControlOptions);
        }
        else if (field.fieldArray && field.key && field.key === path) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: (function () { return !this.formControl.enabled; }).bind(field),
                set: (function (value) {
                    if (this.expressionProperties && this.expressionProperties.hasOwnProperty('templateOptions.disabled')) {
                        this.expressionProperties['templateOptions.disabled'].expressionValue = value;
                    }
                    value ? this.formControl.disable() : this.formControl.enable();
                }).bind(field),
                enumerable: true,
                configurable: true,
            });
        }
        this.addControl(form, path, control, field);
    };
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} formControl
     * @param {?=} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.addControl = /**
     * @param {?} form
     * @param {?} key
     * @param {?} formControl
     * @param {?=} field
     * @return {?}
     */
    function (form, key, formControl, field) {
        if (field) {
            field.formControl = formControl;
        }
        if (form instanceof FormArray) {
            if (form.at(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
        else {
            if (form.get(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
    };
    /**
     * @param {?} opt
     * @param {?} value
     * @return {?}
     */
    FormlyFormBuilder.prototype.getValidation = /**
     * @param {?} opt
     * @param {?} value
     * @return {?}
     */
    function (opt, value) {
        switch (opt) {
            case 'required':
                return Validators.required;
            case 'pattern':
                return Validators.pattern(value);
            case 'minLength':
                return Validators.minLength(value);
            case 'maxLength':
                return Validators.maxLength(value);
            case 'min':
                return Validators.min(value);
            case 'max':
                return Validators.max(value);
        }
    };
    /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    FormlyFormBuilder.prototype.wrapNgValidatorFn = /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    function (field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return function (control) { return (/** @type {?} */ (validator))(control, field); };
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldWrappers = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var /** @type {?} */ templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        if (field.templateOptions) {
            this.mergeTemplateManipulators(templateManipulators, field.templateOptions.templateManipulators);
        }
        this.mergeTemplateManipulators(templateManipulators, this.formlyConfig.templateManipulators);
        var /** @type {?} */ preWrappers = templateManipulators.preWrapper.map(function (m) { return m(field); }).filter(function (type) { return type; }), /** @type {?} */
        postWrappers = templateManipulators.postWrapper.map(function (m) { return m(field); }).filter(function (type) { return type; });
        if (!field.wrappers) {
            field.wrappers = [];
        }
        field.wrappers = tslib_1.__spread(preWrappers, (field.wrappers || []), postWrappers);
    };
    /**
     * @param {?} source
     * @param {?} target
     * @return {?}
     */
    FormlyFormBuilder.prototype.mergeTemplateManipulators = /**
     * @param {?} source
     * @param {?} target
     * @return {?}
     */
    function (source, target) {
        target = target || {};
        if (target.preWrapper) {
            source.preWrapper = source.preWrapper.concat(target.preWrapper);
        }
        if (target.postWrapper) {
            source.postWrapper = source.postWrapper.concat(target.postWrapper);
        }
        return source;
    };
    FormlyFormBuilder.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    FormlyFormBuilder.ctorParameters = function () { return [
        { type: FormlyConfig },
        { type: FormlyFormExpression }
    ]; };
    return FormlyFormBuilder;
}());
export { FormlyFormBuilder };
function FormlyFormBuilder_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyFormBuilder.prototype.formId;
    /** @type {?} */
    FormlyFormBuilder.prototype.formlyConfig;
    /** @type {?} */
    FormlyFormBuilder.prototype.formlyFormExpression;
}

//# sourceMappingURL=data:application/json;base64,