/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, ComponentFactoryResolver, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
var FormlyField = /** @class */ (function () {
    function FormlyField(formlyConfig, componentFactoryResolver) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.options = {};
        this.modelChange = new EventEmitter();
        this.componentRefs = [];
    }
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterContentInit);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterContentChecked);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterViewInit);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterViewChecked);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.doCheck);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.field.template) {
            this.createFieldComponent();
        }
        this.lifeCycleHooks(this.lifecycle.onInit);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyField.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        this.lifeCycleHooks(this.lifecycle.onChanges);
        this.componentRefs.forEach(function (ref) {
            Object.assign(ref.instance, {
                model: _this.model,
                form: _this.form,
                field: _this.field,
                options: _this.options,
            });
        });
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.onDestroy);
        this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
        this.componentRefs = [];
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.createFieldComponent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ type = this.formlyConfig.getType(this.field.type);
        var /** @type {?} */ fieldComponent = this.fieldComponent;
        (this.field.wrappers || []).forEach(function (wrapperName) {
            var /** @type {?} */ wrapperRef = _this.createComponent(fieldComponent, _this.formlyConfig.getWrapper(wrapperName).component);
            fieldComponent = wrapperRef.instance.fieldComponent;
        });
        return this.createComponent(fieldComponent, type.component);
    };
    /**
     * @param {?} fieldComponent
     * @param {?} component
     * @return {?}
     */
    FormlyField.prototype.createComponent = /**
     * @param {?} fieldComponent
     * @param {?} component
     * @return {?}
     */
    function (fieldComponent, component) {
        var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        var /** @type {?} */ ref = /** @type {?} */ (fieldComponent.createComponent(componentFactory));
        Object.assign(ref.instance, {
            model: this.model,
            form: this.form,
            field: this.field,
            options: this.options,
        });
        this.componentRefs.push(ref);
        return ref;
    };
    Object.defineProperty(FormlyField.prototype, "lifecycle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field.lifecycle || {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} callback
     * @return {?}
     */
    FormlyField.prototype.lifeCycleHooks = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        if (callback) {
            callback(this.form, this.field, this.model, this.options);
        }
    };
    FormlyField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field',
                    template: "\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"field.template && !field.fieldGroup\" [innerHtml]=\"field.template\"></div>\n  ",
                    host: {
                        '[style.display]': 'field.hide ? "none":""',
                    },
                },] },
    ];
    /** @nocollapse */
    FormlyField.ctorParameters = function () { return [
        { type: FormlyConfig },
        { type: ComponentFactoryResolver }
    ]; };
    FormlyField.propDecorators = {
        model: [{ type: Input }],
        form: [{ type: Input }],
        field: [{ type: Input }],
        options: [{ type: Input }],
        modelChange: [{ type: Output }],
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyField;
}());
export { FormlyField };
function FormlyField_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyField.prototype.model;
    /** @type {?} */
    FormlyField.prototype.form;
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.options;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.fieldComponent;
    /** @type {?} */
    FormlyField.prototype.componentRefs;
    /** @type {?} */
    FormlyField.prototype.formlyConfig;
    /** @type {?} */
    FormlyField.prototype.componentFactoryResolver;
}

//# sourceMappingURL=data:application/json;base64,