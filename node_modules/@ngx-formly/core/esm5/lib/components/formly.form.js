/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Optional, EventEmitter, Output, SkipSelf } from '@angular/core';
import { FormGroup, FormArray, NgForm, FormGroupDirective, FormControl } from '@angular/forms';
import { FormlyFormBuilder } from '../services/formly.form.builder';
import { FormlyFormExpression } from '../services/formly.form.expression';
import { FormlyConfig } from '../services/formly.config';
import { assignModelValue, isNullOrUndefined, reverseDeepMerge, getFieldModel, clone, assignModelToFields } from '../utils';
import { Subject } from 'rxjs';
import { debounceTime, map, tap } from 'rxjs/operators';
var FormlyForm = /** @class */ (function () {
    function FormlyForm(formlyBuilder, formlyExpression, formlyConfig, parentForm, parentFormGroup, parentFormlyForm) {
        this.formlyBuilder = formlyBuilder;
        this.formlyExpression = formlyExpression;
        this.formlyConfig = formlyConfig;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.parentFormlyForm = parentFormlyForm;
        this.model = {};
        this.form = new FormGroup({});
        this.fields = [];
        this.modelChange = new EventEmitter();
        /**
         * \@internal
         */
        this.isRoot = true;
        this.modelChangeSubs = [];
    }
    /**
     * @return {?}
     */
    FormlyForm.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkExpressionChange();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyForm.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.fields || this.fields.length === 0 || !this.isRoot) {
            return;
        }
        if (changes["fields"] || changes["form"]) {
            this.model = this.model || {};
            this.form = this.form || (new FormGroup({}));
            this.setOptions();
            this.clearModelSubscriptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.trackModelChanges(this.fields);
            this.updateInitialValue();
        }
        else if (changes["model"]) {
            this.patchModel(this.model);
        }
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.clearModelSubscriptions();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FormlyForm.prototype.changeModel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        assignModelValue(this.model, event.key, event.value);
        this.modelChange.emit(this.model);
        this.checkExpressionChange();
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.setOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.options = this.options || {};
        this.options.formState = this.options.formState || {};
        if (!this.options.showError) {
            this.options.showError = this.formlyConfig.extras.showError;
        }
        if (!this.options.fieldChanges) {
            this.options.fieldChanges = new Subject();
        }
        if (!this.options.resetModel) {
            this.options.resetModel = this.resetModel.bind(this);
        }
        if (!this.options.parentForm) {
            this.options.parentForm = this.parentFormGroup || this.parentForm;
        }
        if (!this.options.updateInitialValue) {
            this.options.updateInitialValue = this.updateInitialValue.bind(this);
        }
        if (!(/** @type {?} */ (this.options)).resetTrackModelChanges) {
            (/** @type {?} */ (this.options)).resetTrackModelChanges = function () {
                _this.clearModelSubscriptions();
                _this.trackModelChanges(_this.fields);
            };
        }
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.checkExpressionChange = /**
     * @return {?}
     */
    function () {
        if (this.isRoot) {
            this.formlyExpression.checkFields(this.form, this.fields, this.model, this.options);
        }
    };
    /**
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    FormlyForm.prototype.trackModelChanges = /**
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    function (fields, rootKey) {
        var _this = this;
        if (rootKey === void 0) { rootKey = []; }
        fields.forEach(function (field) {
            if (field.key && field.type && !field.fieldGroup && !field.fieldArray) {
                var /** @type {?} */ valueChanges = field.formControl.valueChanges.pipe(field.modelOptions && field.modelOptions.debounce && field.modelOptions.debounce.default
                    ? debounceTime(field.modelOptions.debounce.default)
                    : tap(function () { }), map(function (value) {
                    if (field.parsers && field.parsers.length > 0) {
                        field.parsers.forEach(function (parserFn) { return value = parserFn(value); });
                    }
                    return value;
                }), tap(function (value) { return _this.changeModel({ key: tslib_1.__spread(rootKey, [field.key]).join('.'), value: value }); }));
                _this.modelChangeSubs.push(valueChanges.subscribe());
            }
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                _this.trackModelChanges(field.fieldGroup, field.key ? tslib_1.__spread(rootKey, [field.key]) : rootKey);
            }
        });
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.clearModelSubscriptions = /**
     * @return {?}
     */
    function () {
        this.modelChangeSubs.forEach(function (sub) { return sub.unsubscribe(); });
        this.modelChangeSubs = [];
    };
    /**
     * @param {?} model
     * @return {?}
     */
    FormlyForm.prototype.patchModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        assignModelToFields(this.fields, model);
        this.clearModelSubscriptions();
        this.resetFieldArray(this.fields, model);
        this.initializeFormValue(this.form);
        (/** @type {?} */ (this.form)).patchValue(model, { onlySelf: true });
        this.trackModelChanges(this.fields);
    };
    /**
     * @param {?=} model
     * @return {?}
     */
    FormlyForm.prototype.resetModel = /**
     * @param {?=} model
     * @return {?}
     */
    function (model) {
        model = isNullOrUndefined(model) ? this.initialModel : model;
        this.resetFieldArray(this.fields, model);
        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
        // but only when the current component is a root one.
        if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {
            this.options.parentForm.resetForm(model);
        }
        else {
            this.form.reset(model);
        }
        (/** @type {?} */ (this.options)).resetTrackModelChanges();
    };
    /**
     * @param {?} fields
     * @param {?} newModel
     * @return {?}
     */
    FormlyForm.prototype.resetFieldArray = /**
     * @param {?} fields
     * @param {?} newModel
     * @return {?}
     */
    function (fields, newModel) {
        var _this = this;
        fields.forEach(function (field) {
            if ((field.fieldGroup && field.fieldGroup.length > 0) || field.fieldArray) {
                var /** @type {?} */ newFieldModel_1 = getFieldModel(newModel, field, true);
                if (field.fieldArray) {
                    field.fieldGroup = field.fieldGroup || [];
                    field.fieldGroup.length = 0;
                    if (field.model !== newFieldModel_1 && field.model) {
                        field.model.length = 0;
                    }
                    var /** @type {?} */ formControl_1 = /** @type {?} */ (field.formControl);
                    while (formControl_1.length !== 0) {
                        formControl_1.removeAt(0);
                    }
                    newFieldModel_1.forEach(function (m, i) {
                        field.model[i] = m;
                        field.fieldGroup.push(tslib_1.__assign({}, clone(field.fieldArray), { key: "" + i }));
                        _this.formlyBuilder.buildForm(formControl_1, [field.fieldGroup[i]], newFieldModel_1, _this.options);
                    });
                }
                else {
                    _this.resetFieldArray(field.fieldGroup, newFieldModel_1);
                }
            }
            else if (field.key && field.type) {
                field.formControl.reset(getFieldModel(newModel, field, false));
            }
        });
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormlyForm.prototype.initializeFormValue = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var _this = this;
        if (control instanceof FormControl) {
            control.setValue(null);
        }
        else if (control instanceof FormGroup) {
            Object.keys(control.controls).forEach(function (k) { return _this.initializeFormValue(control.controls[k]); });
        }
        else if (control instanceof FormArray) {
            control.controls.forEach(function (c) { return _this.initializeFormValue(c); });
        }
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.updateInitialValue = /**
     * @return {?}
     */
    function () {
        this.initialModel = reverseDeepMerge({}, this.model);
    };
    FormlyForm.decorators = [
        { type: Component, args: [{
                    selector: 'formly-form',
                    template: "\n    <formly-field *ngFor=\"let field of fields\"\n      [model]=\"field.model\" [form]=\"form\"\n      [field]=\"field\"\n      [ngClass]=\"field.className\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    FormlyForm.ctorParameters = function () { return [
        { type: FormlyFormBuilder },
        { type: FormlyFormExpression },
        { type: FormlyConfig },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: FormlyForm, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    FormlyForm.propDecorators = {
        model: [{ type: Input }],
        form: [{ type: Input }],
        fields: [{ type: Input }],
        options: [{ type: Input }],
        modelChange: [{ type: Output }],
        isRoot: [{ type: Input }]
    };
    return FormlyForm;
}());
export { FormlyForm };
function FormlyForm_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyForm.prototype.model;
    /** @type {?} */
    FormlyForm.prototype.form;
    /** @type {?} */
    FormlyForm.prototype.fields;
    /** @type {?} */
    FormlyForm.prototype.options;
    /** @type {?} */
    FormlyForm.prototype.modelChange;
    /**
     * \@internal
     * @type {?}
     */
    FormlyForm.prototype.isRoot;
    /** @type {?} */
    FormlyForm.prototype.initialModel;
    /** @type {?} */
    FormlyForm.prototype.modelChangeSubs;
    /** @type {?} */
    FormlyForm.prototype.formlyBuilder;
    /** @type {?} */
    FormlyForm.prototype.formlyExpression;
    /** @type {?} */
    FormlyForm.prototype.formlyConfig;
    /** @type {?} */
    FormlyForm.prototype.parentForm;
    /** @type {?} */
    FormlyForm.prototype.parentFormGroup;
    /** @type {?} */
    FormlyForm.prototype.parentFormlyForm;
}

//# sourceMappingURL=data:application/json;base64,