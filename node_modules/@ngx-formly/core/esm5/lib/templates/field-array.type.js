/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FormArray } from '@angular/forms';
import { FieldType } from './field.type';
import { clone, isNullOrUndefined } from '../utils';
/**
 * @abstract
 */
var /**
 * @abstract
 */
FieldArrayType = /** @class */ (function (_super) {
    tslib_1.__extends(FieldArrayType, _super);
    function FieldArrayType(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        return _this;
    }
    /**
     * @param {?=} i
     * @param {?=} initialModel
     * @return {?}
     */
    FieldArrayType.prototype.add = /**
     * @param {?=} i
     * @param {?=} initialModel
     * @return {?}
     */
    function (i, initialModel) {
        i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;
        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
        this.field.fieldGroup.splice(i, 0, tslib_1.__assign({}, clone(this.field.fieldArray)));
        this.field.fieldGroup.forEach(function (field, index) {
            field.key = "" + index;
        });
        var /** @type {?} */ form = new FormArray([]);
        this.builder.buildForm(form, [this.field.fieldGroup[i]], this.model, this.options);
        this.formControl.insert(i, form.at(0));
        (/** @type {?} */ (this.options)).resetTrackModelChanges();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    FieldArrayType.prototype.remove = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.formControl.removeAt(i);
        this.field.fieldGroup.splice(i, 1);
        this.field.fieldGroup.forEach(function (f, index) { return f.key = "" + index; });
        this.model.splice(i, 1);
        (/** @type {?} */ (this.options)).resetTrackModelChanges();
    };
    return FieldArrayType;
}(FieldType));
/**
 * @abstract
 */
export { FieldArrayType };
function FieldArrayType_tsickle_Closure_declarations() {
    /** @type {?} */
    FieldArrayType.prototype.formControl;
    /** @type {?} */
    FieldArrayType.prototype.builder;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtYXJyYXkudHlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvIiwic291cmNlcyI6WyJsaWIvdGVtcGxhdGVzL2ZpZWxkLWFycmF5LnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sVUFBVSxDQUFDOzs7O0FBR3BEOzs7QUFBQTtJQUE2QywwQ0FBUztJQUdyRCx3QkFBb0IsT0FBMEI7UUFBOUMsWUFDRyxpQkFBTyxTQUNSO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQW1COztLQUU1Qzs7Ozs7O0lBRUQsNEJBQUc7Ozs7O0lBQUgsVUFBSSxDQUFVLEVBQUUsWUFBa0I7UUFDaEMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1RCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsdUJBQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUcsQ0FBQztRQUV4RSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUUsS0FBSztZQUN6QyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUcsS0FBTyxDQUFDO1NBQ3hCLENBQUMsQ0FBQztRQUVILHFCQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25GLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkMsbUJBQU8sSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLHNCQUFzQixFQUFFLENBQUM7S0FDL0M7Ozs7O0lBRUQsK0JBQU07Ozs7SUFBTixVQUFPLENBQVM7UUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxLQUFLLElBQUssT0FBQSxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUcsS0FBTyxFQUFsQixDQUFrQixDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLG1CQUFPLElBQUksQ0FBQyxPQUFPLEVBQUMsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0tBQy9DO3lCQW5DSDtFQUs2QyxTQUFTLEVBK0JyRCxDQUFBOzs7O0FBL0JELDBCQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1BcnJheSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4vZmllbGQudHlwZSc7XG5pbXBvcnQgeyBjbG9uZSwgaXNOdWxsT3JVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBGb3JtbHlGb3JtQnVpbGRlciB9IGZyb20gJy4uL3NlcnZpY2VzL2Zvcm1seS5mb3JtLmJ1aWxkZXInO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmllbGRBcnJheVR5cGUgZXh0ZW5kcyBGaWVsZFR5cGUge1xuICBmb3JtQ29udHJvbDogRm9ybUFycmF5O1xuXG4gY29uc3RydWN0b3IocHJpdmF0ZSBidWlsZGVyOiBGb3JtbHlGb3JtQnVpbGRlcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBhZGQoaT86IG51bWJlciwgaW5pdGlhbE1vZGVsPzogYW55KSB7XG4gICAgaSA9IGlzTnVsbE9yVW5kZWZpbmVkKGkpID8gdGhpcy5maWVsZC5maWVsZEdyb3VwLmxlbmd0aCA6IGk7XG5cbiAgICB0aGlzLm1vZGVsLnNwbGljZShpLCAwLCBpbml0aWFsTW9kZWwgPyBjbG9uZShpbml0aWFsTW9kZWwpIDogdW5kZWZpbmVkKTtcbiAgICB0aGlzLmZpZWxkLmZpZWxkR3JvdXAuc3BsaWNlKGksIDAsIHsgLi4uY2xvbmUodGhpcy5maWVsZC5maWVsZEFycmF5KSB9KTtcblxuICAgIHRoaXMuZmllbGQuZmllbGRHcm91cC5mb3JFYWNoKChmaWVsZCwgaW5kZXgpID0+IHtcbiAgICAgIGZpZWxkLmtleSA9IGAke2luZGV4fWA7XG4gICAgfSk7XG5cbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm1BcnJheShbXSk7XG4gICAgdGhpcy5idWlsZGVyLmJ1aWxkRm9ybShmb3JtLCBbdGhpcy5maWVsZC5maWVsZEdyb3VwW2ldXSwgdGhpcy5tb2RlbCwgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmZvcm1Db250cm9sLmluc2VydChpLCBmb3JtLmF0KDApKTtcblxuICAgICg8YW55PiB0aGlzLm9wdGlvbnMpLnJlc2V0VHJhY2tNb2RlbENoYW5nZXMoKTtcbiAgfVxuXG4gIHJlbW92ZShpOiBudW1iZXIpIHtcbiAgICB0aGlzLmZvcm1Db250cm9sLnJlbW92ZUF0KGkpO1xuICAgIHRoaXMuZmllbGQuZmllbGRHcm91cC5zcGxpY2UoaSwgMSk7XG4gICAgdGhpcy5maWVsZC5maWVsZEdyb3VwLmZvckVhY2goKGYsIGluZGV4KSA9PiBmLmtleSA9IGAke2luZGV4fWApO1xuICAgIHRoaXMubW9kZWwuc3BsaWNlKGksIDEpO1xuICAgICg8YW55PiB0aGlzLm9wdGlvbnMpLnJlc2V0VHJhY2tNb2RlbENoYW5nZXMoKTtcbiAgfVxufVxuIl19