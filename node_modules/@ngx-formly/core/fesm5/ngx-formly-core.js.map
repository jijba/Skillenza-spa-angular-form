{"version":3,"file":"ngx-formly-core.js.map","sources":["ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.expression.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/components/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/core.module.ts"],"sourcesContent":["import { FormlyFieldConfig } from './core';\nimport { Observable } from 'rxjs';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: {key?: string|string[], fieldGroup?: any, fieldArray?: any}): (string|number)[] {\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!(<any> field)['_formlyKeyPath'] || (<any> field)['_formlyKeyPath'].key !== field.key) {\n    let keyPath: (string|number)[] = [];\n    if (field.key) {\n      /* Also allow for an array key, hence the type check  */\n      let pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;\n      for (let pathElement of pathElements) {\n        if (typeof pathElement === 'string') {\n          /* replace paths of the form names[2] by names.2, cfr. angular formly */\n          pathElement = pathElement.replace(/\\[(\\w+)\\]/g, '.$1');\n          keyPath = keyPath.concat(pathElement.split('.'));\n        } else {\n          keyPath.push(pathElement);\n        }\n      }\n      for (let i = 0; i < keyPath.length; i++) {\n        let pathElement = keyPath[i];\n        if (typeof pathElement === 'string' && stringIsInteger(pathElement))  {\n          keyPath[i] = parseInt(pathElement);\n        }\n      }\n    }\n    (<any> field)['_formlyKeyPath'] = {\n      key: field.key,\n      path: keyPath,\n    };\n  }\n\n  return (<any> field)['_formlyKeyPath'].path.slice(0);\n}\n\nfunction stringIsInteger(str: string) {\n  return !isNullOrUndefined(str) && /^\\d+$/.test(str);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function getFieldModel(model: any, field: FormlyFieldConfig, constructEmptyObjects: boolean): any {\n  let keyPath: (string|number)[] = getKeyPath(field);\n  let value: any = model;\n  for (let i = 0; i < keyPath.length; i++) {\n    let path = keyPath[i];\n    let pathValue = value[path];\n    if (isNullOrUndefined(pathValue) && constructEmptyObjects) {\n      if (i < keyPath.length - 1) {\n        /* TODO? : It would be much nicer if we could construct object instances of the correct class, for instance by using factories. */\n        value[path] = typeof keyPath[i + 1] === 'number' ? [] : {};\n      } else if (field.fieldGroup && !field.fieldArray) {\n        value[path] = {};\n      } else if (field.fieldArray) {\n        value[path] = [];\n      }\n    }\n    value = value[path];\n    if (!value) {\n      break;\n    }\n  }\n  return value;\n}\n\nexport function assignModelToFields(fields: FormlyFieldConfig[], model: any) {\n  fields.forEach((field, index) => {\n    if (!isUndefined(field.defaultValue) && isUndefined(getValueForKey(model, field.key))) {\n      assignModelValue(model, field.key, field.defaultValue);\n    }\n\n    (field as any).model = model;\n    if (field.key && (field.fieldGroup || field.fieldArray)) {\n      (field as any).model = getFieldModel(model, field, true);\n    }\n\n    if (field.fieldGroup) {\n      assignModelToFields(field.fieldGroup, field.model);\n    }\n  });\n}\n\nexport function assignModelValue(model: any, path: string | (string | number)[], value: any) {\n  if (typeof path === 'string') {\n    path = getKeyPath({key: path});\n  }\n\n  if (path.length > 1) {\n    const e = path.shift();\n    if (!model[e] || !isObject(model[e])) {\n      model[e] = typeof path[0] === 'string' ? {} : [];\n    }\n    assignModelValue(model[e], path, value);\n  } else {\n    model[path[0]] = value;\n  }\n}\n\nexport function getValueForKey(model: any, path: string | (string | number)[]): any {\n  if (typeof path === 'string') {\n    path = getKeyPath({key: path});\n  }\n  if (path.length > 1) {\n    const e = path.shift();\n    if (!model[e]) {\n      model[e] = typeof path[0] === 'string' ? {} : [];\n    }\n    return getValueForKey(model[e], path);\n  } else {\n    return model[path[0]];\n  }\n}\n\nexport function getKey(controlKey: string, actualKey: string) {\n  return actualKey ? actualKey + '.' + controlKey : controlKey;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        if (isFunction(src[srcArg])) {\n          dest[srcArg] = src[srcArg];\n        } else {\n          dest[srcArg] = clone(src[srcArg]);\n        }\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function clone(value: any): any {\n  if (!isObject(value) || value instanceof RegExp || value instanceof Observable) {\n    return value;\n  }\n\n  if (Object.prototype.toString.call(value) === '[object Date]') {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  value = Object.assign({}, value);\n  Object.keys(value).forEach(k => value[k] = clone(value[k]));\n\n  return value;\n}\n\nexport function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    return Function.bind.apply(Function, [void 0].concat(argNames.concat(`return ${expression};`)))();\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function.bind\n      .apply(Function, [void 0].concat(argNames.concat(`${expression} = expressionValue;`)))();\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken<FormlyConfig>('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = <[string]>[];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyValueChangeEvent } from '../components/formly.field.config';\nimport { evalExpression, FORMLY_VALIDATORS, getFieldModel, isObject, getKeyPath, isNullOrUndefined } from '../utils';\n\n/**\n * @internal\n */\n@Injectable()\nexport class FormlyFormExpression {\n  checkFields(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    this._checkFields(form, fields, model, options);\n  }\n\n  private _checkFields(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    fields.forEach(field => {\n      this.checkFieldExpressionChange(form, field, this.getParentModel(model, field), options);\n      this.checkFieldVisibilityChange(form, field, this.getParentModel(model, field), options);\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this._checkFields(field.formControl ? <FormGroup> field.formControl : form, field.fieldGroup, this.getParentModel(model, field), options);\n      }\n    });\n  }\n\n  private checkFieldExpressionChange(form: FormGroup | FormArray, field: FormlyFieldConfig, model: any, options: FormlyFormOptions) {\n    if (!field || !field.expressionProperties) {\n      return;\n    }\n\n    const expressionProperties = field.expressionProperties;\n    const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n\n    for (const key in expressionProperties) {\n      const expressionValue = evalExpression(\n        expressionProperties[key].expression,\n        { field },\n        [model, options.formState],\n      );\n\n      if (\n        expressionProperties[key].expressionValue !== expressionValue\n        && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n      ) {\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, model, field],\n        );\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : form.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n\n        if (validators.indexOf(key) !== -1 && field.formControl) {\n          field.formControl.updateValueAndValidity({ emitEvent: false });\n        }\n      }\n    }\n  }\n\n  private checkFieldVisibilityChange(form: FormGroup | FormArray, field: FormlyFieldConfig, model: any, options: FormlyFormOptions) {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [model, options.formState],\n    );\n\n    if (hideExpressionResult !== field.hide) {\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n\n      if (field.formControl && field.key) {\n        const parent = this.fieldParentFormControl(form, field);\n        if (parent) {\n          const control = parent.get(`${this.fieldKey(field)}`);\n          if (hideExpressionResult === true && control) {\n            this.removeFieldControl(parent, field);\n          } else if (hideExpressionResult === false && !control) {\n            this.addFieldControl(parent, field, model);\n          }\n        }\n      }\n\n      if (options.fieldChanges) {\n        options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hideExpressionResult });\n      }\n    }\n  }\n\n  private addFieldControl(parent: FormArray | FormGroup, field: FormlyFieldConfig, model: any) {\n    const fieldModel = this.getFieldModel(model, field);\n\n    if (\n      !(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))\n      && field.formControl.value !== fieldModel\n    ) {\n      field.formControl.patchValue(fieldModel, { emitEvent: false });\n    }\n\n    if (parent instanceof FormArray) {\n      parent.push(field.formControl);\n    } else if (parent instanceof FormGroup) {\n      parent.addControl(`${this.fieldKey(field)}`, field.formControl);\n    }\n  }\n\n  private getFieldModel(model: any, field: FormlyFieldConfig) {\n    if (field.fieldGroup || field.fieldArray) {\n      return model;\n    }\n\n    return getFieldModel(model, field, false);\n  }\n\n  private getParentModel(model: any, field: FormlyFieldConfig) {\n    if (field.key && (field.fieldGroup || field.fieldArray)) {\n      return getFieldModel(model, field, true);\n    }\n    return model;\n  }\n\n  private removeFieldControl(parent: FormArray | FormGroup, field: FormlyFieldConfig) {\n    if (parent instanceof FormArray) {\n      parent.removeAt(this.fieldKey(field) as number);\n    } else if (parent instanceof FormGroup) {\n      parent.removeControl(`${this.fieldKey(field)}`);\n    }\n  }\n\n  private fieldParentFormControl(form: FormGroup | FormArray, field: FormlyFieldConfig): FormArray | FormGroup {\n    const paths = getKeyPath(field);\n    paths.pop(); // remove last path\n\n    return (paths.length > 0 ? form.get(paths) : form) as any;\n  }\n\n  private fieldKey(field: FormlyFieldConfig) {\n    return getKeyPath(field).pop();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup, FormArray, FormControl, AbstractControl, Validators, AbstractControlOptions } from '@angular/forms';\nimport { FormlyConfig, FieldValidatorFn, TemplateManipulators } from './formly.config';\nimport { FORMLY_VALIDATORS, evalStringExpression, evalExpressionValueSetter, getFieldId, isObject, isNullOrUndefined, clone, assignModelToFields } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\nimport { getKeyPath, isFunction } from '../utils';\nimport { FormlyFormExpression } from './formly.form.expression';\n\n@Injectable()\nexport class FormlyFormBuilder {\n  private formId = 0;\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private formlyFormExpression: FormlyFormExpression,\n  ) {}\n\n  buildForm(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    let fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    if (!Array.isArray(fieldTransforms)) {\n      fieldTransforms = [fieldTransforms];\n    }\n\n    fieldTransforms.forEach(fieldTransform => {\n      if (fieldTransform) {\n        fields = fieldTransform(fields, model, form, options);\n        if (!fields) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n\n    assignModelToFields(fields, model);\n    this._buildForm(form, fields, options);\n    this.formlyFormExpression.checkFields(form, fields, model, options);\n  }\n\n  private _buildForm(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], options: FormlyFormOptions) {\n    this.formId++;\n    this.registerFormControls(form, fields, options);\n  }\n\n  private registerFormControls(form: FormGroup | FormArray, fields: FormlyFieldConfig[], options: FormlyFormOptions) {\n    fields.forEach((field, index) => {\n      field.id = getFieldId(`formly_${this.formId}`, field, index);\n      this.initFieldOptions(field);\n      this.initFieldExpression(field, options);\n      this.initFieldValidation(field);\n      this.initFieldWrappers(field);\n      this.initFieldAsyncValidation(field);\n\n      if (field.key && field.type) {\n        const paths = getKeyPath({ key: field.key });\n        let rootForm = form, rootModel = field.model;\n        paths.forEach((path, index) => {\n          // FormGroup/FormArray only allow string value for path\n          const formPath = path.toString();\n          // is last item\n          if (index === paths.length - 1) {\n            this.addFormControl(rootForm, field, rootModel, formPath);\n            if (field.fieldArray) {\n              field.fieldGroup = [];\n              field.model.forEach((m: any, i: number) => field.fieldGroup.push(\n                { ...clone(field.fieldArray), key: `${i}` },\n              ));\n              assignModelToFields(field.fieldGroup, rootModel);\n            }\n\n          } else {\n            let nestedForm = rootForm.get(formPath) as FormGroup;\n            if (!nestedForm) {\n              nestedForm = new FormGroup({});\n              this.addControl(rootForm, formPath, nestedForm);\n            }\n            if (!rootModel[path]) {\n              rootModel[path] = typeof path === 'string' ? {} : [];\n            }\n\n            rootForm = nestedForm;\n            rootModel = rootModel[path];\n          }\n        });\n      }\n\n      if (field.fieldGroup) {\n        if (!field.type) {\n          field.type = 'formly-group';\n        }\n\n        // if `hideExpression` is set in that case we have to deal\n        // with toggle FormControl for each field in fieldGroup separately\n        if (field.hideExpression) {\n          field.fieldGroup.forEach(f => {\n            let hideExpression: any = f.hideExpression || (() => false);\n            if (typeof hideExpression === 'string') {\n              hideExpression = evalStringExpression(hideExpression, ['model', 'formState']);\n            }\n\n            f.hideExpression = (model, formState) => field.hide || hideExpression(model, formState);\n          });\n        }\n\n        if (field.key) {\n          this.addFormControl(form, field, { [field.key]: field.fieldArray ? [] : {} }, field.key);\n          this._buildForm(field.formControl as FormGroup, field.fieldGroup, options);\n        } else {\n          this._buildForm(form, field.fieldGroup, options);\n        }\n      }\n    });\n  }\n\n  private initFieldExpression(field: FormlyFieldConfig, options: FormlyFormOptions) {\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties as any) {\n        if (typeof field.expressionProperties[key] === 'string' || isFunction(field.expressionProperties[key])) {\n          // cache built expression\n          field.expressionProperties[key] = {\n            expression: isFunction(field.expressionProperties[key]) ? field.expressionProperties[key] : evalStringExpression(field.expressionProperties[key], ['model', 'formState']),\n            expressionValueSetter: evalExpressionValueSetter(\n              `field.${key}`,\n              ['expressionValue', 'model', 'field'],\n            ),\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n      if (typeof field.hideExpression === 'string') {\n        // cache built expression\n        field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);\n      }\n    }\n  }\n\n  private initFieldOptions(field: FormlyFieldConfig) {\n    field.templateOptions = field.templateOptions || {};\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n      if (field.key) {\n        field.templateOptions = Object.assign({\n          label: '',\n          placeholder: '',\n          focus: false,\n        }, field.templateOptions);\n      }\n    }\n  }\n\n  private initFieldAsyncValidation(field: FormlyFieldConfig) {\n    const validators: any = [];\n    if (field.asyncValidators) {\n      for (const validatorName in field.asyncValidators) {\n        if (validatorName !== 'validation') {\n          let validator = field.asyncValidators[validatorName];\n          if (isObject(validator)) {\n            validator = validator.expression;\n          }\n\n          validators.push((control: FormControl) => new Promise((resolve) => {\n            return validator(control, field).then((result: boolean) => {\n              resolve(result ? null : { [validatorName]: true });\n            });\n          }));\n        }\n      }\n    }\n\n    if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {\n      field.asyncValidators.validation\n        .forEach((validator: any) => validators.push(this.wrapNgValidatorFn(field, validator)));\n    }\n\n    if (validators.length) {\n      if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {\n        field.asyncValidators.validation = Validators.composeAsync([field.asyncValidators.validation, ...validators]);\n      } else {\n        field.asyncValidators = {\n          validation: Validators.composeAsync(validators),\n        };\n      }\n    }\n  }\n\n  private initFieldValidation(field: FormlyFieldConfig) {\n    const validators: any = [];\n    FORMLY_VALIDATORS\n      .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt))\n        || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]),\n      )\n      .forEach((opt) => {\n        validators.push((control: FormControl) => {\n          if (field.templateOptions[opt] === false) {\n            return null;\n          }\n\n          return this.getValidation(opt, field.templateOptions[opt])(control);\n        });\n      });\n\n    if (field.validators) {\n      for (const validatorName in field.validators) {\n        if (validatorName !== 'validation') {\n          let validator = field.validators[validatorName];\n          if (isObject(validator)) {\n            validator = validator.expression;\n          }\n\n          validators.push((control: FormControl) => validator(control, field) ? null : { [validatorName]: true });\n        }\n      }\n    }\n\n    if (field.validators && Array.isArray(field.validators.validation)) {\n      field.validators.validation\n        .forEach((validator: any) => validators.push(this.wrapNgValidatorFn(field, validator)));\n    }\n\n    if (validators.length) {\n      if (field.validators && !Array.isArray(field.validators.validation)) {\n        field.validators.validation = Validators.compose([field.validators.validation, ...validators]);\n      } else {\n        field.validators = {\n          validation: Validators.compose(validators),\n        };\n      }\n    }\n  }\n\n  private addFormControl(form: FormGroup | FormArray, field: FormlyFieldConfig, model: any, path: string) {\n    let control: AbstractControl;\n    const validators = field.validators ? field.validators.validation : undefined,\n      asyncValidators = field.asyncValidators ? field.asyncValidators.validation : undefined,\n      updateOn = field.modelOptions && field.modelOptions.updateOn ?\n        field.modelOptions.updateOn : undefined;\n    const abstractControlOptions = {\n      validators,\n      asyncValidators,\n      updateOn,\n    } as AbstractControlOptions;\n\n    if (field.formControl instanceof AbstractControl || form.get(path)) {\n      control = field.formControl || form.get(path);\n      if (\n        !(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))\n        && control.value !== model[path]\n        && control instanceof FormControl\n      ) {\n        control.patchValue(model[path]);\n      }\n    } else if (field.component && field.component.createControl) {\n      control = field.component.createControl(model[path], field);\n    } else if (field.fieldGroup && field.key && field.key === path && !field.fieldArray) {\n      control = new FormGroup(model[path], abstractControlOptions);\n    } else if (field.fieldArray && field.key && field.key === path) {\n      control = new FormArray([], abstractControlOptions);\n    } else {\n      control = new FormControl(model[path], abstractControlOptions);\n    }\n\n    if (field.templateOptions.disabled) {\n      control.disable();\n    }\n\n    // Replace decorated property with a getter that returns the observable.\n    // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85\n    if (delete field.templateOptions.disabled) {\n      Object.defineProperty(field.templateOptions, 'disabled', {\n        get: (function () { return !this.formControl.enabled; }).bind(field),\n        set: (function (value: boolean) {\n          if (this.expressionProperties && this.expressionProperties.hasOwnProperty('templateOptions.disabled')) {\n            this.expressionProperties['templateOptions.disabled'].expressionValue = value;\n          }\n\n          value ? this.formControl.disable() : this.formControl.enable();\n        }).bind(field),\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    this.addControl(form, path, control, field);\n  }\n\n  private addControl(form: FormGroup | FormArray, key: string | number, formControl: AbstractControl, field?: FormlyFieldConfig) {\n    if (field) {\n      field.formControl = formControl;\n    }\n\n    if (form instanceof FormArray) {\n      if (form.at(<number> key) !== formControl) {\n        form.setControl(<number>key, formControl);\n      }\n    } else {\n      if (form.get(<string> key) !== formControl) {\n        form.setControl(<string>key, formControl);\n      }\n    }\n  }\n\n  private getValidation(opt: string, value: any) {\n    switch (opt) {\n      case 'required':\n        return Validators.required;\n      case 'pattern':\n        return Validators.pattern(value);\n      case 'minLength':\n        return Validators.minLength(value);\n      case 'maxLength':\n        return Validators.maxLength(value);\n      case 'min':\n        return Validators.min(value);\n      case 'max':\n        return Validators.max(value);\n    }\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfig, validator: string | FieldValidatorFn) {\n    validator = typeof validator === 'string'\n    ? this.formlyConfig.getValidator(validator).validation\n    : validator;\n\n    return (control: AbstractControl) => (validator as FieldValidatorFn)(control, field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    const templateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n    };\n\n    if (field.templateOptions) {\n      this.mergeTemplateManipulators(templateManipulators, field.templateOptions.templateManipulators);\n    }\n\n    this.mergeTemplateManipulators(templateManipulators, this.formlyConfig.templateManipulators);\n\n    const preWrappers = templateManipulators.preWrapper.map(m => m(field)).filter(type => type),\n      postWrappers = templateManipulators.postWrapper.map(m => m(field)).filter(type => type);\n\n    if (!field.wrappers) {\n      field.wrappers = [];\n    }\n\n    field.wrappers = [...preWrappers, ...(field.wrappers || []), ...postWrappers];\n  }\n\n  private mergeTemplateManipulators(source: TemplateManipulators, target: TemplateManipulators) {\n    target = target || {};\n    if (target.preWrapper) {\n      source.preWrapper = source.preWrapper.concat(target.preWrapper);\n    }\n    if (target.postWrapper) {\n      source.postWrapper = source.postWrapper.concat(target.postWrapper);\n    }\n\n    return source;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, SkipSelf, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray, NgForm, FormGroupDirective, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyValueChangeEvent } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFormExpression } from '../services/formly.form.expression';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, reverseDeepMerge, getFieldModel, clone, assignModelToFields } from '../utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      [model]=\"field.model\" [form]=\"form\"\n      [field]=\"field\"\n      [ngClass]=\"field.className\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  `,\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() model: any = {};\n  @Input() form: FormGroup | FormArray = new FormGroup({});\n  @Input() fields: FormlyFieldConfig[] = [];\n  @Input() options: FormlyFormOptions;\n  @Output() modelChange = new EventEmitter<any>();\n\n  /** @internal */\n  @Input() isRoot = true;\n\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyExpression: FormlyFormExpression,\n    private formlyConfig: FormlyConfig,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    @Optional() @SkipSelf() private parentFormlyForm: FormlyForm,\n  ) {}\n\n  ngDoCheck() {\n    this.checkExpressionChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.fields || this.fields.length === 0 || !this.isRoot) {\n      return;\n    }\n\n    if (changes.fields || changes.form) {\n      this.model = this.model || {};\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.updateInitialValue();\n    } else if (changes.model) {\n      this.patchModel(this.model);\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key, event.value);\n    this.modelChange.emit(this.model);\n    this.checkExpressionChange();\n  }\n\n  setOptions() {\n    this.options = this.options || {};\n\n    this.options.formState = this.options.formState || {};\n    if (!this.options.showError) {\n      this.options.showError = this.formlyConfig.extras.showError;\n    }\n    if (!this.options.fieldChanges) {\n      this.options.fieldChanges = new Subject<FormlyValueChangeEvent>();\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = this.resetModel.bind(this);\n    }\n\n    if (!this.options.parentForm) {\n      this.options.parentForm = this.parentFormGroup || this.parentForm;\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = this.updateInitialValue.bind(this);\n    }\n\n    if (!(<any> this.options).resetTrackModelChanges) {\n      (<any> this.options).resetTrackModelChanges = () => {\n        this.clearModelSubscriptions();\n        this.trackModelChanges(this.fields);\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.isRoot) {\n      this.formlyExpression.checkFields(this.form, this.fields, this.model, this.options);\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && field.type && !field.fieldGroup && !field.fieldArray) {\n        const valueChanges = field.formControl.valueChanges.pipe(\n          field.modelOptions && field.modelOptions.debounce && field.modelOptions.debounce.default\n          ? debounceTime(field.modelOptions.debounce.default)\n          : tap(() => {}),\n          map(value => {\n            if (field.parsers && field.parsers.length > 0) {\n              field.parsers.forEach(parserFn => value = parserFn(value));\n            }\n\n            return value;\n          }),\n          tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })),\n        );\n\n        this.modelChangeSubs.push(valueChanges.subscribe());\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n\n  private patchModel(model: any) {\n    assignModelToFields(this.fields, model);\n    this.clearModelSubscriptions();\n    this.resetFieldArray(this.fields, model);\n    this.initializeFormValue(this.form);\n    (<FormGroup> this.form).patchValue(model, { onlySelf: true });\n    this.trackModelChanges(this.fields);\n  }\n\n  private resetModel(model?: any) {\n    model = isNullOrUndefined(model) ? this.initialModel : model;\n    this.resetFieldArray(this.fields, model);\n\n    // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n    // but only when the current component is a root one.\n    if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {\n      this.options.parentForm.resetForm(model);\n    } else {\n      this.form.reset(model);\n    }\n\n    (<any> this.options).resetTrackModelChanges();\n  }\n\n  private resetFieldArray(fields: FormlyFieldConfig[], newModel: any) {\n    fields.forEach(field => {\n      if ((field.fieldGroup && field.fieldGroup.length > 0) || field.fieldArray) {\n        const newFieldModel = getFieldModel(newModel, field, true);\n        if (field.fieldArray) {\n          field.fieldGroup = field.fieldGroup || [];\n          field.fieldGroup.length = 0;\n\n          if (field.model !== newFieldModel && field.model) {\n            field.model.length = 0;\n          }\n\n          const formControl = <FormArray>field.formControl;\n          while (formControl.length !== 0) {\n            formControl.removeAt(0);\n          }\n\n          newFieldModel.forEach((m: any, i: number) => {\n            field.model[i] = m;\n            field.fieldGroup.push({ ...clone(field.fieldArray), key: `${i}` });\n            this.formlyBuilder.buildForm(formControl, [field.fieldGroup[i]], newFieldModel, this.options);\n          });\n        } else {\n          this.resetFieldArray(field.fieldGroup, newFieldModel);\n        }\n      } else if (field.key && field.type) {\n        field.formControl.reset(getFieldModel(newModel, field, false));\n      }\n    });\n  }\n\n  private initializeFormValue(control: AbstractControl) {\n    if (control instanceof FormControl) {\n      control.setValue(null);\n    } else if (control instanceof FormGroup) {\n      Object.keys(control.controls).forEach(k => this.initializeFormValue(control.controls[k]));\n    } else if (control instanceof FormArray) {\n      control.controls.forEach(c => this.initializeFormValue(c));\n    }\n  }\n\n  private updateInitialValue() {\n    this.initialModel = reverseDeepMerge({}, this.model);\n  }\n}\n","import {\n  Component, OnInit, OnChanges, EventEmitter, Input, Output, OnDestroy,\n  ViewContainerRef, ViewChild, ComponentRef, ComponentFactoryResolver, SimpleChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { Field } from '../templates/field';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyLifeCycleFn, FormlyLifeCycleOptions } from './formly.field.config';\n\n@Component({\n  selector: 'formly-field',\n  template: `\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"field.template && !field.fieldGroup\" [innerHtml]=\"field.template\"></div>\n  `,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() model: any;\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions = {};\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n\n  private componentRefs: ComponentRef<Field>[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n  ) {}\n\n  ngAfterContentInit() {\n    this.lifeCycleHooks(this.lifecycle.afterContentInit);\n  }\n\n  ngAfterContentChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterContentChecked);\n  }\n\n  ngAfterViewInit() {\n    this.lifeCycleHooks(this.lifecycle.afterViewInit);\n  }\n\n  ngAfterViewChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterViewChecked);\n  }\n\n  ngDoCheck() {\n    this.lifeCycleHooks(this.lifecycle.doCheck);\n  }\n\n  ngOnInit() {\n    if (!this.field.template) {\n      this.createFieldComponent();\n    }\n    this.lifeCycleHooks(this.lifecycle.onInit);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.lifeCycleHooks(this.lifecycle.onChanges);\n    this.componentRefs.forEach(ref => {\n      Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.lifeCycleHooks(this.lifecycle.onDestroy);\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n  }\n\n  private createFieldComponent(): ComponentRef<Field> {\n    const type = this.formlyConfig.getType(this.field.type);\n\n    let fieldComponent = this.fieldComponent;\n    (this.field.wrappers || []).forEach(wrapperName => {\n      const wrapperRef = this.createComponent(fieldComponent, this.formlyConfig.getWrapper(wrapperName).component);\n      fieldComponent = wrapperRef.instance.fieldComponent;\n    });\n\n    return this.createComponent(fieldComponent, type.component);\n  }\n\n  private createComponent(fieldComponent: ViewContainerRef, component: any): ComponentRef<any> {\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    let ref = <ComponentRef<Field>>fieldComponent.createComponent(componentFactory);\n\n    Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n    });\n\n    this.componentRefs.push(ref);\n\n    return ref;\n  }\n\n  private get lifecycle(): FormlyLifeCycleOptions {\n    return this.field.lifecycle || {};\n  }\n\n  private lifeCycleHooks(callback: FormlyLifeCycleFn) {\n    if (callback) {\n      callback(this.form, this.field, this.model, this.options);\n    }\n  }\n}\n","import { Directive, HostListener, ElementRef, Input, OnChanges, SimpleChanges, SimpleChange, Renderer2 } from '@angular/core';\nimport { FormlyFieldConfig } from './formly.field.config';\n\n@Directive({\n  selector: '[formlyAttributes]',\n})\nexport class FormlyAttributes implements OnChanges {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  private attributes = ['id', 'name', 'placeholder', 'tabindex', 'step', 'readonly'];\n  private statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\n  @HostListener('focus') onFocus() {\n    this.field.focus = true;\n  }\n\n  @HostListener('blur') onBlur() {\n    this.field.focus = false;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      const fieldChanges = changes.field;\n      this.attributes\n        .filter(attr => this.canApplyRender(fieldChanges, attr))\n        .forEach(attr => this.renderer.setAttribute(\n          this.elementRef.nativeElement, attr, this.getPropValue(this.field, attr),\n        ));\n\n      if (this.field.templateOptions && this.field.templateOptions.attributes) {\n        const attributes = this.field.templateOptions.attributes;\n        Object.keys(attributes).forEach(name => this.renderer.setAttribute(\n          this.elementRef.nativeElement, name, attributes[name] as string,\n        ));\n      }\n\n      this.statements\n        .filter(statement => this.canApplyRender(fieldChanges, statement))\n        .forEach(statement => this.renderer.listen(\n          this.elementRef.nativeElement, statement, this.getStatementValue(statement),\n        ));\n\n      if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {\n        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();\n      }\n    }\n  }\n\n  private getPropValue(field: FormlyFieldConfig, prop: string) {\n    field = field || {};\n    if (field.templateOptions && field.templateOptions[prop]) {\n      return field.templateOptions[prop];\n    }\n\n    return (<any>field)[prop] || '';\n  }\n\n  private getStatementValue(statement: string) {\n    const fn = this.field.templateOptions[statement];\n\n    return (event: any) => fn(this.field, event);\n  }\n\n  private canApplyRender(fieldChange: SimpleChange, prop: string): Boolean {\n    const currentValue = this.getPropValue(this.field, prop),\n      previousValue = this.getPropValue(fieldChange.previousValue, prop);\n\n    if (previousValue !== currentValue) {\n      if (this.statements.indexOf(prop) !== -1) {\n        return typeof currentValue === 'function';\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { FormlyTemplateOptions, FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport abstract class Field {\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() model: any;\n  @Input() options: FormlyFormOptions;\n\n  get key() { return this.field.key; }\n\n  get formControl(): AbstractControl { return this.field.formControl; }\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n","import { Field } from './field';\nimport { OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, AfterViewChecked, SimpleChanges } from '@angular/core';\n\nexport abstract class FieldType extends Field implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  ngOnInit() {}\n  ngOnChanges(changes: SimpleChanges) {}\n  ngDoCheck() {}\n  ngAfterContentInit() {}\n  ngAfterContentChecked() {}\n  ngAfterViewInit() {}\n  ngAfterViewChecked() {}\n  ngOnDestroy() {}\n}\n","import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\n\nexport abstract class FieldArrayType extends FieldType {\n  formControl: FormArray;\n\n constructor(private builder: FormlyFormBuilder) {\n    super();\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n    this.field.fieldGroup.splice(i, 0, { ...clone(this.field.fieldArray) });\n\n    this.field.fieldGroup.forEach((field, index) => {\n      field.key = `${index}`;\n    });\n\n    const form = new FormArray([]);\n    this.builder.buildForm(form, [this.field.fieldGroup[i]], this.model, this.options);\n    this.formControl.insert(i, form.at(0));\n\n    (<any> this.options).resetTrackModelChanges();\n  }\n\n  remove(i: number) {\n    this.formControl.removeAt(i);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, index) => f.key = `${index}`);\n    this.model.splice(i, 1);\n    (<any> this.options).resetTrackModelChanges();\n  }\n}\n","import { ViewContainerRef } from '@angular/core';\nimport { Field } from './field';\n\nexport abstract class FieldWrapper extends Field {\n  fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"model\"\n      [form]=\"field.formControl || form\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  `,\n})\nexport class FormlyGroup extends FieldType {}\n","import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n  @Input() set fieldForm(control: FormControl) {\n    console.warn(`formly-validation-message: Passing 'fieldForm' input is deprecated and it will be removed in the 4.0 version.`);\n  }\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG_TOKEN } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyFormExpression } from './services/formly.form.expression';\nimport { FormlyGroup } from './components/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\n\n@NgModule({\n  declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  entryComponents: [FormlyGroup],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        FormlyFormBuilder,\n        FormlyFormExpression,\n        FormlyConfig,\n        { provide: FORMLY_CONFIG_TOKEN, useValue: { types: [{ name: 'formly-group', component: FormlyGroup }] }, multi: true },\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n}\n"],"names":["tslib_1.__values","tslib_1.__spread","tslib_1.__extends"],"mappings":"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"}
