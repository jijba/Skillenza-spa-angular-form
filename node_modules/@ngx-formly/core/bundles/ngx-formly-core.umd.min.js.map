{"version":3,"sources":["null","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.expression.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/components/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","getKeyPath","field","key","keyPath","pathElements","split","pathElements_1","tslib_1.__values","pathElements_1_1","pathElement","replace","isNullOrUndefined","str","test","parseInt","path","slice","FORMLY_VALIDATORS","getFieldModel","model","constructEmptyObjects","fieldGroup","fieldArray","assignModelToFields","fields","forEach","index","isUndefined","defaultValue","getValueForKey","shift","assignModelValue","isObject","reverseDeepMerge","dest","args","_i","src","srcArg","isFunction","clone","obj1","obj2","getPrototypeOf","undefined","x","RegExp","Observable","toString","Date","getTime","isArray","map","v","keys","k","evalStringExpression","expression","argNames","Function","bind","apply","console","evalExpressionValueSetter","evalExpression","thisArg","argVal","FORMLY_CONFIG_TOKEN","InjectionToken","FormlyConfig","configs","_this","preWrapper","postWrapper","fieldTransform","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","config","addConfig","types","type","setType","validators","validator","setValidator","wrappers","wrapper","setWrapper","manipulators","manipulator","setManipulator","validationMessages","addValidatorMessage","name","message","extras","option","component","extends","defaultOptions","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","extendDefaults","optionsTypes","getWrapper","getValidator","messages","getValidatorMessage","class","method","extendedType","Injectable","Inject","FormlyFormExpression","checkFields","form","_checkFields","checkFieldExpressionChange","getParentModel","checkFieldVisibilityChange","expressionProperties","expressionValue","formState","JSON","stringify","expressionValueSetter","indexOf","control","get","patchValue","updateValueAndValidity","emitEvent","hideExpression","hideExpressionResult","hide","templateOptions","hidden","parent_1","fieldParentFormControl","fieldKey","removeFieldControl","addFieldControl","fieldChanges","parent","fieldModel","FormArray","FormGroup","addControl","removeAt","removeControl","paths","pop","FormlyFormBuilder","formlyConfig","formlyFormExpression","buildForm","fieldTransforms","_buildForm","formId","registerFormControls","id","template","join","getFieldId","initFieldOptions","initFieldExpression","initFieldValidation","initFieldWrappers","initFieldAsyncValidation","paths_1","rootForm_1","rootModel_1","formPath","addFormControl","nestedForm","f","_a","label","placeholder","focus","asyncValidators","validatorName","validator_1","Promise","resolve","then","result","wrapNgValidatorFn","Validators","composeAsync","filter","opt","getValidation","validator_2","compose","abstractControlOptions","updateOn","modelOptions","AbstractControl","FormControl","createControl","disabled","disable","defineProperty","enabled","set","enable","enumerable","configurable","at","setControl","required","pattern","minLength","maxLength","min","max","templateManipulators","mergeTemplateManipulators","preWrappers","postWrappers","source","target","FormlyForm","formlyBuilder","formlyExpression","parentFormGroup","parentFormlyForm","EventEmitter","ngDoCheck","checkExpressionChange","ngOnChanges","changes","isRoot","setOptions","clearModelSubscriptions","trackModelChanges","updateInitialValue","patchModel","ngOnDestroy","changeModel","event","modelChange","emit","Subject","resetModel","resetTrackModelChanges","rootKey","valueChanges","pipe","debounce","default","debounceTime","tap","parsers","parserFn","tslib_1.__spread","modelChangeSubs","subscribe","sub","unsubscribe","resetFieldArray","initializeFormValue","onlySelf","initialModel","resetForm","reset","newModel","newFieldModel_1","formControl_1","setValue","controls","c","Component","selector","NgForm","decorators","Optional","FormGroupDirective","SkipSelf","Input","Output","FormlyField","componentFactoryResolver","ngAfterContentInit","lifeCycleHooks","lifecycle","afterContentInit","ngAfterContentChecked","afterContentChecked","ngAfterViewInit","afterViewInit","ngAfterViewChecked","afterViewChecked","doCheck","ngOnInit","createFieldComponent","onInit","onChanges","componentRefs","ref","instance","onDestroy","componentRef","destroy","fieldComponent","wrapperName","wrapperRef","createComponent","componentFactory","resolveComponentFactory","callback","host","[style.display]","ComponentFactoryResolver","ViewChild","read","ViewContainerRef","FormlyAttributes","renderer","elementRef","onFocus","onBlur","fieldChanges_1","attributes","attr","canApplyRender","setAttribute","nativeElement","getPropValue","attributes_1","statements","statement","listen","getStatementValue","previousValue","currentValue","prop","fn","fieldChange","Directive","Renderer2","ElementRef","HostListener","Field","FieldType","_super","tslib_1.__extends","FieldArrayType","builder","add","splice","insert","remove","FieldWrapper","FormlyValidationMessage","warn","fieldForm","errors","FormlyModule","forRoot","ngModule","providers","provide","useValue","FormlyGroup","multi","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","ReactiveFormsModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { Observable } from 'rxjs';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: {key?: string|string[], fieldGroup?: any, fieldArray?: any}): (string|number)[] {\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!(<any> field)['_formlyKeyPath'] || (<any> field)['_formlyKeyPath'].key !== field.key) {\n    let keyPath: (string|number)[] = [];\n    if (field.key) {\n      /* Also allow for an array key, hence the type check  */\n      let pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;\n      for (let pathElement of pathElements) {\n        if (typeof pathElement === 'string') {\n          /* replace paths of the form names[2] by names.2, cfr. angular formly */\n          pathElement = pathElement.replace(/\\[(\\w+)\\]/g, '.$1');\n          keyPath = keyPath.concat(pathElement.split('.'));\n        } else {\n          keyPath.push(pathElement);\n        }\n      }\n      for (let i = 0; i < keyPath.length; i++) {\n        let pathElement = keyPath[i];\n        if (typeof pathElement === 'string' && stringIsInteger(pathElement))  {\n          keyPath[i] = parseInt(pathElement);\n        }\n      }\n    }\n    (<any> field)['_formlyKeyPath'] = {\n      key: field.key,\n      path: keyPath,\n    };\n  }\n\n  return (<any> field)['_formlyKeyPath'].path.slice(0);\n}\n\nfunction stringIsInteger(str: string) {\n  return !isNullOrUndefined(str) && /^\\d+$/.test(str);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function getFieldModel(model: any, field: FormlyFieldConfig, constructEmptyObjects: boolean): any {\n  let keyPath: (string|number)[] = getKeyPath(field);\n  let value: any = model;\n  for (let i = 0; i < keyPath.length; i++) {\n    let path = keyPath[i];\n    let pathValue = value[path];\n    if (isNullOrUndefined(pathValue) && constructEmptyObjects) {\n      if (i < keyPath.length - 1) {\n        /* TODO? : It would be much nicer if we could construct object instances of the correct class, for instance by using factories. */\n        value[path] = typeof keyPath[i + 1] === 'number' ? [] : {};\n      } else if (field.fieldGroup && !field.fieldArray) {\n        value[path] = {};\n      } else if (field.fieldArray) {\n        value[path] = [];\n      }\n    }\n    value = value[path];\n    if (!value) {\n      break;\n    }\n  }\n  return value;\n}\n\nexport function assignModelToFields(fields: FormlyFieldConfig[], model: any) {\n  fields.forEach((field, index) => {\n    if (!isUndefined(field.defaultValue) && isUndefined(getValueForKey(model, field.key))) {\n      assignModelValue(model, field.key, field.defaultValue);\n    }\n\n    (field as any).model = model;\n    if (field.key && (field.fieldGroup || field.fieldArray)) {\n      (field as any).model = getFieldModel(model, field, true);\n    }\n\n    if (field.fieldGroup) {\n      assignModelToFields(field.fieldGroup, field.model);\n    }\n  });\n}\n\nexport function assignModelValue(model: any, path: string | (string | number)[], value: any) {\n  if (typeof path === 'string') {\n    path = getKeyPath({key: path});\n  }\n\n  if (path.length > 1) {\n    const e = path.shift();\n    if (!model[e] || !isObject(model[e])) {\n      model[e] = typeof path[0] === 'string' ? {} : [];\n    }\n    assignModelValue(model[e], path, value);\n  } else {\n    model[path[0]] = value;\n  }\n}\n\nexport function getValueForKey(model: any, path: string | (string | number)[]): any {\n  if (typeof path === 'string') {\n    path = getKeyPath({key: path});\n  }\n  if (path.length > 1) {\n    const e = path.shift();\n    if (!model[e]) {\n      model[e] = typeof path[0] === 'string' ? {} : [];\n    }\n    return getValueForKey(model[e], path);\n  } else {\n    return model[path[0]];\n  }\n}\n\nexport function getKey(controlKey: string, actualKey: string) {\n  return actualKey ? actualKey + '.' + controlKey : controlKey;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        if (isFunction(src[srcArg])) {\n          dest[srcArg] = src[srcArg];\n        } else {\n          dest[srcArg] = clone(src[srcArg]);\n        }\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function clone(value: any): any {\n  if (!isObject(value) || value instanceof RegExp || value instanceof Observable) {\n    return value;\n  }\n\n  if (Object.prototype.toString.call(value) === '[object Date]') {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  value = Object.assign({}, value);\n  Object.keys(value).forEach(k => value[k] = clone(value[k]));\n\n  return value;\n}\n\nexport function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    return Function.bind.apply(Function, [void 0].concat(argNames.concat(`return ${expression};`)))();\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function.bind\n      .apply(Function, [void 0].concat(argNames.concat(`${expression} = expressionValue;`)))();\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken<FormlyConfig>('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = <[string]>[];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyValueChangeEvent } from '../components/formly.field.config';\nimport { evalExpression, FORMLY_VALIDATORS, getFieldModel, isObject, getKeyPath, isNullOrUndefined } from '../utils';\n\n/**\n * @internal\n */\n@Injectable()\nexport class FormlyFormExpression {\n  checkFields(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    this._checkFields(form, fields, model, options);\n  }\n\n  private _checkFields(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    fields.forEach(field => {\n      this.checkFieldExpressionChange(form, field, this.getParentModel(model, field), options);\n      this.checkFieldVisibilityChange(form, field, this.getParentModel(model, field), options);\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this._checkFields(field.formControl ? <FormGroup> field.formControl : form, field.fieldGroup, this.getParentModel(model, field), options);\n      }\n    });\n  }\n\n  private checkFieldExpressionChange(form: FormGroup | FormArray, field: FormlyFieldConfig, model: any, options: FormlyFormOptions) {\n    if (!field || !field.expressionProperties) {\n      return;\n    }\n\n    const expressionProperties = field.expressionProperties;\n    const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n\n    for (const key in expressionProperties) {\n      const expressionValue = evalExpression(\n        expressionProperties[key].expression,\n        { field },\n        [model, options.formState],\n      );\n\n      if (\n        expressionProperties[key].expressionValue !== expressionValue\n        && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n      ) {\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, model, field],\n        );\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : form.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n\n        if (validators.indexOf(key) !== -1 && field.formControl) {\n          field.formControl.updateValueAndValidity({ emitEvent: false });\n        }\n      }\n    }\n  }\n\n  private checkFieldVisibilityChange(form: FormGroup | FormArray, field: FormlyFieldConfig, model: any, options: FormlyFormOptions) {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [model, options.formState],\n    );\n\n    if (hideExpressionResult !== field.hide) {\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n\n      if (field.formControl && field.key) {\n        const parent = this.fieldParentFormControl(form, field);\n        if (parent) {\n          const control = parent.get(`${this.fieldKey(field)}`);\n          if (hideExpressionResult === true && control) {\n            this.removeFieldControl(parent, field);\n          } else if (hideExpressionResult === false && !control) {\n            this.addFieldControl(parent, field, model);\n          }\n        }\n      }\n\n      if (options.fieldChanges) {\n        options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hideExpressionResult });\n      }\n    }\n  }\n\n  private addFieldControl(parent: FormArray | FormGroup, field: FormlyFieldConfig, model: any) {\n    const fieldModel = this.getFieldModel(model, field);\n\n    if (\n      !(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))\n      && field.formControl.value !== fieldModel\n    ) {\n      field.formControl.patchValue(fieldModel, { emitEvent: false });\n    }\n\n    if (parent instanceof FormArray) {\n      parent.push(field.formControl);\n    } else if (parent instanceof FormGroup) {\n      parent.addControl(`${this.fieldKey(field)}`, field.formControl);\n    }\n  }\n\n  private getFieldModel(model: any, field: FormlyFieldConfig) {\n    if (field.fieldGroup || field.fieldArray) {\n      return model;\n    }\n\n    return getFieldModel(model, field, false);\n  }\n\n  private getParentModel(model: any, field: FormlyFieldConfig) {\n    if (field.key && (field.fieldGroup || field.fieldArray)) {\n      return getFieldModel(model, field, true);\n    }\n    return model;\n  }\n\n  private removeFieldControl(parent: FormArray | FormGroup, field: FormlyFieldConfig) {\n    if (parent instanceof FormArray) {\n      parent.removeAt(this.fieldKey(field) as number);\n    } else if (parent instanceof FormGroup) {\n      parent.removeControl(`${this.fieldKey(field)}`);\n    }\n  }\n\n  private fieldParentFormControl(form: FormGroup | FormArray, field: FormlyFieldConfig): FormArray | FormGroup {\n    const paths = getKeyPath(field);\n    paths.pop(); // remove last path\n\n    return (paths.length > 0 ? form.get(paths) : form) as any;\n  }\n\n  private fieldKey(field: FormlyFieldConfig) {\n    return getKeyPath(field).pop();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup, FormArray, FormControl, AbstractControl, Validators, AbstractControlOptions } from '@angular/forms';\nimport { FormlyConfig, FieldValidatorFn, TemplateManipulators } from './formly.config';\nimport { FORMLY_VALIDATORS, evalStringExpression, evalExpressionValueSetter, getFieldId, isObject, isNullOrUndefined, clone, assignModelToFields } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\nimport { getKeyPath, isFunction } from '../utils';\nimport { FormlyFormExpression } from './formly.form.expression';\n\n@Injectable()\nexport class FormlyFormBuilder {\n  private formId = 0;\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private formlyFormExpression: FormlyFormExpression,\n  ) {}\n\n  buildForm(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    let fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    if (!Array.isArray(fieldTransforms)) {\n      fieldTransforms = [fieldTransforms];\n    }\n\n    fieldTransforms.forEach(fieldTransform => {\n      if (fieldTransform) {\n        fields = fieldTransform(fields, model, form, options);\n        if (!fields) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n\n    assignModelToFields(fields, model);\n    this._buildForm(form, fields, options);\n    this.formlyFormExpression.checkFields(form, fields, model, options);\n  }\n\n  private _buildForm(form: FormGroup | FormArray, fields: FormlyFieldConfig[] = [], options: FormlyFormOptions) {\n    this.formId++;\n    this.registerFormControls(form, fields, options);\n  }\n\n  private registerFormControls(form: FormGroup | FormArray, fields: FormlyFieldConfig[], options: FormlyFormOptions) {\n    fields.forEach((field, index) => {\n      field.id = getFieldId(`formly_${this.formId}`, field, index);\n      this.initFieldOptions(field);\n      this.initFieldExpression(field, options);\n      this.initFieldValidation(field);\n      this.initFieldWrappers(field);\n      this.initFieldAsyncValidation(field);\n\n      if (field.key && field.type) {\n        const paths = getKeyPath({ key: field.key });\n        let rootForm = form, rootModel = field.model;\n        paths.forEach((path, index) => {\n          // FormGroup/FormArray only allow string value for path\n          const formPath = path.toString();\n          // is last item\n          if (index === paths.length - 1) {\n            this.addFormControl(rootForm, field, rootModel, formPath);\n            if (field.fieldArray) {\n              field.fieldGroup = [];\n              field.model.forEach((m: any, i: number) => field.fieldGroup.push(\n                { ...clone(field.fieldArray), key: `${i}` },\n              ));\n              assignModelToFields(field.fieldGroup, rootModel);\n            }\n\n          } else {\n            let nestedForm = rootForm.get(formPath) as FormGroup;\n            if (!nestedForm) {\n              nestedForm = new FormGroup({});\n              this.addControl(rootForm, formPath, nestedForm);\n            }\n            if (!rootModel[path]) {\n              rootModel[path] = typeof path === 'string' ? {} : [];\n            }\n\n            rootForm = nestedForm;\n            rootModel = rootModel[path];\n          }\n        });\n      }\n\n      if (field.fieldGroup) {\n        if (!field.type) {\n          field.type = 'formly-group';\n        }\n\n        // if `hideExpression` is set in that case we have to deal\n        // with toggle FormControl for each field in fieldGroup separately\n        if (field.hideExpression) {\n          field.fieldGroup.forEach(f => {\n            let hideExpression: any = f.hideExpression || (() => false);\n            if (typeof hideExpression === 'string') {\n              hideExpression = evalStringExpression(hideExpression, ['model', 'formState']);\n            }\n\n            f.hideExpression = (model, formState) => field.hide || hideExpression(model, formState);\n          });\n        }\n\n        if (field.key) {\n          this.addFormControl(form, field, { [field.key]: field.fieldArray ? [] : {} }, field.key);\n          this._buildForm(field.formControl as FormGroup, field.fieldGroup, options);\n        } else {\n          this._buildForm(form, field.fieldGroup, options);\n        }\n      }\n    });\n  }\n\n  private initFieldExpression(field: FormlyFieldConfig, options: FormlyFormOptions) {\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties as any) {\n        if (typeof field.expressionProperties[key] === 'string' || isFunction(field.expressionProperties[key])) {\n          // cache built expression\n          field.expressionProperties[key] = {\n            expression: isFunction(field.expressionProperties[key]) ? field.expressionProperties[key] : evalStringExpression(field.expressionProperties[key], ['model', 'formState']),\n            expressionValueSetter: evalExpressionValueSetter(\n              `field.${key}`,\n              ['expressionValue', 'model', 'field'],\n            ),\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n      if (typeof field.hideExpression === 'string') {\n        // cache built expression\n        field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);\n      }\n    }\n  }\n\n  private initFieldOptions(field: FormlyFieldConfig) {\n    field.templateOptions = field.templateOptions || {};\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n      if (field.key) {\n        field.templateOptions = Object.assign({\n          label: '',\n          placeholder: '',\n          focus: false,\n        }, field.templateOptions);\n      }\n    }\n  }\n\n  private initFieldAsyncValidation(field: FormlyFieldConfig) {\n    const validators: any = [];\n    if (field.asyncValidators) {\n      for (const validatorName in field.asyncValidators) {\n        if (validatorName !== 'validation') {\n          let validator = field.asyncValidators[validatorName];\n          if (isObject(validator)) {\n            validator = validator.expression;\n          }\n\n          validators.push((control: FormControl) => new Promise((resolve) => {\n            return validator(control, field).then((result: boolean) => {\n              resolve(result ? null : { [validatorName]: true });\n            });\n          }));\n        }\n      }\n    }\n\n    if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {\n      field.asyncValidators.validation\n        .forEach((validator: any) => validators.push(this.wrapNgValidatorFn(field, validator)));\n    }\n\n    if (validators.length) {\n      if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {\n        field.asyncValidators.validation = Validators.composeAsync([field.asyncValidators.validation, ...validators]);\n      } else {\n        field.asyncValidators = {\n          validation: Validators.composeAsync(validators),\n        };\n      }\n    }\n  }\n\n  private initFieldValidation(field: FormlyFieldConfig) {\n    const validators: any = [];\n    FORMLY_VALIDATORS\n      .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt))\n        || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]),\n      )\n      .forEach((opt) => {\n        validators.push((control: FormControl) => {\n          if (field.templateOptions[opt] === false) {\n            return null;\n          }\n\n          return this.getValidation(opt, field.templateOptions[opt])(control);\n        });\n      });\n\n    if (field.validators) {\n      for (const validatorName in field.validators) {\n        if (validatorName !== 'validation') {\n          let validator = field.validators[validatorName];\n          if (isObject(validator)) {\n            validator = validator.expression;\n          }\n\n          validators.push((control: FormControl) => validator(control, field) ? null : { [validatorName]: true });\n        }\n      }\n    }\n\n    if (field.validators && Array.isArray(field.validators.validation)) {\n      field.validators.validation\n        .forEach((validator: any) => validators.push(this.wrapNgValidatorFn(field, validator)));\n    }\n\n    if (validators.length) {\n      if (field.validators && !Array.isArray(field.validators.validation)) {\n        field.validators.validation = Validators.compose([field.validators.validation, ...validators]);\n      } else {\n        field.validators = {\n          validation: Validators.compose(validators),\n        };\n      }\n    }\n  }\n\n  private addFormControl(form: FormGroup | FormArray, field: FormlyFieldConfig, model: any, path: string) {\n    let control: AbstractControl;\n    const validators = field.validators ? field.validators.validation : undefined,\n      asyncValidators = field.asyncValidators ? field.asyncValidators.validation : undefined,\n      updateOn = field.modelOptions && field.modelOptions.updateOn ?\n        field.modelOptions.updateOn : undefined;\n    const abstractControlOptions = {\n      validators,\n      asyncValidators,\n      updateOn,\n    } as AbstractControlOptions;\n\n    if (field.formControl instanceof AbstractControl || form.get(path)) {\n      control = field.formControl || form.get(path);\n      if (\n        !(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))\n        && control.value !== model[path]\n        && control instanceof FormControl\n      ) {\n        control.patchValue(model[path]);\n      }\n    } else if (field.component && field.component.createControl) {\n      control = field.component.createControl(model[path], field);\n    } else if (field.fieldGroup && field.key && field.key === path && !field.fieldArray) {\n      control = new FormGroup(model[path], abstractControlOptions);\n    } else if (field.fieldArray && field.key && field.key === path) {\n      control = new FormArray([], abstractControlOptions);\n    } else {\n      control = new FormControl(model[path], abstractControlOptions);\n    }\n\n    if (field.templateOptions.disabled) {\n      control.disable();\n    }\n\n    // Replace decorated property with a getter that returns the observable.\n    // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85\n    if (delete field.templateOptions.disabled) {\n      Object.defineProperty(field.templateOptions, 'disabled', {\n        get: (function () { return !this.formControl.enabled; }).bind(field),\n        set: (function (value: boolean) {\n          if (this.expressionProperties && this.expressionProperties.hasOwnProperty('templateOptions.disabled')) {\n            this.expressionProperties['templateOptions.disabled'].expressionValue = value;\n          }\n\n          value ? this.formControl.disable() : this.formControl.enable();\n        }).bind(field),\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    this.addControl(form, path, control, field);\n  }\n\n  private addControl(form: FormGroup | FormArray, key: string | number, formControl: AbstractControl, field?: FormlyFieldConfig) {\n    if (field) {\n      field.formControl = formControl;\n    }\n\n    if (form instanceof FormArray) {\n      if (form.at(<number> key) !== formControl) {\n        form.setControl(<number>key, formControl);\n      }\n    } else {\n      if (form.get(<string> key) !== formControl) {\n        form.setControl(<string>key, formControl);\n      }\n    }\n  }\n\n  private getValidation(opt: string, value: any) {\n    switch (opt) {\n      case 'required':\n        return Validators.required;\n      case 'pattern':\n        return Validators.pattern(value);\n      case 'minLength':\n        return Validators.minLength(value);\n      case 'maxLength':\n        return Validators.maxLength(value);\n      case 'min':\n        return Validators.min(value);\n      case 'max':\n        return Validators.max(value);\n    }\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfig, validator: string | FieldValidatorFn) {\n    validator = typeof validator === 'string'\n    ? this.formlyConfig.getValidator(validator).validation\n    : validator;\n\n    return (control: AbstractControl) => (validator as FieldValidatorFn)(control, field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    const templateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n    };\n\n    if (field.templateOptions) {\n      this.mergeTemplateManipulators(templateManipulators, field.templateOptions.templateManipulators);\n    }\n\n    this.mergeTemplateManipulators(templateManipulators, this.formlyConfig.templateManipulators);\n\n    const preWrappers = templateManipulators.preWrapper.map(m => m(field)).filter(type => type),\n      postWrappers = templateManipulators.postWrapper.map(m => m(field)).filter(type => type);\n\n    if (!field.wrappers) {\n      field.wrappers = [];\n    }\n\n    field.wrappers = [...preWrappers, ...(field.wrappers || []), ...postWrappers];\n  }\n\n  private mergeTemplateManipulators(source: TemplateManipulators, target: TemplateManipulators) {\n    target = target || {};\n    if (target.preWrapper) {\n      source.preWrapper = source.preWrapper.concat(target.preWrapper);\n    }\n    if (target.postWrapper) {\n      source.postWrapper = source.postWrapper.concat(target.postWrapper);\n    }\n\n    return source;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, SkipSelf, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray, NgForm, FormGroupDirective, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyValueChangeEvent } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFormExpression } from '../services/formly.form.expression';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, reverseDeepMerge, getFieldModel, clone, assignModelToFields } from '../utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      [model]=\"field.model\" [form]=\"form\"\n      [field]=\"field\"\n      [ngClass]=\"field.className\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  `,\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() model: any = {};\n  @Input() form: FormGroup | FormArray = new FormGroup({});\n  @Input() fields: FormlyFieldConfig[] = [];\n  @Input() options: FormlyFormOptions;\n  @Output() modelChange = new EventEmitter<any>();\n\n  /** @internal */\n  @Input() isRoot = true;\n\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyExpression: FormlyFormExpression,\n    private formlyConfig: FormlyConfig,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    @Optional() @SkipSelf() private parentFormlyForm: FormlyForm,\n  ) {}\n\n  ngDoCheck() {\n    this.checkExpressionChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.fields || this.fields.length === 0 || !this.isRoot) {\n      return;\n    }\n\n    if (changes.fields || changes.form) {\n      this.model = this.model || {};\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.updateInitialValue();\n    } else if (changes.model) {\n      this.patchModel(this.model);\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key, event.value);\n    this.modelChange.emit(this.model);\n    this.checkExpressionChange();\n  }\n\n  setOptions() {\n    this.options = this.options || {};\n\n    this.options.formState = this.options.formState || {};\n    if (!this.options.showError) {\n      this.options.showError = this.formlyConfig.extras.showError;\n    }\n    if (!this.options.fieldChanges) {\n      this.options.fieldChanges = new Subject<FormlyValueChangeEvent>();\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = this.resetModel.bind(this);\n    }\n\n    if (!this.options.parentForm) {\n      this.options.parentForm = this.parentFormGroup || this.parentForm;\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = this.updateInitialValue.bind(this);\n    }\n\n    if (!(<any> this.options).resetTrackModelChanges) {\n      (<any> this.options).resetTrackModelChanges = () => {\n        this.clearModelSubscriptions();\n        this.trackModelChanges(this.fields);\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.isRoot) {\n      this.formlyExpression.checkFields(this.form, this.fields, this.model, this.options);\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && field.type && !field.fieldGroup && !field.fieldArray) {\n        const valueChanges = field.formControl.valueChanges.pipe(\n          field.modelOptions && field.modelOptions.debounce && field.modelOptions.debounce.default\n          ? debounceTime(field.modelOptions.debounce.default)\n          : tap(() => {}),\n          map(value => {\n            if (field.parsers && field.parsers.length > 0) {\n              field.parsers.forEach(parserFn => value = parserFn(value));\n            }\n\n            return value;\n          }),\n          tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })),\n        );\n\n        this.modelChangeSubs.push(valueChanges.subscribe());\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n\n  private patchModel(model: any) {\n    assignModelToFields(this.fields, model);\n    this.clearModelSubscriptions();\n    this.resetFieldArray(this.fields, model);\n    this.initializeFormValue(this.form);\n    (<FormGroup> this.form).patchValue(model, { onlySelf: true });\n    this.trackModelChanges(this.fields);\n  }\n\n  private resetModel(model?: any) {\n    model = isNullOrUndefined(model) ? this.initialModel : model;\n    this.resetFieldArray(this.fields, model);\n\n    // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n    // but only when the current component is a root one.\n    if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {\n      this.options.parentForm.resetForm(model);\n    } else {\n      this.form.reset(model);\n    }\n\n    (<any> this.options).resetTrackModelChanges();\n  }\n\n  private resetFieldArray(fields: FormlyFieldConfig[], newModel: any) {\n    fields.forEach(field => {\n      if ((field.fieldGroup && field.fieldGroup.length > 0) || field.fieldArray) {\n        const newFieldModel = getFieldModel(newModel, field, true);\n        if (field.fieldArray) {\n          field.fieldGroup = field.fieldGroup || [];\n          field.fieldGroup.length = 0;\n\n          if (field.model !== newFieldModel && field.model) {\n            field.model.length = 0;\n          }\n\n          const formControl = <FormArray>field.formControl;\n          while (formControl.length !== 0) {\n            formControl.removeAt(0);\n          }\n\n          newFieldModel.forEach((m: any, i: number) => {\n            field.model[i] = m;\n            field.fieldGroup.push({ ...clone(field.fieldArray), key: `${i}` });\n            this.formlyBuilder.buildForm(formControl, [field.fieldGroup[i]], newFieldModel, this.options);\n          });\n        } else {\n          this.resetFieldArray(field.fieldGroup, newFieldModel);\n        }\n      } else if (field.key && field.type) {\n        field.formControl.reset(getFieldModel(newModel, field, false));\n      }\n    });\n  }\n\n  private initializeFormValue(control: AbstractControl) {\n    if (control instanceof FormControl) {\n      control.setValue(null);\n    } else if (control instanceof FormGroup) {\n      Object.keys(control.controls).forEach(k => this.initializeFormValue(control.controls[k]));\n    } else if (control instanceof FormArray) {\n      control.controls.forEach(c => this.initializeFormValue(c));\n    }\n  }\n\n  private updateInitialValue() {\n    this.initialModel = reverseDeepMerge({}, this.model);\n  }\n}\n","import {\n  Component, OnInit, OnChanges, EventEmitter, Input, Output, OnDestroy,\n  ViewContainerRef, ViewChild, ComponentRef, ComponentFactoryResolver, SimpleChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { Field } from '../templates/field';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyLifeCycleFn, FormlyLifeCycleOptions } from './formly.field.config';\n\n@Component({\n  selector: 'formly-field',\n  template: `\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"field.template && !field.fieldGroup\" [innerHtml]=\"field.template\"></div>\n  `,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() model: any;\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions = {};\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n\n  private componentRefs: ComponentRef<Field>[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n  ) {}\n\n  ngAfterContentInit() {\n    this.lifeCycleHooks(this.lifecycle.afterContentInit);\n  }\n\n  ngAfterContentChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterContentChecked);\n  }\n\n  ngAfterViewInit() {\n    this.lifeCycleHooks(this.lifecycle.afterViewInit);\n  }\n\n  ngAfterViewChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterViewChecked);\n  }\n\n  ngDoCheck() {\n    this.lifeCycleHooks(this.lifecycle.doCheck);\n  }\n\n  ngOnInit() {\n    if (!this.field.template) {\n      this.createFieldComponent();\n    }\n    this.lifeCycleHooks(this.lifecycle.onInit);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.lifeCycleHooks(this.lifecycle.onChanges);\n    this.componentRefs.forEach(ref => {\n      Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.lifeCycleHooks(this.lifecycle.onDestroy);\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n  }\n\n  private createFieldComponent(): ComponentRef<Field> {\n    const type = this.formlyConfig.getType(this.field.type);\n\n    let fieldComponent = this.fieldComponent;\n    (this.field.wrappers || []).forEach(wrapperName => {\n      const wrapperRef = this.createComponent(fieldComponent, this.formlyConfig.getWrapper(wrapperName).component);\n      fieldComponent = wrapperRef.instance.fieldComponent;\n    });\n\n    return this.createComponent(fieldComponent, type.component);\n  }\n\n  private createComponent(fieldComponent: ViewContainerRef, component: any): ComponentRef<any> {\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    let ref = <ComponentRef<Field>>fieldComponent.createComponent(componentFactory);\n\n    Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n    });\n\n    this.componentRefs.push(ref);\n\n    return ref;\n  }\n\n  private get lifecycle(): FormlyLifeCycleOptions {\n    return this.field.lifecycle || {};\n  }\n\n  private lifeCycleHooks(callback: FormlyLifeCycleFn) {\n    if (callback) {\n      callback(this.form, this.field, this.model, this.options);\n    }\n  }\n}\n","import { Directive, HostListener, ElementRef, Input, OnChanges, SimpleChanges, SimpleChange, Renderer2 } from '@angular/core';\nimport { FormlyFieldConfig } from './formly.field.config';\n\n@Directive({\n  selector: '[formlyAttributes]',\n})\nexport class FormlyAttributes implements OnChanges {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  private attributes = ['id', 'name', 'placeholder', 'tabindex', 'step', 'readonly'];\n  private statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\n  @HostListener('focus') onFocus() {\n    this.field.focus = true;\n  }\n\n  @HostListener('blur') onBlur() {\n    this.field.focus = false;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      const fieldChanges = changes.field;\n      this.attributes\n        .filter(attr => this.canApplyRender(fieldChanges, attr))\n        .forEach(attr => this.renderer.setAttribute(\n          this.elementRef.nativeElement, attr, this.getPropValue(this.field, attr),\n        ));\n\n      if (this.field.templateOptions && this.field.templateOptions.attributes) {\n        const attributes = this.field.templateOptions.attributes;\n        Object.keys(attributes).forEach(name => this.renderer.setAttribute(\n          this.elementRef.nativeElement, name, attributes[name] as string,\n        ));\n      }\n\n      this.statements\n        .filter(statement => this.canApplyRender(fieldChanges, statement))\n        .forEach(statement => this.renderer.listen(\n          this.elementRef.nativeElement, statement, this.getStatementValue(statement),\n        ));\n\n      if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {\n        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();\n      }\n    }\n  }\n\n  private getPropValue(field: FormlyFieldConfig, prop: string) {\n    field = field || {};\n    if (field.templateOptions && field.templateOptions[prop]) {\n      return field.templateOptions[prop];\n    }\n\n    return (<any>field)[prop] || '';\n  }\n\n  private getStatementValue(statement: string) {\n    const fn = this.field.templateOptions[statement];\n\n    return (event: any) => fn(this.field, event);\n  }\n\n  private canApplyRender(fieldChange: SimpleChange, prop: string): Boolean {\n    const currentValue = this.getPropValue(this.field, prop),\n      previousValue = this.getPropValue(fieldChange.previousValue, prop);\n\n    if (previousValue !== currentValue) {\n      if (this.statements.indexOf(prop) !== -1) {\n        return typeof currentValue === 'function';\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { FormlyTemplateOptions, FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport abstract class Field {\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() model: any;\n  @Input() options: FormlyFormOptions;\n\n  get key() { return this.field.key; }\n\n  get formControl(): AbstractControl { return this.field.formControl; }\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n","import { Field } from './field';\nimport { OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, AfterViewChecked, SimpleChanges } from '@angular/core';\n\nexport abstract class FieldType extends Field implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  ngOnInit() {}\n  ngOnChanges(changes: SimpleChanges) {}\n  ngDoCheck() {}\n  ngAfterContentInit() {}\n  ngAfterContentChecked() {}\n  ngAfterViewInit() {}\n  ngAfterViewChecked() {}\n  ngOnDestroy() {}\n}\n","import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\n\nexport abstract class FieldArrayType extends FieldType {\n  formControl: FormArray;\n\n constructor(private builder: FormlyFormBuilder) {\n    super();\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n    this.field.fieldGroup.splice(i, 0, { ...clone(this.field.fieldArray) });\n\n    this.field.fieldGroup.forEach((field, index) => {\n      field.key = `${index}`;\n    });\n\n    const form = new FormArray([]);\n    this.builder.buildForm(form, [this.field.fieldGroup[i]], this.model, this.options);\n    this.formControl.insert(i, form.at(0));\n\n    (<any> this.options).resetTrackModelChanges();\n  }\n\n  remove(i: number) {\n    this.formControl.removeAt(i);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, index) => f.key = `${index}`);\n    this.model.splice(i, 1);\n    (<any> this.options).resetTrackModelChanges();\n  }\n}\n","import { ViewContainerRef } from '@angular/core';\nimport { Field } from './field';\n\nexport abstract class FieldWrapper extends Field {\n  fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"model\"\n      [form]=\"field.formControl || form\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  `,\n})\nexport class FormlyGroup extends FieldType {}\n","import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n  @Input() set fieldForm(control: FormControl) {\n    console.warn(`formly-validation-message: Passing 'fieldForm' input is deprecated and it will be removed in the 4.0 version.`);\n  }\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG_TOKEN } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyFormExpression } from './services/formly.form.expression';\nimport { FormlyGroup } from './components/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\n\n@NgModule({\n  declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  entryComponents: [FormlyGroup],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        FormlyFormBuilder,\n        FormlyFormExpression,\n        FormlyConfig,\n        { provide: FORMLY_CONFIG_TOKEN, useValue: { types: [{ name: 'formly-group', component: FormlyGroup }] }, multi: true },\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n}\n"]}