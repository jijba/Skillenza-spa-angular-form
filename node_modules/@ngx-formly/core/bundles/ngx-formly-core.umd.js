(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@angular/forms'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/core', ['exports', 'rxjs', '@angular/core', '@angular/forms', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].core = {}),global.rxjs,global.ng.core,global.ng.forms,global.rxjs.operators,global.ng.common));
}(this, (function (exports,rxjs,core,forms,operators,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} formId
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    function getFieldId(formId, field, index) {
        if (field.id)
            return field.id;
        var /** @type {?} */ type = field.type;
        if (!type && field.template)
            type = 'template';
        return [formId, type, field.key, index].join('_');
    }
    /**
     * @param {?} field
     * @return {?}
     */
    function getKeyPath(field) {
        /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
        if (!((field))['_formlyKeyPath'] || ((field))['_formlyKeyPath'].key !== field.key) {
            var /** @type {?} */ keyPath = [];
            if (field.key) {
                /* Also allow for an array key, hence the type check  */
                var /** @type {?} */ pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;
                try {
                    for (var pathElements_1 = __values(pathElements), pathElements_1_1 = pathElements_1.next(); !pathElements_1_1.done; pathElements_1_1 = pathElements_1.next()) {
                        var pathElement = pathElements_1_1.value;
                        if (typeof pathElement === 'string') {
                            /* replace paths of the form names[2] by names.2, cfr. angular formly */
                            pathElement = pathElement.replace(/\[(\w+)\]/g, '.$1');
                            keyPath = keyPath.concat(pathElement.split('.'));
                        }
                        else {
                            keyPath.push(pathElement);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (pathElements_1_1 && !pathElements_1_1.done && (_a = pathElements_1.return))
                            _a.call(pathElements_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                for (var /** @type {?} */ i = 0; i < keyPath.length; i++) {
                    var /** @type {?} */ pathElement = keyPath[i];
                    if (typeof pathElement === 'string' && stringIsInteger(pathElement)) {
                        keyPath[i] = parseInt(pathElement);
                    }
                }
            }
            ((field))['_formlyKeyPath'] = {
                key: field.key,
                path: keyPath,
            };
        }
        return ((field))['_formlyKeyPath'].path.slice(0);
        var e_1, _a;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function stringIsInteger(str) {
        return !isNullOrUndefined(str) && /^\d+$/.test(str);
    }
    var /** @type {?} */ FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
    /**
     * @param {?} model
     * @param {?} field
     * @param {?} constructEmptyObjects
     * @return {?}
     */
    function getFieldModel(model, field, constructEmptyObjects) {
        var /** @type {?} */ keyPath = getKeyPath(field);
        var /** @type {?} */ value = model;
        for (var /** @type {?} */ i = 0; i < keyPath.length; i++) {
            var /** @type {?} */ path = keyPath[i];
            var /** @type {?} */ pathValue = value[path];
            if (isNullOrUndefined(pathValue) && constructEmptyObjects) {
                if (i < keyPath.length - 1) {
                    /* TODO? : It would be much nicer if we could construct object instances of the correct class, for instance by using factories. */
                    value[path] = typeof keyPath[i + 1] === 'number' ? [] : {};
                }
                else if (field.fieldGroup && !field.fieldArray) {
                    value[path] = {};
                }
                else if (field.fieldArray) {
                    value[path] = [];
                }
            }
            value = value[path];
            if (!value) {
                break;
            }
        }
        return value;
    }
    /**
     * @param {?} fields
     * @param {?} model
     * @return {?}
     */
    function assignModelToFields(fields, model) {
        fields.forEach(function (field, index) {
            if (!isUndefined(field.defaultValue) && isUndefined(getValueForKey(model, field.key))) {
                assignModelValue(model, field.key, field.defaultValue);
            }
            ((field)).model = model;
            if (field.key && (field.fieldGroup || field.fieldArray)) {
                ((field)).model = getFieldModel(model, field, true);
            }
            if (field.fieldGroup) {
                assignModelToFields(field.fieldGroup, field.model);
            }
        });
    }
    /**
     * @param {?} model
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    function assignModelValue(model, path, value) {
        if (typeof path === 'string') {
            path = getKeyPath({ key: path });
        }
        if (path.length > 1) {
            var /** @type {?} */ e = path.shift();
            if (!model[e] || !isObject(model[e])) {
                model[e] = typeof path[0] === 'string' ? {} : [];
            }
            assignModelValue(model[e], path, value);
        }
        else {
            model[path[0]] = value;
        }
    }
    /**
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    function getValueForKey(model, path) {
        if (typeof path === 'string') {
            path = getKeyPath({ key: path });
        }
        if (path.length > 1) {
            var /** @type {?} */ e = path.shift();
            if (!model[e]) {
                model[e] = typeof path[0] === 'string' ? {} : [];
            }
            return getValueForKey(model[e], path);
        }
        else {
            return model[path[0]];
        }
    }
    /**
     * @param {?} dest
     * @param {...?} args
     * @return {?}
     */
    function reverseDeepMerge(dest) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        args.forEach(function (src) {
            for (var /** @type {?} */ srcArg in src) {
                if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {
                    if (isFunction(src[srcArg])) {
                        dest[srcArg] = src[srcArg];
                    }
                    else {
                        dest[srcArg] = clone(src[srcArg]);
                    }
                }
                else if (objAndSameType(dest[srcArg], src[srcArg])) {
                    reverseDeepMerge(dest[srcArg], src[srcArg]);
                }
            }
        });
        return dest;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNullOrUndefined(value) {
        return value === undefined || value === null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isUndefined(value) {
        return value === undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isBlankString(value) {
        return value === '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof (value) === 'function';
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function objAndSameType(obj1, obj2) {
        return isObject(obj1) && isObject(obj2) &&
            Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);
    }
    /**
     * @param {?} x
     * @return {?}
     */
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function clone(value) {
        if (!isObject(value) || value instanceof RegExp || value instanceof rxjs.Observable) {
            return value;
        }
        if (Object.prototype.toString.call(value) === '[object Date]') {
            return new Date(value.getTime());
        }
        if (Array.isArray(value)) {
            return value.slice(0).map(function (v) { return clone(v); });
        }
        value = Object.assign({}, value);
        Object.keys(value).forEach(function (k) { return value[k] = clone(value[k]); });
        return value;
    }
    /**
     * @param {?} expression
     * @param {?} argNames
     * @return {?}
     */
    function evalStringExpression(expression, argNames) {
        try {
            return Function.bind.apply(Function, [void 0].concat(argNames.concat("return " + expression + ";")))();
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * @param {?} expression
     * @param {?} argNames
     * @return {?}
     */
    function evalExpressionValueSetter(expression, argNames) {
        try {
            return Function.bind
                .apply(Function, [void 0].concat(argNames.concat(expression + " = expressionValue;")))();
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * @param {?} expression
     * @param {?} thisArg
     * @param {?} argVal
     * @return {?}
     */
    function evalExpression(expression, thisArg, argVal) {
        if (expression instanceof Function) {
            return expression.apply(thisArg, argVal);
        }
        else {
            return expression ? true : false;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ FORMLY_CONFIG_TOKEN = new core.InjectionToken('FORMLY_CONFIG_TOKEN');
    /**
     * Maintains list of formly field directive types. This can be used to register new field templates.
     */
    var FormlyConfig = (function () {
        function FormlyConfig(configs) {
            if (configs === void 0) {
                configs = [];
            }
            var _this = this;
            this.types = {};
            this.validators = {};
            this.wrappers = {};
            this.messages = {};
            this.templateManipulators = {
                preWrapper: [],
                postWrapper: [],
            };
            this.extras = {
                fieldTransform: undefined,
                showError: function (field) {
                    return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));
                },
            };
            configs.forEach(function (config) { return _this.addConfig(config); });
        }
        /**
         * @param {?} config
         * @return {?}
         */
        FormlyConfig.prototype.addConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                if (config.types) {
                    config.types.forEach(function (type) { return _this.setType(type); });
                }
                if (config.validators) {
                    config.validators.forEach(function (validator) { return _this.setValidator(validator); });
                }
                if (config.wrappers) {
                    config.wrappers.forEach(function (wrapper) { return _this.setWrapper(wrapper); });
                }
                if (config.manipulators) {
                    config.manipulators.forEach(function (manipulator) { return _this.setManipulator(manipulator); });
                }
                if (config.validationMessages) {
                    config.validationMessages.forEach(function (validation) { return _this.addValidatorMessage(validation.name, validation.message); });
                }
                if (config.extras) {
                    this.extras = __assign({}, this.extras, config.extras);
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyConfig.prototype.setType = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (Array.isArray(options)) {
                    options.forEach(function (option) { return _this.setType(option); });
                }
                else {
                    if (!this.types[options.name]) {
                        this.types[options.name] = /** @type {?} */ ({});
                    }
                    this.types[options.name].component = options.component;
                    this.types[options.name].name = options.name;
                    this.types[options.name].extends = options.extends;
                    this.types[options.name].defaultOptions = options.defaultOptions;
                    if (options.wrappers) {
                        options.wrappers.forEach(function (wrapper) { return _this.setTypeWrapper(options.name, wrapper); });
                    }
                }
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getType = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.types[name]) {
                    throw new Error("[Formly Error] There is no type by the name of \"" + name + "\"");
                }
                this.mergeExtendedType(name);
                return this.types[name];
            };
        /**
         * @param {?=} field
         * @return {?}
         */
        FormlyConfig.prototype.getMergedField = /**
         * @param {?=} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                if (field === void 0) {
                    field = {};
                }
                var /** @type {?} */ name = field.type;
                if (!this.types[name]) {
                    throw new Error("[Formly Error] There is no type by the name of \"" + name + "\"");
                }
                this.mergeExtendedType(name);
                if (this.types[name].defaultOptions) {
                    reverseDeepMerge(field, this.types[name].defaultOptions);
                }
                var /** @type {?} */ extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;
                if (extendDefaults) {
                    reverseDeepMerge(field, extendDefaults);
                }
                if (field && field.optionsTypes) {
                    field.optionsTypes.forEach(function (option) {
                        var /** @type {?} */ defaultOptions = _this.getType(option).defaultOptions;
                        if (defaultOptions) {
                            reverseDeepMerge(field, defaultOptions);
                        }
                    });
                }
                if (!field.component) {
                    field.component = this.types[name].component;
                }
                if (!field.wrappers) {
                    field.wrappers = this.types[name].wrappers;
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyConfig.prototype.setWrapper = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                this.wrappers[options.name] = options;
                if (options.types) {
                    options.types.forEach(function (type) {
                        _this.setTypeWrapper(type, options.name);
                    });
                }
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getWrapper = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.wrappers[name]) {
                    throw new Error("[Formly Error] There is no wrapper by the name of \"" + name + "\"");
                }
                return this.wrappers[name];
            };
        /**
         * @param {?} type
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.setTypeWrapper = /**
         * @param {?} type
         * @param {?} name
         * @return {?}
         */
            function (type, name) {
                if (!this.types[type]) {
                    this.types[type] = /** @type {?} */ ({});
                }
                if (!this.types[type].wrappers) {
                    this.types[type].wrappers = /** @type {?} */ ([]);
                }
                this.types[type].wrappers.push(name);
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyConfig.prototype.setValidator = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.validators[options.name] = options;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getValidator = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.validators[name]) {
                    throw new Error("[Formly Error] There is no validator by the name of \"" + name + "\"");
                }
                return this.validators[name];
            };
        /**
         * @param {?} name
         * @param {?} message
         * @return {?}
         */
        FormlyConfig.prototype.addValidatorMessage = /**
         * @param {?} name
         * @param {?} message
         * @return {?}
         */
            function (name, message) {
                this.messages[name] = message;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getValidatorMessage = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.messages[name];
            };
        /**
         * @param {?} manipulator
         * @return {?}
         */
        FormlyConfig.prototype.setManipulator = /**
         * @param {?} manipulator
         * @return {?}
         */
            function (manipulator) {
                new manipulator.class()[manipulator.method](this);
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.mergeExtendedType = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.types[name].extends) {
                    return;
                }
                var /** @type {?} */ extendedType = this.getType(this.types[name].extends);
                if (!this.types[name].component) {
                    this.types[name].component = extendedType.component;
                }
                if (!this.types[name].wrappers) {
                    this.types[name].wrappers = extendedType.wrappers;
                }
            };
        FormlyConfig.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        FormlyConfig.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: core.Inject, args: [FORMLY_CONFIG_TOKEN,] }] }
            ];
        };
        return FormlyConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * \@internal
     */
    var FormlyFormExpression = (function () {
        function FormlyFormExpression() {
        }
        /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
        FormlyFormExpression.prototype.checkFields = /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
            function (form, fields, model, options) {
                if (fields === void 0) {
                    fields = [];
                }
                this._checkFields(form, fields, model, options);
            };
        /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
        FormlyFormExpression.prototype._checkFields = /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
            function (form, fields, model, options) {
                var _this = this;
                if (fields === void 0) {
                    fields = [];
                }
                fields.forEach(function (field) {
                    _this.checkFieldExpressionChange(form, field, _this.getParentModel(model, field), options);
                    _this.checkFieldVisibilityChange(form, field, _this.getParentModel(model, field), options);
                    if (field.fieldGroup && field.fieldGroup.length > 0) {
                        _this._checkFields(field.formControl ? /** @type {?} */ (field.formControl) : form, field.fieldGroup, _this.getParentModel(model, field), options);
                    }
                });
            };
        /**
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} options
         * @return {?}
         */
        FormlyFormExpression.prototype.checkFieldExpressionChange = /**
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} options
         * @return {?}
         */
            function (form, field, model, options) {
                if (!field || !field.expressionProperties) {
                    return;
                }
                var /** @type {?} */ expressionProperties = field.expressionProperties;
                var /** @type {?} */ validators = FORMLY_VALIDATORS.map(function (v) { return "templateOptions." + v; });
                for (var /** @type {?} */ key in expressionProperties) {
                    var /** @type {?} */ expressionValue = evalExpression(expressionProperties[key].expression, { field: field }, [model, options.formState]);
                    if (expressionProperties[key].expressionValue !== expressionValue
                        && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))) {
                        expressionProperties[key].expressionValue = expressionValue;
                        evalExpression(expressionProperties[key].expressionValueSetter, { field: field }, [expressionValue, model, field]);
                        if (key.indexOf('model.') === 0) {
                            var /** @type {?} */ path = key.replace(/^model\./, ''), /** @type {?} */ control = field.key && key === path ? field.formControl : form.get(path);
                            if (control
                                && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                                && control.value !== expressionValue) {
                                control.patchValue(expressionValue);
                            }
                        }
                        if (validators.indexOf(key) !== -1 && field.formControl) {
                            field.formControl.updateValueAndValidity({ emitEvent: false });
                        }
                    }
                }
            };
        /**
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} options
         * @return {?}
         */
        FormlyFormExpression.prototype.checkFieldVisibilityChange = /**
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} options
         * @return {?}
         */
            function (form, field, model, options) {
                if (!field || isNullOrUndefined(field.hideExpression)) {
                    return;
                }
                var /** @type {?} */ hideExpressionResult = !!evalExpression(field.hideExpression, { field: field }, [model, options.formState]);
                if (hideExpressionResult !== field.hide) {
                    // toggle hide
                    field.hide = hideExpressionResult;
                    field.templateOptions.hidden = hideExpressionResult;
                    if (field.formControl && field.key) {
                        var /** @type {?} */ parent_1 = this.fieldParentFormControl(form, field);
                        if (parent_1) {
                            var /** @type {?} */ control = parent_1.get("" + this.fieldKey(field));
                            if (hideExpressionResult === true && control) {
                                this.removeFieldControl(parent_1, field);
                            }
                            else if (hideExpressionResult === false && !control) {
                                this.addFieldControl(parent_1, field, model);
                            }
                        }
                    }
                    if (options.fieldChanges) {
                        options.fieldChanges.next(/** @type {?} */ ({ field: field, type: 'hidden', value: hideExpressionResult }));
                    }
                }
            };
        /**
         * @param {?} parent
         * @param {?} field
         * @param {?} model
         * @return {?}
         */
        FormlyFormExpression.prototype.addFieldControl = /**
         * @param {?} parent
         * @param {?} field
         * @param {?} model
         * @return {?}
         */
            function (parent, field, model) {
                var /** @type {?} */ fieldModel = this.getFieldModel(model, field);
                if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
                    && field.formControl.value !== fieldModel) {
                    field.formControl.patchValue(fieldModel, { emitEvent: false });
                }
                if (parent instanceof forms.FormArray) {
                    parent.push(field.formControl);
                }
                else if (parent instanceof forms.FormGroup) {
                    parent.addControl("" + this.fieldKey(field), field.formControl);
                }
            };
        /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
        FormlyFormExpression.prototype.getFieldModel = /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
            function (model, field) {
                if (field.fieldGroup || field.fieldArray) {
                    return model;
                }
                return getFieldModel(model, field, false);
            };
        /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
        FormlyFormExpression.prototype.getParentModel = /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
            function (model, field) {
                if (field.key && (field.fieldGroup || field.fieldArray)) {
                    return getFieldModel(model, field, true);
                }
                return model;
            };
        /**
         * @param {?} parent
         * @param {?} field
         * @return {?}
         */
        FormlyFormExpression.prototype.removeFieldControl = /**
         * @param {?} parent
         * @param {?} field
         * @return {?}
         */
            function (parent, field) {
                if (parent instanceof forms.FormArray) {
                    parent.removeAt(/** @type {?} */ (this.fieldKey(field)));
                }
                else if (parent instanceof forms.FormGroup) {
                    parent.removeControl("" + this.fieldKey(field));
                }
            };
        /**
         * @param {?} form
         * @param {?} field
         * @return {?}
         */
        FormlyFormExpression.prototype.fieldParentFormControl = /**
         * @param {?} form
         * @param {?} field
         * @return {?}
         */
            function (form, field) {
                var /** @type {?} */ paths = getKeyPath(field);
                paths.pop(); // remove last path
                return /** @type {?} */ ((paths.length > 0 ? form.get(paths) : form));
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FormlyFormExpression.prototype.fieldKey = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                return getKeyPath(field).pop();
            };
        FormlyFormExpression.decorators = [
            { type: core.Injectable },
        ];
        return FormlyFormExpression;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyFormBuilder = (function () {
        function FormlyFormBuilder(formlyConfig, formlyFormExpression) {
            this.formlyConfig = formlyConfig;
            this.formlyFormExpression = formlyFormExpression;
            this.formId = 0;
        }
        /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
        FormlyFormBuilder.prototype.buildForm = /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
            function (form, fields, model, options) {
                if (fields === void 0) {
                    fields = [];
                }
                var /** @type {?} */ fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
                if (!Array.isArray(fieldTransforms)) {
                    fieldTransforms = [fieldTransforms];
                }
                fieldTransforms.forEach(function (fieldTransform) {
                    if (fieldTransform) {
                        fields = fieldTransform(fields, model, form, options);
                        if (!fields) {
                            throw new Error('fieldTransform must return an array of fields');
                        }
                    }
                });
                assignModelToFields(fields, model);
                this._buildForm(form, fields, options);
                this.formlyFormExpression.checkFields(form, fields, model, options);
            };
        /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} options
         * @return {?}
         */
        FormlyFormBuilder.prototype._buildForm = /**
         * @param {?} form
         * @param {?=} fields
         * @param {?=} options
         * @return {?}
         */
            function (form, fields, options) {
                if (fields === void 0) {
                    fields = [];
                }
                this.formId++;
                this.registerFormControls(form, fields, options);
            };
        /**
         * @param {?} form
         * @param {?} fields
         * @param {?} options
         * @return {?}
         */
        FormlyFormBuilder.prototype.registerFormControls = /**
         * @param {?} form
         * @param {?} fields
         * @param {?} options
         * @return {?}
         */
            function (form, fields, options) {
                var _this = this;
                fields.forEach(function (field, index) {
                    field.id = getFieldId("formly_" + _this.formId, field, index);
                    _this.initFieldOptions(field);
                    _this.initFieldExpression(field, options);
                    _this.initFieldValidation(field);
                    _this.initFieldWrappers(field);
                    _this.initFieldAsyncValidation(field);
                    if (field.key && field.type) {
                        var /** @type {?} */ paths_1 = getKeyPath({ key: field.key });
                        var /** @type {?} */ rootForm_1 = form, /** @type {?} */ rootModel_1 = field.model;
                        paths_1.forEach(function (path, index) {
                            // FormGroup/FormArray only allow string value for path
                            var /** @type {?} */ formPath = path.toString();
                            // is last item
                            if (index === paths_1.length - 1) {
                                _this.addFormControl(rootForm_1, field, rootModel_1, formPath);
                                if (field.fieldArray) {
                                    field.fieldGroup = [];
                                    field.model.forEach(function (m, i) { return field.fieldGroup.push(__assign({}, clone(field.fieldArray), { key: "" + i })); });
                                    assignModelToFields(field.fieldGroup, rootModel_1);
                                }
                            }
                            else {
                                var /** @type {?} */ nestedForm = (rootForm_1.get(formPath));
                                if (!nestedForm) {
                                    nestedForm = new forms.FormGroup({});
                                    _this.addControl(rootForm_1, formPath, nestedForm);
                                }
                                if (!rootModel_1[path]) {
                                    rootModel_1[path] = typeof path === 'string' ? {} : [];
                                }
                                rootForm_1 = nestedForm;
                                rootModel_1 = rootModel_1[path];
                            }
                        });
                    }
                    if (field.fieldGroup) {
                        if (!field.type) {
                            field.type = 'formly-group';
                        }
                        // if `hideExpression` is set in that case we have to deal
                        // with toggle FormControl for each field in fieldGroup separately
                        if (field.hideExpression) {
                            field.fieldGroup.forEach(function (f) {
                                var /** @type {?} */ hideExpression = f.hideExpression || (function () { return false; });
                                if (typeof hideExpression === 'string') {
                                    hideExpression = evalStringExpression(hideExpression, ['model', 'formState']);
                                }
                                f.hideExpression = function (model, formState) { return field.hide || hideExpression(model, formState); };
                            });
                        }
                        if (field.key) {
                            _this.addFormControl(form, field, (_a = {}, _a[field.key] = field.fieldArray ? [] : {}, _a), field.key);
                            _this._buildForm(/** @type {?} */ (field.formControl), field.fieldGroup, options);
                        }
                        else {
                            _this._buildForm(form, field.fieldGroup, options);
                        }
                    }
                    var _a;
                });
            };
        /**
         * @param {?} field
         * @param {?} options
         * @return {?}
         */
        FormlyFormBuilder.prototype.initFieldExpression = /**
         * @param {?} field
         * @param {?} options
         * @return {?}
         */
            function (field, options) {
                if (field.expressionProperties) {
                    for (var /** @type {?} */ key in (field.expressionProperties)) {
                        if (typeof field.expressionProperties[key] === 'string' || isFunction(field.expressionProperties[key])) {
                            // cache built expression
                            field.expressionProperties[key] = {
                                expression: isFunction(field.expressionProperties[key]) ? field.expressionProperties[key] : evalStringExpression(field.expressionProperties[key], ['model', 'formState']),
                                expressionValueSetter: evalExpressionValueSetter("field." + key, ['expressionValue', 'model', 'field']),
                            };
                        }
                    }
                }
                if (field.hideExpression) {
                    // delete hide value in order to force re-evaluate it in FormlyFormExpression.
                    delete field.hide;
                    if (typeof field.hideExpression === 'string') {
                        // cache built expression
                        field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);
                    }
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FormlyFormBuilder.prototype.initFieldOptions = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                field.templateOptions = field.templateOptions || {};
                if (field.type) {
                    this.formlyConfig.getMergedField(field);
                    if (field.key) {
                        field.templateOptions = Object.assign({
                            label: '',
                            placeholder: '',
                            focus: false,
                        }, field.templateOptions);
                    }
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FormlyFormBuilder.prototype.initFieldAsyncValidation = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                var /** @type {?} */ validators = [];
                if (field.asyncValidators) {
                    var _loop_1 = function (validatorName) {
                        if (validatorName !== 'validation') {
                            var /** @type {?} */ validator_1 = field.asyncValidators[validatorName];
                            if (isObject(validator_1)) {
                                validator_1 = validator_1.expression;
                            }
                            validators.push(function (control) {
                                return new Promise(function (resolve) {
                                    return validator_1(control, field).then(function (result) {
                                        resolve(result ? null : (_a = {}, _a[validatorName] = true, _a));
                                        var _a;
                                    });
                                });
                            });
                        }
                    };
                    for (var /** @type {?} */ validatorName in field.asyncValidators) {
                        _loop_1(validatorName);
                    }
                }
                if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {
                    field.asyncValidators.validation
                        .forEach(function (validator) { return validators.push(_this.wrapNgValidatorFn(field, validator)); });
                }
                if (validators.length) {
                    if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {
                        field.asyncValidators.validation = forms.Validators.composeAsync(__spread([field.asyncValidators.validation], validators));
                    }
                    else {
                        field.asyncValidators = {
                            validation: forms.Validators.composeAsync(validators),
                        };
                    }
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FormlyFormBuilder.prototype.initFieldValidation = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                var /** @type {?} */ validators = [];
                FORMLY_VALIDATORS
                    .filter(function (opt) {
                    return (field.templateOptions && field.templateOptions.hasOwnProperty(opt))
                        || (field.expressionProperties && field.expressionProperties["templateOptions." + opt]);
                })
                    .forEach(function (opt) {
                    validators.push(function (control) {
                        if (field.templateOptions[opt] === false) {
                            return null;
                        }
                        return _this.getValidation(opt, field.templateOptions[opt])(control);
                    });
                });
                if (field.validators) {
                    var _loop_2 = function (validatorName) {
                        if (validatorName !== 'validation') {
                            var /** @type {?} */ validator_2 = field.validators[validatorName];
                            if (isObject(validator_2)) {
                                validator_2 = validator_2.expression;
                            }
                            validators.push(function (control) {
                                return validator_2(control, field) ? null : (_a = {}, _a[validatorName] = true, _a);
                                var _a;
                            });
                        }
                    };
                    for (var /** @type {?} */ validatorName in field.validators) {
                        _loop_2(validatorName);
                    }
                }
                if (field.validators && Array.isArray(field.validators.validation)) {
                    field.validators.validation
                        .forEach(function (validator) { return validators.push(_this.wrapNgValidatorFn(field, validator)); });
                }
                if (validators.length) {
                    if (field.validators && !Array.isArray(field.validators.validation)) {
                        field.validators.validation = forms.Validators.compose(__spread([field.validators.validation], validators));
                    }
                    else {
                        field.validators = {
                            validation: forms.Validators.compose(validators),
                        };
                    }
                }
            };
        /**
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} path
         * @return {?}
         */
        FormlyFormBuilder.prototype.addFormControl = /**
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} path
         * @return {?}
         */
            function (form, field, model, path) {
                var /** @type {?} */ control;
                var /** @type {?} */ validators = field.validators ? field.validators.validation : undefined, /** @type {?} */ asyncValidators = field.asyncValidators ? field.asyncValidators.validation : undefined, /** @type {?} */ updateOn = field.modelOptions && field.modelOptions.updateOn ?
                    field.modelOptions.updateOn : undefined;
                var /** @type {?} */ abstractControlOptions = ({
                    validators: validators,
                    asyncValidators: asyncValidators,
                    updateOn: updateOn,
                });
                if (field.formControl instanceof forms.AbstractControl || form.get(path)) {
                    control = field.formControl || form.get(path);
                    if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                        && control.value !== model[path]
                        && control instanceof forms.FormControl) {
                        control.patchValue(model[path]);
                    }
                }
                else if (field.component && field.component.createControl) {
                    control = field.component.createControl(model[path], field);
                }
                else if (field.fieldGroup && field.key && field.key === path && !field.fieldArray) {
                    control = new forms.FormGroup(model[path], abstractControlOptions);
                }
                else if (field.fieldArray && field.key && field.key === path) {
                    control = new forms.FormArray([], abstractControlOptions);
                }
                else {
                    control = new forms.FormControl(model[path], abstractControlOptions);
                }
                if (field.templateOptions.disabled) {
                    control.disable();
                }
                // Replace decorated property with a getter that returns the observable.
                // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
                if (delete field.templateOptions.disabled) {
                    Object.defineProperty(field.templateOptions, 'disabled', {
                        get: (function () { return !this.formControl.enabled; }).bind(field),
                        set: (function (value) {
                            if (this.expressionProperties && this.expressionProperties.hasOwnProperty('templateOptions.disabled')) {
                                this.expressionProperties['templateOptions.disabled'].expressionValue = value;
                            }
                            value ? this.formControl.disable() : this.formControl.enable();
                        }).bind(field),
                        enumerable: true,
                        configurable: true,
                    });
                }
                this.addControl(form, path, control, field);
            };
        /**
         * @param {?} form
         * @param {?} key
         * @param {?} formControl
         * @param {?=} field
         * @return {?}
         */
        FormlyFormBuilder.prototype.addControl = /**
         * @param {?} form
         * @param {?} key
         * @param {?} formControl
         * @param {?=} field
         * @return {?}
         */
            function (form, key, formControl, field) {
                if (field) {
                    field.formControl = formControl;
                }
                if (form instanceof forms.FormArray) {
                    if (form.at(/** @type {?} */ (key)) !== formControl) {
                        form.setControl(/** @type {?} */ (key), formControl);
                    }
                }
                else {
                    if (form.get(/** @type {?} */ (key)) !== formControl) {
                        form.setControl(/** @type {?} */ (key), formControl);
                    }
                }
            };
        /**
         * @param {?} opt
         * @param {?} value
         * @return {?}
         */
        FormlyFormBuilder.prototype.getValidation = /**
         * @param {?} opt
         * @param {?} value
         * @return {?}
         */
            function (opt, value) {
                switch (opt) {
                    case 'required':
                        return forms.Validators.required;
                    case 'pattern':
                        return forms.Validators.pattern(value);
                    case 'minLength':
                        return forms.Validators.minLength(value);
                    case 'maxLength':
                        return forms.Validators.maxLength(value);
                    case 'min':
                        return forms.Validators.min(value);
                    case 'max':
                        return forms.Validators.max(value);
                }
            };
        /**
         * @param {?} field
         * @param {?} validator
         * @return {?}
         */
        FormlyFormBuilder.prototype.wrapNgValidatorFn = /**
         * @param {?} field
         * @param {?} validator
         * @return {?}
         */
            function (field, validator) {
                validator = typeof validator === 'string'
                    ? this.formlyConfig.getValidator(validator).validation
                    : validator;
                return function (control) { return ((validator))(control, field); };
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FormlyFormBuilder.prototype.initFieldWrappers = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var /** @type {?} */ templateManipulators = {
                    preWrapper: [],
                    postWrapper: [],
                };
                if (field.templateOptions) {
                    this.mergeTemplateManipulators(templateManipulators, field.templateOptions.templateManipulators);
                }
                this.mergeTemplateManipulators(templateManipulators, this.formlyConfig.templateManipulators);
                var /** @type {?} */ preWrappers = templateManipulators.preWrapper.map(function (m) { return m(field); }).filter(function (type) { return type; }), /** @type {?} */ postWrappers = templateManipulators.postWrapper.map(function (m) { return m(field); }).filter(function (type) { return type; });
                if (!field.wrappers) {
                    field.wrappers = [];
                }
                field.wrappers = __spread(preWrappers, (field.wrappers || []), postWrappers);
            };
        /**
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
        FormlyFormBuilder.prototype.mergeTemplateManipulators = /**
         * @param {?} source
         * @param {?} target
         * @return {?}
         */
            function (source, target) {
                target = target || {};
                if (target.preWrapper) {
                    source.preWrapper = source.preWrapper.concat(target.preWrapper);
                }
                if (target.postWrapper) {
                    source.postWrapper = source.postWrapper.concat(target.postWrapper);
                }
                return source;
            };
        FormlyFormBuilder.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        FormlyFormBuilder.ctorParameters = function () {
            return [
                { type: FormlyConfig },
                { type: FormlyFormExpression }
            ];
        };
        return FormlyFormBuilder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyForm = (function () {
        function FormlyForm(formlyBuilder, formlyExpression, formlyConfig, parentForm, parentFormGroup, parentFormlyForm) {
            this.formlyBuilder = formlyBuilder;
            this.formlyExpression = formlyExpression;
            this.formlyConfig = formlyConfig;
            this.parentForm = parentForm;
            this.parentFormGroup = parentFormGroup;
            this.parentFormlyForm = parentFormlyForm;
            this.model = {};
            this.form = new forms.FormGroup({});
            this.fields = [];
            this.modelChange = new core.EventEmitter();
            /**
             * \@internal
             */
            this.isRoot = true;
            this.modelChangeSubs = [];
        }
        /**
         * @return {?}
         */
        FormlyForm.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                this.checkExpressionChange();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FormlyForm.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.fields || this.fields.length === 0 || !this.isRoot) {
                    return;
                }
                if (changes["fields"] || changes["form"]) {
                    this.model = this.model || {};
                    this.form = this.form || (new forms.FormGroup({}));
                    this.setOptions();
                    this.clearModelSubscriptions();
                    this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
                    this.trackModelChanges(this.fields);
                    this.updateInitialValue();
                }
                else if (changes["model"]) {
                    this.patchModel(this.model);
                }
            };
        /**
         * @return {?}
         */
        FormlyForm.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.clearModelSubscriptions();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FormlyForm.prototype.changeModel = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                assignModelValue(this.model, event.key, event.value);
                this.modelChange.emit(this.model);
                this.checkExpressionChange();
            };
        /**
         * @return {?}
         */
        FormlyForm.prototype.setOptions = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.options = this.options || {};
                this.options.formState = this.options.formState || {};
                if (!this.options.showError) {
                    this.options.showError = this.formlyConfig.extras.showError;
                }
                if (!this.options.fieldChanges) {
                    this.options.fieldChanges = new rxjs.Subject();
                }
                if (!this.options.resetModel) {
                    this.options.resetModel = this.resetModel.bind(this);
                }
                if (!this.options.parentForm) {
                    this.options.parentForm = this.parentFormGroup || this.parentForm;
                }
                if (!this.options.updateInitialValue) {
                    this.options.updateInitialValue = this.updateInitialValue.bind(this);
                }
                if (!((this.options)).resetTrackModelChanges) {
                    ((this.options)).resetTrackModelChanges = function () {
                        _this.clearModelSubscriptions();
                        _this.trackModelChanges(_this.fields);
                    };
                }
            };
        /**
         * @return {?}
         */
        FormlyForm.prototype.checkExpressionChange = /**
         * @return {?}
         */
            function () {
                if (this.isRoot) {
                    this.formlyExpression.checkFields(this.form, this.fields, this.model, this.options);
                }
            };
        /**
         * @param {?} fields
         * @param {?=} rootKey
         * @return {?}
         */
        FormlyForm.prototype.trackModelChanges = /**
         * @param {?} fields
         * @param {?=} rootKey
         * @return {?}
         */
            function (fields, rootKey) {
                var _this = this;
                if (rootKey === void 0) {
                    rootKey = [];
                }
                fields.forEach(function (field) {
                    if (field.key && field.type && !field.fieldGroup && !field.fieldArray) {
                        var /** @type {?} */ valueChanges = field.formControl.valueChanges.pipe(field.modelOptions && field.modelOptions.debounce && field.modelOptions.debounce.default
                            ? operators.debounceTime(field.modelOptions.debounce.default)
                            : operators.tap(function () { }), operators.map(function (value) {
                            if (field.parsers && field.parsers.length > 0) {
                                field.parsers.forEach(function (parserFn) { return value = parserFn(value); });
                            }
                            return value;
                        }), operators.tap(function (value) { return _this.changeModel({ key: __spread(rootKey, [field.key]).join('.'), value: value }); }));
                        _this.modelChangeSubs.push(valueChanges.subscribe());
                    }
                    if (field.fieldGroup && field.fieldGroup.length > 0) {
                        _this.trackModelChanges(field.fieldGroup, field.key ? __spread(rootKey, [field.key]) : rootKey);
                    }
                });
            };
        /**
         * @return {?}
         */
        FormlyForm.prototype.clearModelSubscriptions = /**
         * @return {?}
         */
            function () {
                this.modelChangeSubs.forEach(function (sub) { return sub.unsubscribe(); });
                this.modelChangeSubs = [];
            };
        /**
         * @param {?} model
         * @return {?}
         */
        FormlyForm.prototype.patchModel = /**
         * @param {?} model
         * @return {?}
         */
            function (model) {
                assignModelToFields(this.fields, model);
                this.clearModelSubscriptions();
                this.resetFieldArray(this.fields, model);
                this.initializeFormValue(this.form);
                ((this.form)).patchValue(model, { onlySelf: true });
                this.trackModelChanges(this.fields);
            };
        /**
         * @param {?=} model
         * @return {?}
         */
        FormlyForm.prototype.resetModel = /**
         * @param {?=} model
         * @return {?}
         */
            function (model) {
                model = isNullOrUndefined(model) ? this.initialModel : model;
                this.resetFieldArray(this.fields, model);
                // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
                // but only when the current component is a root one.
                if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {
                    this.options.parentForm.resetForm(model);
                }
                else {
                    this.form.reset(model);
                }
                ((this.options)).resetTrackModelChanges();
            };
        /**
         * @param {?} fields
         * @param {?} newModel
         * @return {?}
         */
        FormlyForm.prototype.resetFieldArray = /**
         * @param {?} fields
         * @param {?} newModel
         * @return {?}
         */
            function (fields, newModel) {
                var _this = this;
                fields.forEach(function (field) {
                    if ((field.fieldGroup && field.fieldGroup.length > 0) || field.fieldArray) {
                        var /** @type {?} */ newFieldModel_1 = getFieldModel(newModel, field, true);
                        if (field.fieldArray) {
                            field.fieldGroup = field.fieldGroup || [];
                            field.fieldGroup.length = 0;
                            if (field.model !== newFieldModel_1 && field.model) {
                                field.model.length = 0;
                            }
                            var /** @type {?} */ formControl_1 = (field.formControl);
                            while (formControl_1.length !== 0) {
                                formControl_1.removeAt(0);
                            }
                            newFieldModel_1.forEach(function (m, i) {
                                field.model[i] = m;
                                field.fieldGroup.push(__assign({}, clone(field.fieldArray), { key: "" + i }));
                                _this.formlyBuilder.buildForm(formControl_1, [field.fieldGroup[i]], newFieldModel_1, _this.options);
                            });
                        }
                        else {
                            _this.resetFieldArray(field.fieldGroup, newFieldModel_1);
                        }
                    }
                    else if (field.key && field.type) {
                        field.formControl.reset(getFieldModel(newModel, field, false));
                    }
                });
            };
        /**
         * @param {?} control
         * @return {?}
         */
        FormlyForm.prototype.initializeFormValue = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                var _this = this;
                if (control instanceof forms.FormControl) {
                    control.setValue(null);
                }
                else if (control instanceof forms.FormGroup) {
                    Object.keys(control.controls).forEach(function (k) { return _this.initializeFormValue(control.controls[k]); });
                }
                else if (control instanceof forms.FormArray) {
                    control.controls.forEach(function (c) { return _this.initializeFormValue(c); });
                }
            };
        /**
         * @return {?}
         */
        FormlyForm.prototype.updateInitialValue = /**
         * @return {?}
         */
            function () {
                this.initialModel = reverseDeepMerge({}, this.model);
            };
        FormlyForm.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-form',
                        template: "\n    <formly-field *ngFor=\"let field of fields\"\n      [model]=\"field.model\" [form]=\"form\"\n      [field]=\"field\"\n      [ngClass]=\"field.className\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  ",
                    },] },
        ];
        /** @nocollapse */
        FormlyForm.ctorParameters = function () {
            return [
                { type: FormlyFormBuilder },
                { type: FormlyFormExpression },
                { type: FormlyConfig },
                { type: forms.NgForm, decorators: [{ type: core.Optional }] },
                { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] },
                { type: FormlyForm, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
            ];
        };
        FormlyForm.propDecorators = {
            model: [{ type: core.Input }],
            form: [{ type: core.Input }],
            fields: [{ type: core.Input }],
            options: [{ type: core.Input }],
            modelChange: [{ type: core.Output }],
            isRoot: [{ type: core.Input }]
        };
        return FormlyForm;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyField = (function () {
        function FormlyField(formlyConfig, componentFactoryResolver) {
            this.formlyConfig = formlyConfig;
            this.componentFactoryResolver = componentFactoryResolver;
            this.options = {};
            this.modelChange = new core.EventEmitter();
            this.componentRefs = [];
        }
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.lifeCycleHooks(this.lifecycle.afterContentInit);
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                this.lifeCycleHooks(this.lifecycle.afterContentChecked);
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.lifeCycleHooks(this.lifecycle.afterViewInit);
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                this.lifeCycleHooks(this.lifecycle.afterViewChecked);
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                this.lifeCycleHooks(this.lifecycle.doCheck);
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.field.template) {
                    this.createFieldComponent();
                }
                this.lifeCycleHooks(this.lifecycle.onInit);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FormlyField.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                this.lifeCycleHooks(this.lifecycle.onChanges);
                this.componentRefs.forEach(function (ref) {
                    Object.assign(ref.instance, {
                        model: _this.model,
                        form: _this.form,
                        field: _this.field,
                        options: _this.options,
                    });
                });
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.lifeCycleHooks(this.lifecycle.onDestroy);
                this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
                this.componentRefs = [];
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.createFieldComponent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ type = this.formlyConfig.getType(this.field.type);
                var /** @type {?} */ fieldComponent = this.fieldComponent;
                (this.field.wrappers || []).forEach(function (wrapperName) {
                    var /** @type {?} */ wrapperRef = _this.createComponent(fieldComponent, _this.formlyConfig.getWrapper(wrapperName).component);
                    fieldComponent = wrapperRef.instance.fieldComponent;
                });
                return this.createComponent(fieldComponent, type.component);
            };
        /**
         * @param {?} fieldComponent
         * @param {?} component
         * @return {?}
         */
        FormlyField.prototype.createComponent = /**
         * @param {?} fieldComponent
         * @param {?} component
         * @return {?}
         */
            function (fieldComponent, component) {
                var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
                var /** @type {?} */ ref = (fieldComponent.createComponent(componentFactory));
                Object.assign(ref.instance, {
                    model: this.model,
                    form: this.form,
                    field: this.field,
                    options: this.options,
                });
                this.componentRefs.push(ref);
                return ref;
            };
        Object.defineProperty(FormlyField.prototype, "lifecycle", {
            get: /**
             * @return {?}
             */ function () {
                return this.field.lifecycle || {};
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} callback
         * @return {?}
         */
        FormlyField.prototype.lifeCycleHooks = /**
         * @param {?} callback
         * @return {?}
         */
            function (callback) {
                if (callback) {
                    callback(this.form, this.field, this.model, this.options);
                }
            };
        FormlyField.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field',
                        template: "\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"field.template && !field.fieldGroup\" [innerHtml]=\"field.template\"></div>\n  ",
                        host: {
                            '[style.display]': 'field.hide ? "none":""',
                        },
                    },] },
        ];
        /** @nocollapse */
        FormlyField.ctorParameters = function () {
            return [
                { type: FormlyConfig },
                { type: core.ComponentFactoryResolver }
            ];
        };
        FormlyField.propDecorators = {
            model: [{ type: core.Input }],
            form: [{ type: core.Input }],
            field: [{ type: core.Input }],
            options: [{ type: core.Input }],
            modelChange: [{ type: core.Output }],
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyField;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyAttributes = (function () {
        function FormlyAttributes(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.attributes = ['id', 'name', 'placeholder', 'tabindex', 'step', 'readonly'];
            this.statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];
        }
        /**
         * @return {?}
         */
        FormlyAttributes.prototype.onFocus = /**
         * @return {?}
         */
            function () {
                this.field.focus = true;
            };
        /**
         * @return {?}
         */
        FormlyAttributes.prototype.onBlur = /**
         * @return {?}
         */
            function () {
                this.field.focus = false;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FormlyAttributes.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (changes["field"]) {
                    var /** @type {?} */ fieldChanges_1 = changes["field"];
                    this.attributes
                        .filter(function (attr) { return _this.canApplyRender(fieldChanges_1, attr); })
                        .forEach(function (attr) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, attr, _this.getPropValue(_this.field, attr)); });
                    if (this.field.templateOptions && this.field.templateOptions.attributes) {
                        var /** @type {?} */ attributes_1 = this.field.templateOptions.attributes;
                        Object.keys(attributes_1).forEach(function (name) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, name, /** @type {?} */ (attributes_1[name])); });
                    }
                    this.statements
                        .filter(function (statement) { return _this.canApplyRender(fieldChanges_1, statement); })
                        .forEach(function (statement) { return _this.renderer.listen(_this.elementRef.nativeElement, statement, _this.getStatementValue(statement)); });
                    if ((fieldChanges_1.previousValue || {}).focus !== (fieldChanges_1.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
                    }
                }
            };
        /**
         * @param {?} field
         * @param {?} prop
         * @return {?}
         */
        FormlyAttributes.prototype.getPropValue = /**
         * @param {?} field
         * @param {?} prop
         * @return {?}
         */
            function (field, prop) {
                field = field || {};
                if (field.templateOptions && field.templateOptions[prop]) {
                    return field.templateOptions[prop];
                }
                return ((field))[prop] || '';
            };
        /**
         * @param {?} statement
         * @return {?}
         */
        FormlyAttributes.prototype.getStatementValue = /**
         * @param {?} statement
         * @return {?}
         */
            function (statement) {
                var _this = this;
                var /** @type {?} */ fn = this.field.templateOptions[statement];
                return function (event) { return fn(_this.field, event); };
            };
        /**
         * @param {?} fieldChange
         * @param {?} prop
         * @return {?}
         */
        FormlyAttributes.prototype.canApplyRender = /**
         * @param {?} fieldChange
         * @param {?} prop
         * @return {?}
         */
            function (fieldChange, prop) {
                var /** @type {?} */ currentValue = this.getPropValue(this.field, prop), /** @type {?} */ previousValue = this.getPropValue(fieldChange.previousValue, prop);
                if (previousValue !== currentValue) {
                    if (this.statements.indexOf(prop) !== -1) {
                        return typeof currentValue === 'function';
                    }
                    return true;
                }
                return false;
            };
        FormlyAttributes.decorators = [
            { type: core.Directive, args: [{
                        selector: '[formlyAttributes]',
                    },] },
        ];
        /** @nocollapse */
        FormlyAttributes.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ElementRef }
            ];
        };
        FormlyAttributes.propDecorators = {
            field: [{ type: core.Input, args: ['formlyAttributes',] }],
            onFocus: [{ type: core.HostListener, args: ['focus',] }],
            onBlur: [{ type: core.HostListener, args: ['blur',] }]
        };
        return FormlyAttributes;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var Field = (function () {
        function Field() {
        }
        Object.defineProperty(Field.prototype, "key", {
            get: /**
             * @return {?}
             */ function () { return this.field.key; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Field.prototype, "formControl", {
            get: /**
             * @return {?}
             */ function () { return this.field.formControl; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Field.prototype, "to", {
            get: /**
             * @return {?}
             */ function () { return this.field.templateOptions; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Field.prototype, "showError", {
            get: /**
             * @return {?}
             */ function () { return this.options.showError(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Field.prototype, "id", {
            get: /**
             * @return {?}
             */ function () { return this.field.id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Field.prototype, "formState", {
            get: /**
             * @return {?}
             */ function () { return this.options.formState || {}; },
            enumerable: true,
            configurable: true
        });
        Field.propDecorators = {
            form: [{ type: core.Input }],
            field: [{ type: core.Input }],
            model: [{ type: core.Input }],
            options: [{ type: core.Input }]
        };
        return Field;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ FieldType = (function (_super) {
        __extends(FieldType, _super);
        function FieldType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        FieldType.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        FieldType.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) { };
        /**
         * @return {?}
         */
        FieldType.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        FieldType.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        FieldType.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        FieldType.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        FieldType.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        FieldType.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () { };
        return FieldType;
    }(Field));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ FieldArrayType = (function (_super) {
        __extends(FieldArrayType, _super);
        function FieldArrayType(builder) {
            var _this = _super.call(this) || this;
            _this.builder = builder;
            return _this;
        }
        /**
         * @param {?=} i
         * @param {?=} initialModel
         * @return {?}
         */
        FieldArrayType.prototype.add = /**
         * @param {?=} i
         * @param {?=} initialModel
         * @return {?}
         */
            function (i, initialModel) {
                i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;
                this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
                this.field.fieldGroup.splice(i, 0, __assign({}, clone(this.field.fieldArray)));
                this.field.fieldGroup.forEach(function (field, index) {
                    field.key = "" + index;
                });
                var /** @type {?} */ form = new forms.FormArray([]);
                this.builder.buildForm(form, [this.field.fieldGroup[i]], this.model, this.options);
                this.formControl.insert(i, form.at(0));
                ((this.options)).resetTrackModelChanges();
            };
        /**
         * @param {?} i
         * @return {?}
         */
        FieldArrayType.prototype.remove = /**
         * @param {?} i
         * @return {?}
         */
            function (i) {
                this.formControl.removeAt(i);
                this.field.fieldGroup.splice(i, 1);
                this.field.fieldGroup.forEach(function (f, index) { return f.key = "" + index; });
                this.model.splice(i, 1);
                ((this.options)).resetTrackModelChanges();
            };
        return FieldArrayType;
    }(FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ FieldWrapper = (function (_super) {
        __extends(FieldWrapper, _super);
        function FieldWrapper() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FieldWrapper;
    }(Field));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyGroup = (function (_super) {
        __extends(FormlyGroup, _super);
        function FormlyGroup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyGroup.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-group',
                        template: "\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"model\"\n      [form]=\"field.formControl || form\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  ",
                    },] },
        ];
        return FormlyGroup;
    }(FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyValidationMessage = (function () {
        function FormlyValidationMessage(formlyConfig) {
            this.formlyConfig = formlyConfig;
        }
        Object.defineProperty(FormlyValidationMessage.prototype, "fieldForm", {
            set: /**
             * @param {?} control
             * @return {?}
             */ function (control) {
                console.warn("formly-validation-message: Passing 'fieldForm' input is deprecated and it will be removed in the 4.0 version.");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyValidationMessage.prototype, "errorMessage", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ fieldForm = this.field.formControl;
                for (var /** @type {?} */ error in fieldForm.errors) {
                    if (fieldForm.errors.hasOwnProperty(error)) {
                        var /** @type {?} */ message = this.formlyConfig.getValidatorMessage(error);
                        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {
                            message = this.field.validation.messages[error];
                        }
                        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {
                            message = this.field.validators[error].message;
                        }
                        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {
                            message = this.field.asyncValidators[error].message;
                        }
                        if (typeof message === 'function') {
                            return message(fieldForm.errors[error], this.field);
                        }
                        return message;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        FormlyValidationMessage.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-validation-message',
                        template: "{{ errorMessage }}",
                    },] },
        ];
        /** @nocollapse */
        FormlyValidationMessage.ctorParameters = function () {
            return [
                { type: FormlyConfig }
            ];
        };
        FormlyValidationMessage.propDecorators = {
            field: [{ type: core.Input }],
            fieldForm: [{ type: core.Input }]
        };
        return FormlyValidationMessage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyModule = (function () {
        function FormlyModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        FormlyModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: FormlyModule,
                    providers: [
                        FormlyFormBuilder,
                        FormlyFormExpression,
                        FormlyConfig,
                        { provide: FORMLY_CONFIG_TOKEN, useValue: { types: [{ name: 'formly-group', component: FormlyGroup }] }, multi: true },
                        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },
                        { provide: core.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
                    ],
                };
            };
        /**
         * @param {?=} config
         * @return {?}
         */
        FormlyModule.forChild = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: FormlyModule,
                    providers: [
                        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },
                        { provide: core.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
                    ],
                };
            };
        FormlyModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],
                        entryComponents: [FormlyGroup],
                        exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                        ],
                    },] },
        ];
        return FormlyModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.FormlyForm = FormlyForm;
    exports.FormlyField = FormlyField;
    exports.FormlyAttributes = FormlyAttributes;
    exports.FormlyConfig = FormlyConfig;
    exports.FormlyFormBuilder = FormlyFormBuilder;
    exports.Field = Field;
    exports.FieldType = FieldType;
    exports.FieldArrayType = FieldArrayType;
    exports.FieldWrapper = FieldWrapper;
    exports.FormlyModule = FormlyModule;
    exports.ɵc = FormlyGroup;
    exports.ɵa = FORMLY_CONFIG_TOKEN;
    exports.ɵb = FormlyFormExpression;
    exports.ɵd = FormlyValidationMessage;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,