/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Observable } from 'rxjs';
/**
 * @param {?} formId
 * @param {?} field
 * @param {?} index
 * @return {?}
 */
export function getFieldId(formId, field, index) {
    if (field.id)
        return field.id;
    let /** @type {?} */ type = field.type;
    if (!type && field.template)
        type = 'template';
    return [formId, type, field.key, index].join('_');
}
/**
 * @param {?} field
 * @return {?}
 */
export function getKeyPath(field) {
    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
    if (!(/** @type {?} */ (field))['_formlyKeyPath'] || (/** @type {?} */ (field))['_formlyKeyPath'].key !== field.key) {
        let /** @type {?} */ keyPath = [];
        if (field.key) {
            /* Also allow for an array key, hence the type check  */
            let /** @type {?} */ pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;
            for (let /** @type {?} */ pathElement of pathElements) {
                if (typeof pathElement === 'string') {
                    /* replace paths of the form names[2] by names.2, cfr. angular formly */
                    pathElement = pathElement.replace(/\[(\w+)\]/g, '.$1');
                    keyPath = keyPath.concat(pathElement.split('.'));
                }
                else {
                    keyPath.push(pathElement);
                }
            }
            for (let /** @type {?} */ i = 0; i < keyPath.length; i++) {
                let /** @type {?} */ pathElement = keyPath[i];
                if (typeof pathElement === 'string' && stringIsInteger(pathElement)) {
                    keyPath[i] = parseInt(pathElement);
                }
            }
        }
        (/** @type {?} */ (field))['_formlyKeyPath'] = {
            key: field.key,
            path: keyPath,
        };
    }
    return (/** @type {?} */ (field))['_formlyKeyPath'].path.slice(0);
}
/**
 * @param {?} str
 * @return {?}
 */
function stringIsInteger(str) {
    return !isNullOrUndefined(str) && /^\d+$/.test(str);
}
export const /** @type {?} */ FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
/**
 * @param {?} model
 * @param {?} field
 * @param {?} constructEmptyObjects
 * @return {?}
 */
export function getFieldModel(model, field, constructEmptyObjects) {
    let /** @type {?} */ keyPath = getKeyPath(field);
    let /** @type {?} */ value = model;
    for (let /** @type {?} */ i = 0; i < keyPath.length; i++) {
        let /** @type {?} */ path = keyPath[i];
        let /** @type {?} */ pathValue = value[path];
        if (isNullOrUndefined(pathValue) && constructEmptyObjects) {
            if (i < keyPath.length - 1) {
                /* TODO? : It would be much nicer if we could construct object instances of the correct class, for instance by using factories. */
                value[path] = typeof keyPath[i + 1] === 'number' ? [] : {};
            }
            else if (field.fieldGroup && !field.fieldArray) {
                value[path] = {};
            }
            else if (field.fieldArray) {
                value[path] = [];
            }
        }
        value = value[path];
        if (!value) {
            break;
        }
    }
    return value;
}
/**
 * @param {?} fields
 * @param {?} model
 * @return {?}
 */
export function assignModelToFields(fields, model) {
    fields.forEach((field, index) => {
        if (!isUndefined(field.defaultValue) && isUndefined(getValueForKey(model, field.key))) {
            assignModelValue(model, field.key, field.defaultValue);
        }
        (/** @type {?} */ (field)).model = model;
        if (field.key && (field.fieldGroup || field.fieldArray)) {
            (/** @type {?} */ (field)).model = getFieldModel(model, field, true);
        }
        if (field.fieldGroup) {
            assignModelToFields(field.fieldGroup, field.model);
        }
    });
}
/**
 * @param {?} model
 * @param {?} path
 * @param {?} value
 * @return {?}
 */
export function assignModelValue(model, path, value) {
    if (typeof path === 'string') {
        path = getKeyPath({ key: path });
    }
    if (path.length > 1) {
        const /** @type {?} */ e = path.shift();
        if (!model[e] || !isObject(model[e])) {
            model[e] = typeof path[0] === 'string' ? {} : [];
        }
        assignModelValue(model[e], path, value);
    }
    else {
        model[path[0]] = value;
    }
}
/**
 * @param {?} model
 * @param {?} path
 * @return {?}
 */
export function getValueForKey(model, path) {
    if (typeof path === 'string') {
        path = getKeyPath({ key: path });
    }
    if (path.length > 1) {
        const /** @type {?} */ e = path.shift();
        if (!model[e]) {
            model[e] = typeof path[0] === 'string' ? {} : [];
        }
        return getValueForKey(model[e], path);
    }
    else {
        return model[path[0]];
    }
}
/**
 * @param {?} controlKey
 * @param {?} actualKey
 * @return {?}
 */
export function getKey(controlKey, actualKey) {
    return actualKey ? actualKey + '.' + controlKey : controlKey;
}
/**
 * @param {?} dest
 * @param {...?} args
 * @return {?}
 */
export function reverseDeepMerge(dest, ...args) {
    args.forEach(src => {
        for (let /** @type {?} */ srcArg in src) {
            if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {
                if (isFunction(src[srcArg])) {
                    dest[srcArg] = src[srcArg];
                }
                else {
                    dest[srcArg] = clone(src[srcArg]);
                }
            }
            else if (objAndSameType(dest[srcArg], src[srcArg])) {
                reverseDeepMerge(dest[srcArg], src[srcArg]);
            }
        }
    });
    return dest;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNullOrUndefined(value) {
    return value === undefined || value === null;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return value === undefined;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isBlankString(value) {
    return value === '';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof (value) === 'function';
}
/**
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
export function objAndSameType(obj1, obj2) {
    return isObject(obj1) && isObject(obj2) &&
        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);
}
/**
 * @param {?} x
 * @return {?}
 */
export function isObject(x) {
    return x != null && typeof x === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function clone(value) {
    if (!isObject(value) || value instanceof RegExp || value instanceof Observable) {
        return value;
    }
    if (Object.prototype.toString.call(value) === '[object Date]') {
        return new Date(value.getTime());
    }
    if (Array.isArray(value)) {
        return value.slice(0).map(v => clone(v));
    }
    value = Object.assign({}, value);
    Object.keys(value).forEach(k => value[k] = clone(value[k]));
    return value;
}
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
export function evalStringExpression(expression, argNames) {
    try {
        return Function.bind.apply(Function, [void 0].concat(argNames.concat(`return ${expression};`)))();
    }
    catch (/** @type {?} */ error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
export function evalExpressionValueSetter(expression, argNames) {
    try {
        return Function.bind
            .apply(Function, [void 0].concat(argNames.concat(`${expression} = expressionValue;`)))();
    }
    catch (/** @type {?} */ error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} thisArg
 * @param {?} argVal
 * @return {?}
 */
export function evalExpression(expression, thisArg, argVal) {
    if (expression instanceof Function) {
        return expression.apply(thisArg, argVal);
    }
    else {
        return expression ? true : false;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlLyIsInNvdXJjZXMiOlsibGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7O0FBRWxDLE1BQU0scUJBQXFCLE1BQWMsRUFBRSxLQUF3QixFQUFFLEtBQW9CO0lBQ3ZGLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUM5QixxQkFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN0QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUMvQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ25EOzs7OztBQUVELE1BQU0scUJBQXFCLEtBQWtFOztJQUUzRixFQUFFLENBQUMsQ0FBQyxDQUFDLG1CQUFPLEtBQUssRUFBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksbUJBQU8sS0FBSyxFQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUYscUJBQUksT0FBTyxHQUFzQixFQUFFLENBQUM7UUFDcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O1lBRWQscUJBQUksWUFBWSxHQUFHLE9BQU8sS0FBSyxDQUFDLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFL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LENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDbkc7SUFBQyxLQUFLLENBQUMsQ0FBQyxpQkFBQSxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdEI7Q0FDRjs7Ozs7O0FBRUQsTUFBTSxvQ0FBb0MsVUFBa0IsRUFBRSxRQUFrQjtJQUM5RSxJQUFJLENBQUM7UUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUk7YUFDakIsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxVQUFVLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDNUY7SUFBQyxLQUFLLENBQUMsQ0FBQyxpQkFBQSxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdEI7Q0FDRjs7Ozs7OztBQUVELE1BQU0seUJBQXlCLFVBQXVDLEVBQUUsT0FBWSxFQUFFLE1BQWE7SUFDakcsRUFBRSxDQUFDLENBQUMsVUFBVSxZQUFZLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUNsQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICcuL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmllbGRJZChmb3JtSWQ6IHN0cmluZywgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBpbmRleDogc3RyaW5nfG51bWJlcikge1xuICBpZiAoZmllbGQuaWQpIHJldHVybiBmaWVsZC5pZDtcbiAgbGV0IHR5cGUgPSBmaWVsZC50eXBlO1xuICBpZiAoIXR5cGUgJiYgZmllbGQudGVtcGxhdGUpIHR5cGUgPSAndGVtcGxhdGUnO1xuICByZXR1cm4gW2Zvcm1JZCwgdHlwZSwgZmllbGQua2V5LCBpbmRleF0uam9pbignXycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5UGF0aChmaWVsZDoge2tleT86IHN0cmluZ3xzdHJpbmdbXSwgZmllbGRHcm91cD86IGFueSwgZmllbGRBcnJheT86IGFueX0pOiAoc3RyaW5nfG51bWJlcilbXSB7XG4gIC8qIFdlIHN0b3JlIHRoZSBrZXlQYXRoIGluIHRoZSBmaWVsZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBmcmVxdWVudGx5LiAqL1xuICBpZiAoISg8YW55PiBmaWVsZClbJ19mb3JtbHlLZXlQYXRoJ10gfHwgKDxhbnk+IGZpZWxkKVsnX2Zvcm1seUtleVBhdGgnXS5rZXkgIT09IGZpZWxkLmtleSkge1xuICAgIGxldCBrZXlQYXRoOiAoc3RyaW5nfG51bWJlcilbXSA9IFtdO1xuICAgIGlmIChmaWVsZC5rZXkpIHtcbiAgICAgIC8qIEFsc28gYWxsb3cgZm9yIGFuIGFycmF5IGtleSwgaGVuY2UgdGhlIHR5cGUgY2hlY2sgICovXG4gICAgICBsZXQgcGF0aEVsZW1lbnRzID0gdHlwZW9mIGZpZWxkLmtleSA9PT0gJ3N0cmluZycgPyBmaWVsZC5rZXkuc3BsaXQoJy4nKSA6IGZpZWxkLmtleTtcbiAgICAgIGZvciAobGV0IHBhdGhFbGVtZW50IG9mIHBhdGhFbGVtZW50cykge1xuICAgICAgICBpZiAodHlwZW9mIHBhdGhFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8qIHJlcGxhY2UgcGF0aHMgb2YgdGhlIGZvcm0gbmFtZXNbMl0gYnkgbmFtZXMuMiwgY2ZyLiBhbmd1bGFyIGZvcm1seSAqL1xuICAgICAgICAgIHBhdGhFbGVtZW50ID0gcGF0aEVsZW1lbnQucmVwbGFjZSgvXFxbKFxcdyspXFxdL2csICcuJDEnKTtcbiAgICAgICAgICBrZXlQYXRoID0ga2V5UGF0aC5jb25jYXQocGF0aEVsZW1lbnQuc3BsaXQoJy4nKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAga2V5UGF0aC5wdXNoKHBhdGhFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlQYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwYXRoRWxlbWVudCA9IGtleVBhdGhbaV07XG4gICAgICAgIGlmICh0eXBlb2YgcGF0aEVsZW1lbnQgPT09ICdzdHJpbmcnICYmIHN0cmluZ0lzSW50ZWdlcihwYXRoRWxlbWVudCkpICB7XG4gICAgICAgICAga2V5UGF0aFtpXSA9IHBhcnNlSW50KHBhdGhFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAoPGFueT4gZmllbGQpWydfZm9ybWx5S2V5UGF0aCddID0ge1xuICAgICAga2V5OiBmaWVsZC5rZXksXG4gICAgICBwYXRoOiBrZXlQYXRoLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gKDxhbnk+IGZpZWxkKVsnX2Zvcm1seUtleVBhdGgnXS5wYXRoLnNsaWNlKDApO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdJc0ludGVnZXIoc3RyOiBzdHJpbmcpIHtcbiAgcmV0dXJuICFpc051bGxPclVuZGVmaW5lZChzdHIpICYmIC9eXFxkKyQvLnRlc3Qoc3RyKTtcbn1cblxuZXhwb3J0IGNvbnN0IEZPUk1MWV9WQUxJREFUT1JTID0gWydyZXF1aXJlZCcsICdwYXR0ZXJuJywgJ21pbkxlbmd0aCcsICdtYXhMZW5ndGgnLCAnbWluJywgJ21heCddO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmllbGRNb2RlbChtb2RlbDogYW55LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcsIGNvbnN0cnVjdEVtcHR5T2JqZWN0czogYm9vbGVhbik6IGFueSB7XG4gIGxldCBrZXlQYXRoOiAoc3RyaW5nfG51bWJlcilbXSA9IGdldEtleVBhdGgoZmllbGQpO1xuICBsZXQgdmFsdWU6IGFueSA9IG1vZGVsO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleVBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcGF0aCA9IGtleVBhdGhbaV07XG4gICAgbGV0IHBhdGhWYWx1ZSA9IHZhbHVlW3BhdGhdO1xuICAgIGlmIChpc051bGxPclVuZGVmaW5lZChwYXRoVmFsdWUpICYmIGNvbnN0cnVjdEVtcHR5T2JqZWN0cykge1xuICAgICAgaWYgKGkgPCBrZXlQYXRoLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgLyogVE9ETz8gOiBJdCB3b3VsZCBiZSBtdWNoIG5pY2VyIGlmIHdlIGNvdWxkIGNvbnN0cnVjdCBvYmplY3QgaW5zdGFuY2VzIG9mIHRoZSBjb3JyZWN0IGNsYXNzLCBmb3IgaW5zdGFuY2UgYnkgdXNpbmcgZmFjdG9yaWVzLiAqL1xuICAgICAgICB2YWx1ZVtwYXRoXSA9IHR5cGVvZiBrZXlQYXRoW2kgKyAxXSA9PT0gJ251bWJlcicgPyBbXSA6IHt9O1xuICAgICAgfSBlbHNlIGlmIChmaWVsZC5maWVsZEdyb3VwICYmICFmaWVsZC5maWVsZEFycmF5KSB7XG4gICAgICAgIHZhbHVlW3BhdGhdID0ge307XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkLmZpZWxkQXJyYXkpIHtcbiAgICAgICAgdmFsdWVbcGF0aF0gPSBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFsdWUgPSB2YWx1ZVtwYXRoXTtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduTW9kZWxUb0ZpZWxkcyhmaWVsZHM6IEZvcm1seUZpZWxkQ29uZmlnW10sIG1vZGVsOiBhbnkpIHtcbiAgZmllbGRzLmZvckVhY2goKGZpZWxkLCBpbmRleCkgPT4ge1xuICAgIGlmICghaXNVbmRlZmluZWQoZmllbGQuZGVmYXVsdFZhbHVlKSAmJiBpc1VuZGVmaW5lZChnZXRWYWx1ZUZvcktleShtb2RlbCwgZmllbGQua2V5KSkpIHtcbiAgICAgIGFzc2lnbk1vZGVsVmFsdWUobW9kZWwsIGZpZWxkLmtleSwgZmllbGQuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICAoZmllbGQgYXMgYW55KS5tb2RlbCA9IG1vZGVsO1xuICAgIGlmIChmaWVsZC5rZXkgJiYgKGZpZWxkLmZpZWxkR3JvdXAgfHwgZmllbGQuZmllbGRBcnJheSkpIHtcbiAgICAgIChmaWVsZCBhcyBhbnkpLm1vZGVsID0gZ2V0RmllbGRNb2RlbChtb2RlbCwgZmllbGQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5maWVsZEdyb3VwKSB7XG4gICAgICBhc3NpZ25Nb2RlbFRvRmllbGRzKGZpZWxkLmZpZWxkR3JvdXAsIGZpZWxkLm1vZGVsKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduTW9kZWxWYWx1ZShtb2RlbDogYW55LCBwYXRoOiBzdHJpbmcgfCAoc3RyaW5nIHwgbnVtYmVyKVtdLCB2YWx1ZTogYW55KSB7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXRoID0gZ2V0S2V5UGF0aCh7a2V5OiBwYXRofSk7XG4gIH1cblxuICBpZiAocGF0aC5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgZSA9IHBhdGguc2hpZnQoKTtcbiAgICBpZiAoIW1vZGVsW2VdIHx8ICFpc09iamVjdChtb2RlbFtlXSkpIHtcbiAgICAgIG1vZGVsW2VdID0gdHlwZW9mIHBhdGhbMF0gPT09ICdzdHJpbmcnID8ge30gOiBbXTtcbiAgICB9XG4gICAgYXNzaWduTW9kZWxWYWx1ZShtb2RlbFtlXSwgcGF0aCwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIG1vZGVsW3BhdGhbMF1dID0gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KG1vZGVsOiBhbnksIHBhdGg6IHN0cmluZyB8IChzdHJpbmcgfCBudW1iZXIpW10pOiBhbnkge1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgcGF0aCA9IGdldEtleVBhdGgoe2tleTogcGF0aH0pO1xuICB9XG4gIGlmIChwYXRoLmxlbmd0aCA+IDEpIHtcbiAgICBjb25zdCBlID0gcGF0aC5zaGlmdCgpO1xuICAgIGlmICghbW9kZWxbZV0pIHtcbiAgICAgIG1vZGVsW2VdID0gdHlwZW9mIHBhdGhbMF0gPT09ICdzdHJpbmcnID8ge30gOiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFZhbHVlRm9yS2V5KG1vZGVsW2VdLCBwYXRoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbW9kZWxbcGF0aFswXV07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleShjb250cm9sS2V5OiBzdHJpbmcsIGFjdHVhbEtleTogc3RyaW5nKSB7XG4gIHJldHVybiBhY3R1YWxLZXkgPyBhY3R1YWxLZXkgKyAnLicgKyBjb250cm9sS2V5IDogY29udHJvbEtleTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldmVyc2VEZWVwTWVyZ2UoZGVzdDogYW55LCAuLi5hcmdzOiBhbnlbXSkge1xuICBhcmdzLmZvckVhY2goc3JjID0+IHtcbiAgICBmb3IgKGxldCBzcmNBcmcgaW4gc3JjKSB7XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZGVzdFtzcmNBcmddKSB8fCBpc0JsYW5rU3RyaW5nKGRlc3Rbc3JjQXJnXSkpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oc3JjW3NyY0FyZ10pKSB7XG4gICAgICAgICAgZGVzdFtzcmNBcmddID0gc3JjW3NyY0FyZ107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVzdFtzcmNBcmddID0gY2xvbmUoc3JjW3NyY0FyZ10pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9iakFuZFNhbWVUeXBlKGRlc3Rbc3JjQXJnXSwgc3JjW3NyY0FyZ10pKSB7XG4gICAgICAgIHJldmVyc2VEZWVwTWVyZ2UoZGVzdFtzcmNBcmddLCBzcmNbc3JjQXJnXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZTogYW55KSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWU6IGFueSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmxhbmtTdHJpbmcodmFsdWU6IGFueSkge1xuICByZXR1cm4gdmFsdWUgPT09ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2JqQW5kU2FtZVR5cGUob2JqMTogYW55LCBvYmoyOiBhbnkpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iajEpICYmIGlzT2JqZWN0KG9iajIpICYmXG4gICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iajEpID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqMik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh4OiBhbnkpIHtcbiAgcmV0dXJuIHggIT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZSh2YWx1ZTogYW55KTogYW55IHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgdmFsdWUgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZS5nZXRUaW1lKCkpO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnNsaWNlKDApLm1hcCh2ID0+IGNsb25lKHYpKTtcbiAgfVxuXG4gIHZhbHVlID0gT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpO1xuICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChrID0+IHZhbHVlW2tdID0gY2xvbmUodmFsdWVba10pKTtcblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsU3RyaW5nRXhwcmVzc2lvbihleHByZXNzaW9uOiBzdHJpbmcsIGFyZ05hbWVzOiBzdHJpbmdbXSkge1xuICB0cnkge1xuICAgIHJldHVybiBGdW5jdGlvbi5iaW5kLmFwcGx5KEZ1bmN0aW9uLCBbdm9pZCAwXS5jb25jYXQoYXJnTmFtZXMuY29uY2F0KGByZXR1cm4gJHtleHByZXNzaW9ufTtgKSkpKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV2YWxFeHByZXNzaW9uVmFsdWVTZXR0ZXIoZXhwcmVzc2lvbjogc3RyaW5nLCBhcmdOYW1lczogc3RyaW5nW10pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRnVuY3Rpb24uYmluZFxuICAgICAgLmFwcGx5KEZ1bmN0aW9uLCBbdm9pZCAwXS5jb25jYXQoYXJnTmFtZXMuY29uY2F0KGAke2V4cHJlc3Npb259ID0gZXhwcmVzc2lvblZhbHVlO2ApKSkoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZhbEV4cHJlc3Npb24oZXhwcmVzc2lvbjogc3RyaW5nIHwgRnVuY3Rpb24gfCBib29sZWFuLCB0aGlzQXJnOiBhbnksIGFyZ1ZhbDogYW55W10pOiBhbnkge1xuICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24uYXBwbHkodGhpc0FyZywgYXJnVmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbiA/IHRydWUgOiBmYWxzZTtcbiAgfVxufVxuIl19