/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { FormArray } from '@angular/forms';
import { FieldType } from './field.type';
import { clone, isNullOrUndefined } from '../utils';
/**
 * @abstract
 */
export class FieldArrayType extends FieldType {
    /**
     * @param {?} builder
     */
    constructor(builder) {
        super();
        this.builder = builder;
    }
    /**
     * @param {?=} i
     * @param {?=} initialModel
     * @return {?}
     */
    add(i, initialModel) {
        i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;
        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
        this.field.fieldGroup.splice(i, 0, Object.assign({}, clone(this.field.fieldArray)));
        this.field.fieldGroup.forEach((field, index) => {
            field.key = `${index}`;
        });
        const /** @type {?} */ form = new FormArray([]);
        this.builder.buildForm(form, [this.field.fieldGroup[i]], this.model, this.options);
        this.formControl.insert(i, form.at(0));
        (/** @type {?} */ (this.options)).resetTrackModelChanges();
    }
    /**
     * @param {?} i
     * @return {?}
     */
    remove(i) {
        this.formControl.removeAt(i);
        this.field.fieldGroup.splice(i, 1);
        this.field.fieldGroup.forEach((f, index) => f.key = `${index}`);
        this.model.splice(i, 1);
        (/** @type {?} */ (this.options)).resetTrackModelChanges();
    }
}
function FieldArrayType_tsickle_Closure_declarations() {
    /** @type {?} */
    FieldArrayType.prototype.formControl;
    /** @type {?} */
    FieldArrayType.prototype.builder;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtYXJyYXkudHlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvIiwic291cmNlcyI6WyJsaWIvdGVtcGxhdGVzL2ZpZWxkLWFycmF5LnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7QUFHcEQsTUFBTSxxQkFBK0IsU0FBUSxTQUFTOzs7O0lBR3JELFlBQW9CLE9BQTBCO1FBQzNDLEtBQUssRUFBRSxDQUFDO1FBRFMsWUFBTyxHQUFQLE9BQU8sQ0FBbUI7S0FFNUM7Ozs7OztJQUVELEdBQUcsQ0FBQyxDQUFVLEVBQUUsWUFBa0I7UUFDaEMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1RCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUcsQ0FBQztRQUV4RSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDN0MsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssRUFBRSxDQUFDO1NBQ3hCLENBQUMsQ0FBQztRQUVILHVCQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25GLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkMsbUJBQU8sSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLHNCQUFzQixFQUFFLENBQUM7S0FDL0M7Ozs7O0lBRUQsTUFBTSxDQUFDLENBQVM7UUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixtQkFBTyxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztLQUMvQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUFycmF5IH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi9maWVsZC50eXBlJztcbmltcG9ydCB7IGNsb25lLCBpc051bGxPclVuZGVmaW5lZCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IEZvcm1seUZvcm1CdWlsZGVyIH0gZnJvbSAnLi4vc2VydmljZXMvZm9ybWx5LmZvcm0uYnVpbGRlcic7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGaWVsZEFycmF5VHlwZSBleHRlbmRzIEZpZWxkVHlwZSB7XG4gIGZvcm1Db250cm9sOiBGb3JtQXJyYXk7XG5cbiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJ1aWxkZXI6IEZvcm1seUZvcm1CdWlsZGVyKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGFkZChpPzogbnVtYmVyLCBpbml0aWFsTW9kZWw/OiBhbnkpIHtcbiAgICBpID0gaXNOdWxsT3JVbmRlZmluZWQoaSkgPyB0aGlzLmZpZWxkLmZpZWxkR3JvdXAubGVuZ3RoIDogaTtcblxuICAgIHRoaXMubW9kZWwuc3BsaWNlKGksIDAsIGluaXRpYWxNb2RlbCA/IGNsb25lKGluaXRpYWxNb2RlbCkgOiB1bmRlZmluZWQpO1xuICAgIHRoaXMuZmllbGQuZmllbGRHcm91cC5zcGxpY2UoaSwgMCwgeyAuLi5jbG9uZSh0aGlzLmZpZWxkLmZpZWxkQXJyYXkpIH0pO1xuXG4gICAgdGhpcy5maWVsZC5maWVsZEdyb3VwLmZvckVhY2goKGZpZWxkLCBpbmRleCkgPT4ge1xuICAgICAgZmllbGQua2V5ID0gYCR7aW5kZXh9YDtcbiAgICB9KTtcblxuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybUFycmF5KFtdKTtcbiAgICB0aGlzLmJ1aWxkZXIuYnVpbGRGb3JtKGZvcm0sIFt0aGlzLmZpZWxkLmZpZWxkR3JvdXBbaV1dLCB0aGlzLm1vZGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuZm9ybUNvbnRyb2wuaW5zZXJ0KGksIGZvcm0uYXQoMCkpO1xuXG4gICAgKDxhbnk+IHRoaXMub3B0aW9ucykucmVzZXRUcmFja01vZGVsQ2hhbmdlcygpO1xuICB9XG5cbiAgcmVtb3ZlKGk6IG51bWJlcikge1xuICAgIHRoaXMuZm9ybUNvbnRyb2wucmVtb3ZlQXQoaSk7XG4gICAgdGhpcy5maWVsZC5maWVsZEdyb3VwLnNwbGljZShpLCAxKTtcbiAgICB0aGlzLmZpZWxkLmZpZWxkR3JvdXAuZm9yRWFjaCgoZiwgaW5kZXgpID0+IGYua2V5ID0gYCR7aW5kZXh9YCk7XG4gICAgdGhpcy5tb2RlbC5zcGxpY2UoaSwgMSk7XG4gICAgKDxhbnk+IHRoaXMub3B0aW9ucykucmVzZXRUcmFja01vZGVsQ2hhbmdlcygpO1xuICB9XG59XG4iXX0=