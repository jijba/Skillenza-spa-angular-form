/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FormGroup, FormArray, FormControl, AbstractControl, Validators } from '@angular/forms';
import { FormlyConfig } from './formly.config';
import { FORMLY_VALIDATORS, evalStringExpression, evalExpressionValueSetter, getFieldId, isObject, isNullOrUndefined, clone, assignModelToFields } from './../utils';
import { getKeyPath, isFunction } from '../utils';
import { FormlyFormExpression } from './formly.form.expression';
export class FormlyFormBuilder {
    /**
     * @param {?} formlyConfig
     * @param {?} formlyFormExpression
     */
    constructor(formlyConfig, formlyFormExpression) {
        this.formlyConfig = formlyConfig;
        this.formlyFormExpression = formlyFormExpression;
        this.formId = 0;
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    buildForm(form, fields = [], model, options) {
        let /** @type {?} */ fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        if (!Array.isArray(fieldTransforms)) {
            fieldTransforms = [fieldTransforms];
        }
        fieldTransforms.forEach(fieldTransform => {
            if (fieldTransform) {
                fields = fieldTransform(fields, model, form, options);
                if (!fields) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
        assignModelToFields(fields, model);
        this._buildForm(form, fields, options);
        this.formlyFormExpression.checkFields(form, fields, model, options);
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} options
     * @return {?}
     */
    _buildForm(form, fields = [], options) {
        this.formId++;
        this.registerFormControls(form, fields, options);
    }
    /**
     * @param {?} form
     * @param {?} fields
     * @param {?} options
     * @return {?}
     */
    registerFormControls(form, fields, options) {
        fields.forEach((field, index) => {
            field.id = getFieldId(`formly_${this.formId}`, field, index);
            this.initFieldOptions(field);
            this.initFieldExpression(field, options);
            this.initFieldValidation(field);
            this.initFieldWrappers(field);
            this.initFieldAsyncValidation(field);
            if (field.key && field.type) {
                const /** @type {?} */ paths = getKeyPath({ key: field.key });
                let /** @type {?} */ rootForm = form, /** @type {?} */ rootModel = field.model;
                paths.forEach((path, index) => {
                    // FormGroup/FormArray only allow string value for path
                    const /** @type {?} */ formPath = path.toString();
                    // is last item
                    if (index === paths.length - 1) {
                        this.addFormControl(rootForm, field, rootModel, formPath);
                        if (field.fieldArray) {
                            field.fieldGroup = [];
                            field.model.forEach((m, i) => field.fieldGroup.push(Object.assign({}, clone(field.fieldArray), { key: `${i}` })));
                            assignModelToFields(field.fieldGroup, rootModel);
                        }
                    }
                    else {
                        let /** @type {?} */ nestedForm = /** @type {?} */ (rootForm.get(formPath));
                        if (!nestedForm) {
                            nestedForm = new FormGroup({});
                            this.addControl(rootForm, formPath, nestedForm);
                        }
                        if (!rootModel[path]) {
                            rootModel[path] = typeof path === 'string' ? {} : [];
                        }
                        rootForm = nestedForm;
                        rootModel = rootModel[path];
                    }
                });
            }
            if (field.fieldGroup) {
                if (!field.type) {
                    field.type = 'formly-group';
                }
                // if `hideExpression` is set in that case we have to deal
                // with toggle FormControl for each field in fieldGroup separately
                if (field.hideExpression) {
                    field.fieldGroup.forEach(f => {
                        let /** @type {?} */ hideExpression = f.hideExpression || (() => false);
                        if (typeof hideExpression === 'string') {
                            hideExpression = evalStringExpression(hideExpression, ['model', 'formState']);
                        }
                        f.hideExpression = (model, formState) => field.hide || hideExpression(model, formState);
                    });
                }
                if (field.key) {
                    this.addFormControl(form, field, { [field.key]: field.fieldArray ? [] : {} }, field.key);
                    this._buildForm(/** @type {?} */ (field.formControl), field.fieldGroup, options);
                }
                else {
                    this._buildForm(form, field.fieldGroup, options);
                }
            }
        });
    }
    /**
     * @param {?} field
     * @param {?} options
     * @return {?}
     */
    initFieldExpression(field, options) {
        if (field.expressionProperties) {
            for (const /** @type {?} */ key in /** @type {?} */ (field.expressionProperties)) {
                if (typeof field.expressionProperties[key] === 'string' || isFunction(field.expressionProperties[key])) {
                    // cache built expression
                    field.expressionProperties[key] = {
                        expression: isFunction(field.expressionProperties[key]) ? field.expressionProperties[key] : evalStringExpression(field.expressionProperties[key], ['model', 'formState']),
                        expressionValueSetter: evalExpressionValueSetter(`field.${key}`, ['expressionValue', 'model', 'field']),
                    };
                }
            }
        }
        if (field.hideExpression) {
            // delete hide value in order to force re-evaluate it in FormlyFormExpression.
            delete field.hide;
            if (typeof field.hideExpression === 'string') {
                // cache built expression
                field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldOptions(field) {
        field.templateOptions = field.templateOptions || {};
        if (field.type) {
            this.formlyConfig.getMergedField(field);
            if (field.key) {
                field.templateOptions = Object.assign({
                    label: '',
                    placeholder: '',
                    focus: false,
                }, field.templateOptions);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldAsyncValidation(field) {
        const /** @type {?} */ validators = [];
        if (field.asyncValidators) {
            for (const /** @type {?} */ validatorName in field.asyncValidators) {
                if (validatorName !== 'validation') {
                    let /** @type {?} */ validator = field.asyncValidators[validatorName];
                    if (isObject(validator)) {
                        validator = validator.expression;
                    }
                    validators.push((control) => new Promise((resolve) => {
                        return validator(control, field).then((result) => {
                            resolve(result ? null : { [validatorName]: true });
                        });
                    }));
                }
            }
        }
        if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {
            field.asyncValidators.validation
                .forEach((validator) => validators.push(this.wrapNgValidatorFn(field, validator)));
        }
        if (validators.length) {
            if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {
                field.asyncValidators.validation = Validators.composeAsync([field.asyncValidators.validation, ...validators]);
            }
            else {
                field.asyncValidators = {
                    validation: Validators.composeAsync(validators),
                };
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldValidation(field) {
        const /** @type {?} */ validators = [];
        FORMLY_VALIDATORS
            .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt))
            || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))
            .forEach((opt) => {
            validators.push((control) => {
                if (field.templateOptions[opt] === false) {
                    return null;
                }
                return this.getValidation(opt, field.templateOptions[opt])(control);
            });
        });
        if (field.validators) {
            for (const /** @type {?} */ validatorName in field.validators) {
                if (validatorName !== 'validation') {
                    let /** @type {?} */ validator = field.validators[validatorName];
                    if (isObject(validator)) {
                        validator = validator.expression;
                    }
                    validators.push((control) => validator(control, field) ? null : { [validatorName]: true });
                }
            }
        }
        if (field.validators && Array.isArray(field.validators.validation)) {
            field.validators.validation
                .forEach((validator) => validators.push(this.wrapNgValidatorFn(field, validator)));
        }
        if (validators.length) {
            if (field.validators && !Array.isArray(field.validators.validation)) {
                field.validators.validation = Validators.compose([field.validators.validation, ...validators]);
            }
            else {
                field.validators = {
                    validation: Validators.compose(validators),
                };
            }
        }
    }
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    addFormControl(form, field, model, path) {
        let /** @type {?} */ control;
        const /** @type {?} */ validators = field.validators ? field.validators.validation : undefined, /** @type {?} */
        asyncValidators = field.asyncValidators ? field.asyncValidators.validation : undefined, /** @type {?} */
        updateOn = field.modelOptions && field.modelOptions.updateOn ?
            field.modelOptions.updateOn : undefined;
        const /** @type {?} */ abstractControlOptions = /** @type {?} */ ({
            validators,
            asyncValidators,
            updateOn,
        });
        if (field.formControl instanceof AbstractControl || form.get(path)) {
            control = field.formControl || form.get(path);
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
        }
        else if (field.component && field.component.createControl) {
            control = field.component.createControl(model[path], field);
        }
        else if (field.fieldGroup && field.key && field.key === path && !field.fieldArray) {
            control = new FormGroup(model[path], abstractControlOptions);
        }
        else if (field.fieldArray && field.key && field.key === path) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: (function () { return !this.formControl.enabled; }).bind(field),
                set: (function (value) {
                    if (this.expressionProperties && this.expressionProperties.hasOwnProperty('templateOptions.disabled')) {
                        this.expressionProperties['templateOptions.disabled'].expressionValue = value;
                    }
                    value ? this.formControl.disable() : this.formControl.enable();
                }).bind(field),
                enumerable: true,
                configurable: true,
            });
        }
        this.addControl(form, path, control, field);
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} formControl
     * @param {?=} field
     * @return {?}
     */
    addControl(form, key, formControl, field) {
        if (field) {
            field.formControl = formControl;
        }
        if (form instanceof FormArray) {
            if (form.at(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
        else {
            if (form.get(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
    }
    /**
     * @param {?} opt
     * @param {?} value
     * @return {?}
     */
    getValidation(opt, value) {
        switch (opt) {
            case 'required':
                return Validators.required;
            case 'pattern':
                return Validators.pattern(value);
            case 'minLength':
                return Validators.minLength(value);
            case 'maxLength':
                return Validators.maxLength(value);
            case 'min':
                return Validators.min(value);
            case 'max':
                return Validators.max(value);
        }
    }
    /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    wrapNgValidatorFn(field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return (control) => (/** @type {?} */ (validator))(control, field);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldWrappers(field) {
        const /** @type {?} */ templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        if (field.templateOptions) {
            this.mergeTemplateManipulators(templateManipulators, field.templateOptions.templateManipulators);
        }
        this.mergeTemplateManipulators(templateManipulators, this.formlyConfig.templateManipulators);
        const /** @type {?} */ preWrappers = templateManipulators.preWrapper.map(m => m(field)).filter(type => type), /** @type {?} */
        postWrappers = templateManipulators.postWrapper.map(m => m(field)).filter(type => type);
        if (!field.wrappers) {
            field.wrappers = [];
        }
        field.wrappers = [...preWrappers, ...(field.wrappers || []), ...postWrappers];
    }
    /**
     * @param {?} source
     * @param {?} target
     * @return {?}
     */
    mergeTemplateManipulators(source, target) {
        target = target || {};
        if (target.preWrapper) {
            source.preWrapper = source.preWrapper.concat(target.preWrapper);
        }
        if (target.postWrapper) {
            source.postWrapper = source.postWrapper.concat(target.postWrapper);
        }
        return source;
    }
}
FormlyFormBuilder.decorators = [
    { type: Injectable },
];
/** @nocollapse */
FormlyFormBuilder.ctorParameters = () => [
    { type: FormlyConfig },
    { type: FormlyFormExpression }
];
function FormlyFormBuilder_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyFormBuilder.prototype.formId;
    /** @type {?} */
    FormlyFormBuilder.prototype.formlyConfig;
    /** @type {?} */
    FormlyFormBuilder.prototype.formlyFormExpression;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmZvcm0uYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZm9ybWx5LmZvcm0uYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBMEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4SCxPQUFPLEVBQUUsWUFBWSxFQUEwQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVySyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUdoRSxNQUFNOzs7OztJQUdKLFlBQ1UsY0FDQTtRQURBLGlCQUFZLEdBQVosWUFBWTtRQUNaLHlCQUFvQixHQUFwQixvQkFBb0I7c0JBSmIsQ0FBQztLQUtkOzs7Ozs7OztJQUVKLFNBQVMsQ0FBQyxJQUEyQixFQUFFLFNBQThCLEVBQUUsRUFBRSxLQUFVLEVBQUUsT0FBMEI7UUFDN0cscUJBQUksZUFBZSxHQUFHLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDckcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxlQUFlLEdBQUcsQ0FBQyxlQUFl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U0FDcEU7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDOzs7O1lBL1ZqQixVQUFVOzs7O1lBTkYsWUFBWTtZQUlaLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUFycmF5LCBGb3JtQ29udHJvbCwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0b3JzLCBBYnN0cmFjdENvbnRyb2xPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybWx5Q29uZmlnLCBGaWVsZFZhbGlkYXRvckZuLCBUZW1wbGF0ZU1hbmlwdWxhdG9ycyB9IGZyb20gJy4vZm9ybWx5LmNvbmZpZyc7XG5pbXBvcnQgeyBGT1JNTFlfVkFMSURBVE9SUywgZXZhbFN0cmluZ0V4cHJlc3Npb24sIGV2YWxFeHByZXNzaW9uVmFsdWVTZXR0ZXIsIGdldEZpZWxkSWQsIGlzT2JqZWN0LCBpc051bGxPclVuZGVmaW5lZCwgY2xvbmUsIGFzc2lnbk1vZGVsVG9GaWVsZHMgfSBmcm9tICcuLy4uL3V0aWxzJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnLCBGb3JtbHlGb3JtT3B0aW9ucyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5pbXBvcnQgeyBnZXRLZXlQYXRoLCBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgRm9ybWx5Rm9ybUV4cHJlc3Npb24gfSBmcm9tICcuL2Zvcm1seS5mb3JtLmV4cHJlc3Npb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRm9ybWx5Rm9ybUJ1aWxkZXIge1xuICBwcml2YXRlIGZvcm1JZCA9IDA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBmb3JtbHlDb25maWc6IEZvcm1seUNvbmZpZyxcbiAgICBwcml2YXRlIGZvcm1seUZvcm1FeHByZXNzaW9uOiBGb3JtbHlGb3JtRXhwcmVzc2lvbixcbiAgKSB7fVxuXG4gIGJ1aWxkRm9ybShmb3JtOiBGb3JtR3JvdXAgfCBGb3JtQXJyYXksIGZpZWxkczogRm9ybWx5RmllbGRDb25maWdbXSA9IFtdLCBtb2RlbDogYW55LCBvcHRpb25zOiBGb3JtbHlGb3JtT3B0aW9ucykge1xuICAgIGxldCBmaWVsZFRyYW5zZm9ybXMgPSAob3B0aW9ucyAmJiBvcHRpb25zLmZpZWxkVHJhbnNmb3JtKSB8fCB0aGlzLmZvcm1seUNvbmZpZy5leHRyYXMuZmllbGRUcmFuc2Zvcm07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpZWxkVHJhbnNmb3JtcykpIHtcbiAgICAgIGZpZWxkVHJhbnNmb3JtcyA9IFtmaWVsZFRyYW5zZm9ybXNdO1xuICAgIH1cblxuICAgIGZpZWxkVHJhbnNmb3Jtcy5mb3JFYWNoKGZpZWxkVHJhbnNmb3JtID0+IHtcbiAgICAgIGlmIChmaWVsZFRyYW5zZm9ybSkge1xuICAgICAgICBmaWVsZHMgPSBmaWVsZFRyYW5zZm9ybShmaWVsZHMsIG1vZGVsLCBmb3JtLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKCFmaWVsZHMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpZWxkVHJhbnNmb3JtIG11c3QgcmV0dXJuIGFuIGFycmF5IG9mIGZpZWxkcycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhc3NpZ25Nb2RlbFRvRmllbGRzKGZpZWxkcywgbW9kZWwpO1xuICAgIHRoaXMuX2J1aWxkRm9ybShmb3JtLCBmaWVsZHMsIG9wdGlvbnMpO1xuICAgIHRoaXMuZm9ybWx5Rm9ybUV4cHJlc3Npb24uY2hlY2tGaWVsZHMoZm9ybSwgZmllbGRzLCBtb2RlbCwgb3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIF9idWlsZEZvcm0oZm9ybTogRm9ybUdyb3VwIHwgRm9ybUFycmF5LCBmaWVsZHM6IEZvcm1seUZpZWxkQ29uZmlnW10gPSBbXSwgb3B0aW9uczogRm9ybWx5Rm9ybU9wdGlvbnMpIHtcbiAgICB0aGlzLmZvcm1JZCsrO1xuICAgIHRoaXMucmVnaXN0ZXJGb3JtQ29udHJvbHMoZm9ybSwgZmllbGRzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJGb3JtQ29udHJvbHMoZm9ybTogRm9ybUdyb3VwIHwgRm9ybUFycmF5LCBmaWVsZHM6IEZvcm1seUZpZWxkQ29uZmlnW10sIG9wdGlvbnM6IEZvcm1seUZvcm1PcHRpb25zKSB7XG4gICAgZmllbGRzLmZvckVhY2goKGZpZWxkLCBpbmRleCkgPT4ge1xuICAgICAgZmllbGQuaWQgPSBnZXRGaWVsZElkKGBmb3JtbHlfJHt0aGlzLmZvcm1JZH1gLCBmaWVsZCwgaW5kZXgpO1xuICAgICAgdGhpcy5pbml0RmllbGRPcHRpb25zKGZpZWxkKTtcbiAgICAgIHRoaXMuaW5pdEZpZWxkRXhwcmVzc2lvbihmaWVsZCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmluaXRGaWVsZFZhbGlkYXRpb24oZmllbGQpO1xuICAgICAgdGhpcy5pbml0RmllbGRXcmFwcGVycyhmaWVsZCk7XG4gICAgICB0aGlzLmluaXRGaWVsZEFzeW5jVmFsaWRhdGlvbihmaWVsZCk7XG5cbiAgICAgIGlmIChmaWVsZC5rZXkgJiYgZmllbGQudHlwZSkge1xuICAgICAgICBjb25zdCBwYXRocyA9IGdldEtleVBhdGgoeyBrZXk6IGZpZWxkLmtleSB9KTtcbiAgICAgICAgbGV0IHJvb3RGb3JtID0gZm9ybSwgcm9vdE1vZGVsID0gZmllbGQubW9kZWw7XG4gICAgICAgIHBhdGhzLmZvckVhY2goKHBhdGgsIGluZGV4KSA9PiB7XG4gICAgICAgICAgLy8gRm9ybUdyb3VwL0Zvcm1BcnJheSBvbmx5IGFsbG93IHN0cmluZyB2YWx1ZSBmb3IgcGF0aFxuICAgICAgICAgIGNvbnN0IGZvcm1QYXRoID0gcGF0aC50b1N0cmluZygpO1xuICAgICAgICAgIC8vIGlzIGxhc3QgaXRlbVxuICAgICAgICAgIGlmIChpbmRleCA9PT0gcGF0aHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5hZGRGb3JtQ29udHJvbChyb290Rm9ybSwgZmllbGQsIHJvb3RNb2RlbCwgZm9ybVBhdGgpO1xuICAgICAgICAgICAgaWYgKGZpZWxkLmZpZWxkQXJyYXkpIHtcbiAgICAgICAgICAgICAgZmllbGQuZmllbGRHcm91cCA9IFtdO1xuICAgICAgICAgICAgICBmaWVsZC5tb2RlbC5mb3JFYWNoKChtOiBhbnksIGk6IG51bWJlcikgPT4gZmllbGQuZmllbGRHcm91cC5wdXNoKFxuICAgICAgICAgICAgICAgIHsgLi4uY2xvbmUoZmllbGQuZmllbGRBcnJheSksIGtleTogYCR7aX1gIH0sXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICBhc3NpZ25Nb2RlbFRvRmllbGRzKGZpZWxkLmZpZWxkR3JvdXAsIHJvb3RNb2RlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5lc3RlZEZvcm0gPSByb290Rm9ybS5nZXQoZm9ybVBhdGgpIGFzIEZvcm1Hcm91cDtcbiAgICAgICAgICAgIGlmICghbmVzdGVkRm9ybSkge1xuICAgICAgICAgICAgICBuZXN0ZWRGb3JtID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gICAgICAgICAgICAgIHRoaXMuYWRkQ29udHJvbChyb290Rm9ybSwgZm9ybVBhdGgsIG5lc3RlZEZvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyb290TW9kZWxbcGF0aF0pIHtcbiAgICAgICAgICAgICAgcm9vdE1vZGVsW3BhdGhdID0gdHlwZW9mIHBhdGggPT09ICdzdHJpbmcnID8ge30gOiBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcm9vdEZvcm0gPSBuZXN0ZWRGb3JtO1xuICAgICAgICAgICAgcm9vdE1vZGVsID0gcm9vdE1vZGVsW3BhdGhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZC5maWVsZEdyb3VwKSB7XG4gICAgICAgIGlmICghZmllbGQudHlwZSkge1xuICAgICAgICAgIGZpZWxkLnR5cGUgPSAnZm9ybWx5LWdyb3VwJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGBoaWRlRXhwcmVzc2lvbmAgaXMgc2V0IGluIHRoYXQgY2FzZSB3ZSBoYXZlIHRvIGRlYWxcbiAgICAgICAgLy8gd2l0aCB0b2dnbGUgRm9ybUNvbnRyb2wgZm9yIGVhY2ggZmllbGQgaW4gZmllbGRHcm91cCBzZXBhcmF0ZWx5XG4gICAgICAgIGlmIChmaWVsZC5oaWRlRXhwcmVzc2lvbikge1xuICAgICAgICAgIGZpZWxkLmZpZWxkR3JvdXAuZm9yRWFjaChmID0+IHtcbiAgICAgICAgICAgIGxldCBoaWRlRXhwcmVzc2lvbjogYW55ID0gZi5oaWRlRXhwcmVzc2lvbiB8fCAoKCkgPT4gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBoaWRlRXhwcmVzc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgaGlkZUV4cHJlc3Npb24gPSBldmFsU3RyaW5nRXhwcmVzc2lvbihoaWRlRXhwcmVzc2lvbiwgWydtb2RlbCcsICdmb3JtU3RhdGUnXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGYuaGlkZUV4cHJlc3Npb24gPSAobW9kZWwsIGZvcm1TdGF0ZSkgPT4gZmllbGQuaGlkZSB8fCBoaWRlRXhwcmVzc2lvbihtb2RlbCwgZm9ybVN0YXRlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWVsZC5rZXkpIHtcbiAgICAgICAgICB0aGlzLmFkZEZvcm1Db250cm9sKGZvcm0sIGZpZWxkLCB7IFtmaWVsZC5rZXldOiBmaWVsZC5maWVsZEFycmF5ID8gW10gOiB7fSB9LCBmaWVsZC5rZXkpO1xuICAgICAgICAgIHRoaXMuX2J1aWxkRm9ybShmaWVsZC5mb3JtQ29udHJvbCBhcyBGb3JtR3JvdXAsIGZpZWxkLmZpZWxkR3JvdXAsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2J1aWxkRm9ybShmb3JtLCBmaWVsZC5maWVsZEdyb3VwLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0RmllbGRFeHByZXNzaW9uKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZywgb3B0aW9uczogRm9ybWx5Rm9ybU9wdGlvbnMpIHtcbiAgICBpZiAoZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXMpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGZpZWxkLmV4cHJlc3Npb25Qcm9wZXJ0aWVzIGFzIGFueSkge1xuICAgICAgICBpZiAodHlwZW9mIGZpZWxkLmV4cHJlc3Npb25Qcm9wZXJ0aWVzW2tleV0gPT09ICdzdHJpbmcnIHx8IGlzRnVuY3Rpb24oZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXNba2V5XSkpIHtcbiAgICAgICAgICAvLyBjYWNoZSBidWlsdCBleHByZXNzaW9uXG4gICAgICAgICAgZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXNba2V5XSA9IHtcbiAgICAgICAgICAgIGV4cHJlc3Npb246IGlzRnVuY3Rpb24oZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXNba2V5XSkgPyBmaWVsZC5leHByZXNzaW9uUHJvcGVydGllc1trZXldIDogZXZhbFN0cmluZ0V4cHJlc3Npb24oZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXNba2V5XSwgWydtb2RlbCcsICdmb3JtU3RhdGUnXSksXG4gICAgICAgICAgICBleHByZXNzaW9uVmFsdWVTZXR0ZXI6IGV2YWxFeHByZXNzaW9uVmFsdWVTZXR0ZXIoXG4gICAgICAgICAgICAgIGBmaWVsZC4ke2tleX1gLFxuICAgICAgICAgICAgICBbJ2V4cHJlc3Npb25WYWx1ZScsICdtb2RlbCcsICdmaWVsZCddLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLmhpZGVFeHByZXNzaW9uKSB7XG4gICAgICAvLyBkZWxldGUgaGlkZSB2YWx1ZSBpbiBvcmRlciB0byBmb3JjZSByZS1ldmFsdWF0ZSBpdCBpbiBGb3JtbHlGb3JtRXhwcmVzc2lvbi5cbiAgICAgIGRlbGV0ZSBmaWVsZC5oaWRlO1xuICAgICAgaWYgKHR5cGVvZiBmaWVsZC5oaWRlRXhwcmVzc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gY2FjaGUgYnVpbHQgZXhwcmVzc2lvblxuICAgICAgICBmaWVsZC5oaWRlRXhwcmVzc2lvbiA9IGV2YWxTdHJpbmdFeHByZXNzaW9uKGZpZWxkLmhpZGVFeHByZXNzaW9uLCBbJ21vZGVsJywgJ2Zvcm1TdGF0ZSddKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRGaWVsZE9wdGlvbnMoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgZmllbGQudGVtcGxhdGVPcHRpb25zID0gZmllbGQudGVtcGxhdGVPcHRpb25zIHx8IHt9O1xuICAgIGlmIChmaWVsZC50eXBlKSB7XG4gICAgICB0aGlzLmZvcm1seUNvbmZpZy5nZXRNZXJnZWRGaWVsZChmaWVsZCk7XG4gICAgICBpZiAoZmllbGQua2V5KSB7XG4gICAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgIGxhYmVsOiAnJyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgZm9jdXM6IGZhbHNlLFxuICAgICAgICB9LCBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaW5pdEZpZWxkQXN5bmNWYWxpZGF0aW9uKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZykge1xuICAgIGNvbnN0IHZhbGlkYXRvcnM6IGFueSA9IFtdO1xuICAgIGlmIChmaWVsZC5hc3luY1ZhbGlkYXRvcnMpIHtcbiAgICAgIGZvciAoY29uc3QgdmFsaWRhdG9yTmFtZSBpbiBmaWVsZC5hc3luY1ZhbGlkYXRvcnMpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRvck5hbWUgIT09ICd2YWxpZGF0aW9uJykge1xuICAgICAgICAgIGxldCB2YWxpZGF0b3IgPSBmaWVsZC5hc3luY1ZhbGlkYXRvcnNbdmFsaWRhdG9yTmFtZV07XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbGlkYXRvcikpIHtcbiAgICAgICAgICAgIHZhbGlkYXRvciA9IHZhbGlkYXRvci5leHByZXNzaW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbGlkYXRvcnMucHVzaCgoY29udHJvbDogRm9ybUNvbnRyb2wpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdG9yKGNvbnRyb2wsIGZpZWxkKS50aGVuKChyZXN1bHQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQgPyBudWxsIDogeyBbdmFsaWRhdG9yTmFtZV06IHRydWUgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmllbGQuYXN5bmNWYWxpZGF0b3JzICYmIEFycmF5LmlzQXJyYXkoZmllbGQuYXN5bmNWYWxpZGF0b3JzLnZhbGlkYXRpb24pKSB7XG4gICAgICBmaWVsZC5hc3luY1ZhbGlkYXRvcnMudmFsaWRhdGlvblxuICAgICAgICAuZm9yRWFjaCgodmFsaWRhdG9yOiBhbnkpID0+IHZhbGlkYXRvcnMucHVzaCh0aGlzLndyYXBOZ1ZhbGlkYXRvckZuKGZpZWxkLCB2YWxpZGF0b3IpKSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbGlkYXRvcnMubGVuZ3RoKSB7XG4gICAgICBpZiAoZmllbGQuYXN5bmNWYWxpZGF0b3JzICYmICFBcnJheS5pc0FycmF5KGZpZWxkLmFzeW5jVmFsaWRhdG9ycy52YWxpZGF0aW9uKSkge1xuICAgICAgICBmaWVsZC5hc3luY1ZhbGlkYXRvcnMudmFsaWRhdGlvbiA9IFZhbGlkYXRvcnMuY29tcG9zZUFzeW5jKFtmaWVsZC5hc3luY1ZhbGlkYXRvcnMudmFsaWRhdGlvbiwgLi4udmFsaWRhdG9yc10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGQuYXN5bmNWYWxpZGF0b3JzID0ge1xuICAgICAgICAgIHZhbGlkYXRpb246IFZhbGlkYXRvcnMuY29tcG9zZUFzeW5jKHZhbGlkYXRvcnMpLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaW5pdEZpZWxkVmFsaWRhdGlvbihmaWVsZDogRm9ybWx5RmllbGRDb25maWcpIHtcbiAgICBjb25zdCB2YWxpZGF0b3JzOiBhbnkgPSBbXTtcbiAgICBGT1JNTFlfVkFMSURBVE9SU1xuICAgICAgLmZpbHRlcihvcHQgPT4gKGZpZWxkLnRlbXBsYXRlT3B0aW9ucyAmJiBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSlcbiAgICAgICAgfHwgKGZpZWxkLmV4cHJlc3Npb25Qcm9wZXJ0aWVzICYmIGZpZWxkLmV4cHJlc3Npb25Qcm9wZXJ0aWVzW2B0ZW1wbGF0ZU9wdGlvbnMuJHtvcHR9YF0pLFxuICAgICAgKVxuICAgICAgLmZvckVhY2goKG9wdCkgPT4ge1xuICAgICAgICB2YWxpZGF0b3JzLnB1c2goKGNvbnRyb2w6IEZvcm1Db250cm9sKSA9PiB7XG4gICAgICAgICAgaWYgKGZpZWxkLnRlbXBsYXRlT3B0aW9uc1tvcHRdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsaWRhdGlvbihvcHQsIGZpZWxkLnRlbXBsYXRlT3B0aW9uc1tvcHRdKShjb250cm9sKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIGlmIChmaWVsZC52YWxpZGF0b3JzKSB7XG4gICAgICBmb3IgKGNvbnN0IHZhbGlkYXRvck5hbWUgaW4gZmllbGQudmFsaWRhdG9ycykge1xuICAgICAgICBpZiAodmFsaWRhdG9yTmFtZSAhPT0gJ3ZhbGlkYXRpb24nKSB7XG4gICAgICAgICAgbGV0IHZhbGlkYXRvciA9IGZpZWxkLnZhbGlkYXRvcnNbdmFsaWRhdG9yTmFtZV07XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbGlkYXRvcikpIHtcbiAgICAgICAgICAgIHZhbGlkYXRvciA9IHZhbGlkYXRvci5leHByZXNzaW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbGlkYXRvcnMucHVzaCgoY29udHJvbDogRm9ybUNvbnRyb2wpID0+IHZhbGlkYXRvcihjb250cm9sLCBmaWVsZCkgPyBudWxsIDogeyBbdmFsaWRhdG9yTmFtZV06IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsaWRhdG9ycyAmJiBBcnJheS5pc0FycmF5KGZpZWxkLnZhbGlkYXRvcnMudmFsaWRhdGlvbikpIHtcbiAgICAgIGZpZWxkLnZhbGlkYXRvcnMudmFsaWRhdGlvblxuICAgICAgICAuZm9yRWFjaCgodmFsaWRhdG9yOiBhbnkpID0+IHZhbGlkYXRvcnMucHVzaCh0aGlzLndyYXBOZ1ZhbGlkYXRvckZuKGZpZWxkLCB2YWxpZGF0b3IpKSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbGlkYXRvcnMubGVuZ3RoKSB7XG4gICAgICBpZiAoZmllbGQudmFsaWRhdG9ycyAmJiAhQXJyYXkuaXNBcnJheShmaWVsZC52YWxpZGF0b3JzLnZhbGlkYXRpb24pKSB7XG4gICAgICAgIGZpZWxkLnZhbGlkYXRvcnMudmFsaWRhdGlvbiA9IFZhbGlkYXRvcnMuY29tcG9zZShbZmllbGQudmFsaWRhdG9ycy52YWxpZGF0aW9uLCAuLi52YWxpZGF0b3JzXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZC52YWxpZGF0b3JzID0ge1xuICAgICAgICAgIHZhbGlkYXRpb246IFZhbGlkYXRvcnMuY29tcG9zZSh2YWxpZGF0b3JzKSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZEZvcm1Db250cm9sKGZvcm06IEZvcm1Hcm91cCB8IEZvcm1BcnJheSwgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBtb2RlbDogYW55LCBwYXRoOiBzdHJpbmcpIHtcbiAgICBsZXQgY29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIGNvbnN0IHZhbGlkYXRvcnMgPSBmaWVsZC52YWxpZGF0b3JzID8gZmllbGQudmFsaWRhdG9ycy52YWxpZGF0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgYXN5bmNWYWxpZGF0b3JzID0gZmllbGQuYXN5bmNWYWxpZGF0b3JzID8gZmllbGQuYXN5bmNWYWxpZGF0b3JzLnZhbGlkYXRpb24gOiB1bmRlZmluZWQsXG4gICAgICB1cGRhdGVPbiA9IGZpZWxkLm1vZGVsT3B0aW9ucyAmJiBmaWVsZC5tb2RlbE9wdGlvbnMudXBkYXRlT24gP1xuICAgICAgICBmaWVsZC5tb2RlbE9wdGlvbnMudXBkYXRlT24gOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgYWJzdHJhY3RDb250cm9sT3B0aW9ucyA9IHtcbiAgICAgIHZhbGlkYXRvcnMsXG4gICAgICBhc3luY1ZhbGlkYXRvcnMsXG4gICAgICB1cGRhdGVPbixcbiAgICB9IGFzIEFic3RyYWN0Q29udHJvbE9wdGlvbnM7XG5cbiAgICBpZiAoZmllbGQuZm9ybUNvbnRyb2wgaW5zdGFuY2VvZiBBYnN0cmFjdENvbnRyb2wgfHwgZm9ybS5nZXQocGF0aCkpIHtcbiAgICAgIGNvbnRyb2wgPSBmaWVsZC5mb3JtQ29udHJvbCB8fCBmb3JtLmdldChwYXRoKTtcbiAgICAgIGlmIChcbiAgICAgICAgIShpc051bGxPclVuZGVmaW5lZChjb250cm9sLnZhbHVlKSAmJiBpc051bGxPclVuZGVmaW5lZChtb2RlbFtwYXRoXSkpXG4gICAgICAgICYmIGNvbnRyb2wudmFsdWUgIT09IG1vZGVsW3BhdGhdXG4gICAgICAgICYmIGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtQ29udHJvbFxuICAgICAgKSB7XG4gICAgICAgIGNvbnRyb2wucGF0Y2hWYWx1ZShtb2RlbFtwYXRoXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWVsZC5jb21wb25lbnQgJiYgZmllbGQuY29tcG9uZW50LmNyZWF0ZUNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wgPSBmaWVsZC5jb21wb25lbnQuY3JlYXRlQ29udHJvbChtb2RlbFtwYXRoXSwgZmllbGQpO1xuICAgIH0gZWxzZSBpZiAoZmllbGQuZmllbGRHcm91cCAmJiBmaWVsZC5rZXkgJiYgZmllbGQua2V5ID09PSBwYXRoICYmICFmaWVsZC5maWVsZEFycmF5KSB7XG4gICAgICBjb250cm9sID0gbmV3IEZvcm1Hcm91cChtb2RlbFtwYXRoXSwgYWJzdHJhY3RDb250cm9sT3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChmaWVsZC5maWVsZEFycmF5ICYmIGZpZWxkLmtleSAmJiBmaWVsZC5rZXkgPT09IHBhdGgpIHtcbiAgICAgIGNvbnRyb2wgPSBuZXcgRm9ybUFycmF5KFtdLCBhYnN0cmFjdENvbnRyb2xPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udHJvbCA9IG5ldyBGb3JtQ29udHJvbChtb2RlbFtwYXRoXSwgYWJzdHJhY3RDb250cm9sT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgY29udHJvbC5kaXNhYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gUmVwbGFjZSBkZWNvcmF0ZWQgcHJvcGVydHkgd2l0aCBhIGdldHRlciB0aGF0IHJldHVybnMgdGhlIG9ic2VydmFibGUuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItcmVkdXgvc3RvcmUvYmxvYi9tYXN0ZXIvc3JjL2RlY29yYXRvcnMvc2VsZWN0LnRzI0w3OS1MODVcbiAgICBpZiAoZGVsZXRlIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLnRlbXBsYXRlT3B0aW9ucywgJ2Rpc2FibGVkJywge1xuICAgICAgICBnZXQ6IChmdW5jdGlvbiAoKSB7IHJldHVybiAhdGhpcy5mb3JtQ29udHJvbC5lbmFibGVkOyB9KS5iaW5kKGZpZWxkKSxcbiAgICAgICAgc2V0OiAoZnVuY3Rpb24gKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvblByb3BlcnRpZXMgJiYgdGhpcy5leHByZXNzaW9uUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndGVtcGxhdGVPcHRpb25zLmRpc2FibGVkJykpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblByb3BlcnRpZXNbJ3RlbXBsYXRlT3B0aW9ucy5kaXNhYmxlZCddLmV4cHJlc3Npb25WYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbHVlID8gdGhpcy5mb3JtQ29udHJvbC5kaXNhYmxlKCkgOiB0aGlzLmZvcm1Db250cm9sLmVuYWJsZSgpO1xuICAgICAgICB9KS5iaW5kKGZpZWxkKSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRDb250cm9sKGZvcm0sIHBhdGgsIGNvbnRyb2wsIGZpZWxkKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQ29udHJvbChmb3JtOiBGb3JtR3JvdXAgfCBGb3JtQXJyYXksIGtleTogc3RyaW5nIHwgbnVtYmVyLCBmb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sLCBmaWVsZD86IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgaWYgKGZpZWxkKSB7XG4gICAgICBmaWVsZC5mb3JtQ29udHJvbCA9IGZvcm1Db250cm9sO1xuICAgIH1cblxuICAgIGlmIChmb3JtIGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XG4gICAgICBpZiAoZm9ybS5hdCg8bnVtYmVyPiBrZXkpICE9PSBmb3JtQ29udHJvbCkge1xuICAgICAgICBmb3JtLnNldENvbnRyb2woPG51bWJlcj5rZXksIGZvcm1Db250cm9sKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZvcm0uZ2V0KDxzdHJpbmc+IGtleSkgIT09IGZvcm1Db250cm9sKSB7XG4gICAgICAgIGZvcm0uc2V0Q29udHJvbCg8c3RyaW5nPmtleSwgZm9ybUNvbnRyb2wpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0VmFsaWRhdGlvbihvcHQ6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIHN3aXRjaCAob3B0KSB7XG4gICAgICBjYXNlICdyZXF1aXJlZCc6XG4gICAgICAgIHJldHVybiBWYWxpZGF0b3JzLnJlcXVpcmVkO1xuICAgICAgY2FzZSAncGF0dGVybic6XG4gICAgICAgIHJldHVybiBWYWxpZGF0b3JzLnBhdHRlcm4odmFsdWUpO1xuICAgICAgY2FzZSAnbWluTGVuZ3RoJzpcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWluTGVuZ3RoKHZhbHVlKTtcbiAgICAgIGNhc2UgJ21heExlbmd0aCc6XG4gICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1heExlbmd0aCh2YWx1ZSk7XG4gICAgICBjYXNlICdtaW4nOlxuICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5taW4odmFsdWUpO1xuICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4KHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHdyYXBOZ1ZhbGlkYXRvckZuKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZywgdmFsaWRhdG9yOiBzdHJpbmcgfCBGaWVsZFZhbGlkYXRvckZuKSB7XG4gICAgdmFsaWRhdG9yID0gdHlwZW9mIHZhbGlkYXRvciA9PT0gJ3N0cmluZydcbiAgICA/IHRoaXMuZm9ybWx5Q29uZmlnLmdldFZhbGlkYXRvcih2YWxpZGF0b3IpLnZhbGlkYXRpb25cbiAgICA6IHZhbGlkYXRvcjtcblxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiAodmFsaWRhdG9yIGFzIEZpZWxkVmFsaWRhdG9yRm4pKGNvbnRyb2wsIGZpZWxkKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdEZpZWxkV3JhcHBlcnMoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgY29uc3QgdGVtcGxhdGVNYW5pcHVsYXRvcnM6IFRlbXBsYXRlTWFuaXB1bGF0b3JzID0ge1xuICAgICAgcHJlV3JhcHBlcjogW10sXG4gICAgICBwb3N0V3JhcHBlcjogW10sXG4gICAgfTtcblxuICAgIGlmIChmaWVsZC50ZW1wbGF0ZU9wdGlvbnMpIHtcbiAgICAgIHRoaXMubWVyZ2VUZW1wbGF0ZU1hbmlwdWxhdG9ycyh0ZW1wbGF0ZU1hbmlwdWxhdG9ycywgZmllbGQudGVtcGxhdGVPcHRpb25zLnRlbXBsYXRlTWFuaXB1bGF0b3JzKTtcbiAgICB9XG5cbiAgICB0aGlzLm1lcmdlVGVtcGxhdGVNYW5pcHVsYXRvcnModGVtcGxhdGVNYW5pcHVsYXRvcnMsIHRoaXMuZm9ybWx5Q29uZmlnLnRlbXBsYXRlTWFuaXB1bGF0b3JzKTtcblxuICAgIGNvbnN0IHByZVdyYXBwZXJzID0gdGVtcGxhdGVNYW5pcHVsYXRvcnMucHJlV3JhcHBlci5tYXAobSA9PiBtKGZpZWxkKSkuZmlsdGVyKHR5cGUgPT4gdHlwZSksXG4gICAgICBwb3N0V3JhcHBlcnMgPSB0ZW1wbGF0ZU1hbmlwdWxhdG9ycy5wb3N0V3JhcHBlci5tYXAobSA9PiBtKGZpZWxkKSkuZmlsdGVyKHR5cGUgPT4gdHlwZSk7XG5cbiAgICBpZiAoIWZpZWxkLndyYXBwZXJzKSB7XG4gICAgICBmaWVsZC53cmFwcGVycyA9IFtdO1xuICAgIH1cblxuICAgIGZpZWxkLndyYXBwZXJzID0gWy4uLnByZVdyYXBwZXJzLCAuLi4oZmllbGQud3JhcHBlcnMgfHwgW10pLCAuLi5wb3N0V3JhcHBlcnNdO1xuICB9XG5cbiAgcHJpdmF0ZSBtZXJnZVRlbXBsYXRlTWFuaXB1bGF0b3JzKHNvdXJjZTogVGVtcGxhdGVNYW5pcHVsYXRvcnMsIHRhcmdldDogVGVtcGxhdGVNYW5pcHVsYXRvcnMpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwge307XG4gICAgaWYgKHRhcmdldC5wcmVXcmFwcGVyKSB7XG4gICAgICBzb3VyY2UucHJlV3JhcHBlciA9IHNvdXJjZS5wcmVXcmFwcGVyLmNvbmNhdCh0YXJnZXQucHJlV3JhcHBlcik7XG4gICAgfVxuICAgIGlmICh0YXJnZXQucG9zdFdyYXBwZXIpIHtcbiAgICAgIHNvdXJjZS5wb3N0V3JhcHBlciA9IHNvdXJjZS5wb3N0V3JhcHBlci5jb25jYXQodGFyZ2V0LnBvc3RXcmFwcGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG59XG4iXX0=