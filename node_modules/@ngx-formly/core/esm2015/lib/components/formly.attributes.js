/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, HostListener, ElementRef, Input, Renderer2 } from '@angular/core';
export class FormlyAttributes {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.attributes = ['id', 'name', 'placeholder', 'tabindex', 'step', 'readonly'];
        this.statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.field.focus = true;
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.field.focus = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["field"]) {
            const /** @type {?} */ fieldChanges = changes["field"];
            this.attributes
                .filter(attr => this.canApplyRender(fieldChanges, attr))
                .forEach(attr => this.renderer.setAttribute(this.elementRef.nativeElement, attr, this.getPropValue(this.field, attr)));
            if (this.field.templateOptions && this.field.templateOptions.attributes) {
                const /** @type {?} */ attributes = this.field.templateOptions.attributes;
                Object.keys(attributes).forEach(name => this.renderer.setAttribute(this.elementRef.nativeElement, name, /** @type {?} */ (attributes[name])));
            }
            this.statements
                .filter(statement => this.canApplyRender(fieldChanges, statement))
                .forEach(statement => this.renderer.listen(this.elementRef.nativeElement, statement, this.getStatementValue(statement)));
            if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} prop
     * @return {?}
     */
    getPropValue(field, prop) {
        field = field || {};
        if (field.templateOptions && field.templateOptions[prop]) {
            return field.templateOptions[prop];
        }
        return (/** @type {?} */ (field))[prop] || '';
    }
    /**
     * @param {?} statement
     * @return {?}
     */
    getStatementValue(statement) {
        const /** @type {?} */ fn = this.field.templateOptions[statement];
        return (event) => fn(this.field, event);
    }
    /**
     * @param {?} fieldChange
     * @param {?} prop
     * @return {?}
     */
    canApplyRender(fieldChange, prop) {
        const /** @type {?} */ currentValue = this.getPropValue(this.field, prop), /** @type {?} */
        previousValue = this.getPropValue(fieldChange.previousValue, prop);
        if (previousValue !== currentValue) {
            if (this.statements.indexOf(prop) !== -1) {
                return typeof currentValue === 'function';
            }
            return true;
        }
        return false;
    }
}
FormlyAttributes.decorators = [
    { type: Directive, args: [{
                selector: '[formlyAttributes]',
            },] },
];
/** @nocollapse */
FormlyAttributes.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
FormlyAttributes.propDecorators = {
    field: [{ type: Input, args: ['formlyAttributes',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};
function FormlyAttributes_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyAttributes.prototype.field;
    /** @type {?} */
    FormlyAttributes.prototype.attributes;
    /** @type {?} */
    FormlyAttributes.prototype.statements;
    /** @type {?} */
    FormlyAttributes.prototype.renderer;
    /** @type {?} */
    FormlyAttributes.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmF0dHJpYnV0ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybWx5LmF0dHJpYnV0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQTBDLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU05SCxNQUFNOzs7OztJQWFKLFlBQ1UsVUFDQTtRQURBLGFBQVEsR0FBUixRQUFRO1FBQ1IsZUFBVSxHQUFWLFVBQVU7MEJBYkMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQzswQkFDN0QsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUM7S0FhckY7Ozs7SUFYbUIsT0FBTztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDekI7Ozs7SUFFcUIsTUFBTTtRQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7S0FDMUI7Ozs7O0lBT0QsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sV0FBUSxDQUFDO1lBQ2xCLHVCQUFNLFlBQVksR0FBRyxPQUFPLFNBQU0sQ0FBQztZQUNuQyxJQUFJLENBQUMsVUFBVTtpQkFDWixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDdkQsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElB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Q0FBQzthQUMzQztZQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUM7Ozs7WUE1RWhCLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2FBQy9COzs7O1lBTDRGLFNBQVM7WUFBcEUsVUFBVTs7O29CQU96QyxLQUFLLFNBQUMsa0JBQWtCO3NCQUl4QixZQUFZLFNBQUMsT0FBTztxQkFJcEIsWUFBWSxTQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgU2ltcGxlQ2hhbmdlLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnLi9mb3JtbHkuZmllbGQuY29uZmlnJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zvcm1seUF0dHJpYnV0ZXNdJyxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5QXR0cmlidXRlcyBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgnZm9ybWx5QXR0cmlidXRlcycpIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZztcbiAgcHJpdmF0ZSBhdHRyaWJ1dGVzID0gWydpZCcsICduYW1lJywgJ3BsYWNlaG9sZGVyJywgJ3RhYmluZGV4JywgJ3N0ZXAnLCAncmVhZG9ubHknXTtcbiAgcHJpdmF0ZSBzdGF0ZW1lbnRzID0gWydjaGFuZ2UnLCAna2V5ZG93bicsICdrZXl1cCcsICdrZXlwcmVzcycsICdjbGljaycsICdmb2N1cycsICdibHVyJ107XG5cbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnKSBvbkZvY3VzKCkge1xuICAgIHRoaXMuZmllbGQuZm9jdXMgPSB0cnVlO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignYmx1cicpIG9uQmx1cigpIHtcbiAgICB0aGlzLmZpZWxkLmZvY3VzID0gZmFsc2U7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmZpZWxkKSB7XG4gICAgICBjb25zdCBmaWVsZENoYW5nZXMgPSBjaGFuZ2VzLmZpZWxkO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzXG4gICAgICAgIC5maWx0ZXIoYXR0ciA9PiB0aGlzLmNhbkFwcGx5UmVuZGVyKGZpZWxkQ2hhbmdlcywgYXR0cikpXG4gICAgICAgIC5mb3JFYWNoKGF0dHIgPT4gdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGF0dHIsIHRoaXMuZ2V0UHJvcFZhbHVlKHRoaXMuZmllbGQsIGF0dHIpLFxuICAgICAgICApKTtcblxuICAgICAgaWYgKHRoaXMuZmllbGQudGVtcGxhdGVPcHRpb25zICYmIHRoaXMuZmllbGQudGVtcGxhdGVPcHRpb25zLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHRoaXMuZmllbGQudGVtcGxhdGVPcHRpb25zLmF0dHJpYnV0ZXM7XG4gICAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShcbiAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgbmFtZSwgYXR0cmlidXRlc1tuYW1lXSBhcyBzdHJpbmcsXG4gICAgICAgICkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRlbWVudHNcbiAgICAgICAgLmZpbHRlcihzdGF0ZW1lbnQgPT4gdGhpcy5jYW5BcHBseVJlbmRlcihmaWVsZENoYW5nZXMsIHN0YXRlbWVudCkpXG4gICAgICAgIC5mb3JFYWNoKHN0YXRlbWVudCA9PiB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgc3RhdGVtZW50LCB0aGlzLmdldFN0YXRlbWVudFZhbHVlKHN0YXRlbWVudCksXG4gICAgICAgICkpO1xuXG4gICAgICBpZiAoKGZpZWxkQ2hhbmdlcy5wcmV2aW91c1ZhbHVlIHx8IHt9KS5mb2N1cyAhPT0gKGZpZWxkQ2hhbmdlcy5jdXJyZW50VmFsdWUgfHwge30pLmZvY3VzICYmIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50W3RoaXMuZmllbGQuZm9jdXMgPyAnZm9jdXMnIDogJ2JsdXInXSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvcFZhbHVlKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZywgcHJvcDogc3RyaW5nKSB7XG4gICAgZmllbGQgPSBmaWVsZCB8fCB7fTtcbiAgICBpZiAoZmllbGQudGVtcGxhdGVPcHRpb25zICYmIGZpZWxkLnRlbXBsYXRlT3B0aW9uc1twcm9wXSkge1xuICAgICAgcmV0dXJuIGZpZWxkLnRlbXBsYXRlT3B0aW9uc1twcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDxhbnk+ZmllbGQpW3Byb3BdIHx8ICcnO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTdGF0ZW1lbnRWYWx1ZShzdGF0ZW1lbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IGZuID0gdGhpcy5maWVsZC50ZW1wbGF0ZU9wdGlvbnNbc3RhdGVtZW50XTtcblxuICAgIHJldHVybiAoZXZlbnQ6IGFueSkgPT4gZm4odGhpcy5maWVsZCwgZXZlbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYW5BcHBseVJlbmRlcihmaWVsZENoYW5nZTogU2ltcGxlQ2hhbmdlLCBwcm9wOiBzdHJpbmcpOiBCb29sZWFuIHtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFByb3BWYWx1ZSh0aGlzLmZpZWxkLCBwcm9wKSxcbiAgICAgIHByZXZpb3VzVmFsdWUgPSB0aGlzLmdldFByb3BWYWx1ZShmaWVsZENoYW5nZS5wcmV2aW91c1ZhbHVlLCBwcm9wKTtcblxuICAgIGlmIChwcmV2aW91c1ZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlbWVudHMuaW5kZXhPZihwcm9wKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50VmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19