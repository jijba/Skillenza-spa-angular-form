/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, ComponentFactoryResolver, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
export class FormlyField {
    /**
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     */
    constructor(formlyConfig, componentFactoryResolver) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.options = {};
        this.modelChange = new EventEmitter();
        this.componentRefs = [];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.lifeCycleHooks(this.lifecycle.afterContentInit);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.lifeCycleHooks(this.lifecycle.afterContentChecked);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.lifeCycleHooks(this.lifecycle.afterViewInit);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.lifeCycleHooks(this.lifecycle.afterViewChecked);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.lifeCycleHooks(this.lifecycle.doCheck);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.field.template) {
            this.createFieldComponent();
        }
        this.lifeCycleHooks(this.lifecycle.onInit);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.lifeCycleHooks(this.lifecycle.onChanges);
        this.componentRefs.forEach(ref => {
            Object.assign(ref.instance, {
                model: this.model,
                form: this.form,
                field: this.field,
                options: this.options,
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.lifeCycleHooks(this.lifecycle.onDestroy);
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
    }
    /**
     * @return {?}
     */
    createFieldComponent() {
        const /** @type {?} */ type = this.formlyConfig.getType(this.field.type);
        let /** @type {?} */ fieldComponent = this.fieldComponent;
        (this.field.wrappers || []).forEach(wrapperName => {
            const /** @type {?} */ wrapperRef = this.createComponent(fieldComponent, this.formlyConfig.getWrapper(wrapperName).component);
            fieldComponent = wrapperRef.instance.fieldComponent;
        });
        return this.createComponent(fieldComponent, type.component);
    }
    /**
     * @param {?} fieldComponent
     * @param {?} component
     * @return {?}
     */
    createComponent(fieldComponent, component) {
        let /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        let /** @type {?} */ ref = /** @type {?} */ (fieldComponent.createComponent(componentFactory));
        Object.assign(ref.instance, {
            model: this.model,
            form: this.form,
            field: this.field,
            options: this.options,
        });
        this.componentRefs.push(ref);
        return ref;
    }
    /**
     * @return {?}
     */
    get lifecycle() {
        return this.field.lifecycle || {};
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    lifeCycleHooks(callback) {
        if (callback) {
            callback(this.form, this.field, this.model, this.options);
        }
    }
}
FormlyField.decorators = [
    { type: Component, args: [{
                selector: 'formly-field',
                template: `
    <ng-template #fieldComponent></ng-template>
    <div *ngIf="field.template && !field.fieldGroup" [innerHtml]="field.template"></div>
  `,
                host: {
                    '[style.display]': 'field.hide ? "none":""',
                },
            },] },
];
/** @nocollapse */
FormlyField.ctorParameters = () => [
    { type: FormlyConfig },
    { type: ComponentFactoryResolver }
];
FormlyField.propDecorators = {
    model: [{ type: Input }],
    form: [{ type: Input }],
    field: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};
function FormlyField_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyField.prototype.model;
    /** @type {?} */
    FormlyField.prototype.form;
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.options;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.fieldComponent;
    /** @type {?} */
    FormlyField.prototype.componentRefs;
    /** @type {?} */
    FormlyField.prototype.formlyConfig;
    /** @type {?} */
    FormlyField.prototype.componentFactoryResolver;
}

//# sourceMappingURL=data:application/json;base64,