/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Optional, EventEmitter, Output, SkipSelf } from '@angular/core';
import { FormGroup, FormArray, NgForm, FormGroupDirective, FormControl } from '@angular/forms';
import { FormlyFormBuilder } from '../services/formly.form.builder';
import { FormlyFormExpression } from '../services/formly.form.expression';
import { FormlyConfig } from '../services/formly.config';
import { assignModelValue, isNullOrUndefined, reverseDeepMerge, getFieldModel, clone, assignModelToFields } from '../utils';
import { Subject } from 'rxjs';
import { debounceTime, map, tap } from 'rxjs/operators';
export class FormlyForm {
    /**
     * @param {?} formlyBuilder
     * @param {?} formlyExpression
     * @param {?} formlyConfig
     * @param {?} parentForm
     * @param {?} parentFormGroup
     * @param {?} parentFormlyForm
     */
    constructor(formlyBuilder, formlyExpression, formlyConfig, parentForm, parentFormGroup, parentFormlyForm) {
        this.formlyBuilder = formlyBuilder;
        this.formlyExpression = formlyExpression;
        this.formlyConfig = formlyConfig;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.parentFormlyForm = parentFormlyForm;
        this.model = {};
        this.form = new FormGroup({});
        this.fields = [];
        this.modelChange = new EventEmitter();
        /**
         * \@internal
         */
        this.isRoot = true;
        this.modelChangeSubs = [];
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.checkExpressionChange();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.fields || this.fields.length === 0 || !this.isRoot) {
            return;
        }
        if (changes["fields"] || changes["form"]) {
            this.model = this.model || {};
            this.form = this.form || (new FormGroup({}));
            this.setOptions();
            this.clearModelSubscriptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.trackModelChanges(this.fields);
            this.updateInitialValue();
        }
        else if (changes["model"]) {
            this.patchModel(this.model);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearModelSubscriptions();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeModel(event) {
        assignModelValue(this.model, event.key, event.value);
        this.modelChange.emit(this.model);
        this.checkExpressionChange();
    }
    /**
     * @return {?}
     */
    setOptions() {
        this.options = this.options || {};
        this.options.formState = this.options.formState || {};
        if (!this.options.showError) {
            this.options.showError = this.formlyConfig.extras.showError;
        }
        if (!this.options.fieldChanges) {
            this.options.fieldChanges = new Subject();
        }
        if (!this.options.resetModel) {
            this.options.resetModel = this.resetModel.bind(this);
        }
        if (!this.options.parentForm) {
            this.options.parentForm = this.parentFormGroup || this.parentForm;
        }
        if (!this.options.updateInitialValue) {
            this.options.updateInitialValue = this.updateInitialValue.bind(this);
        }
        if (!(/** @type {?} */ (this.options)).resetTrackModelChanges) {
            (/** @type {?} */ (this.options)).resetTrackModelChanges = () => {
                this.clearModelSubscriptions();
                this.trackModelChanges(this.fields);
            };
        }
    }
    /**
     * @return {?}
     */
    checkExpressionChange() {
        if (this.isRoot) {
            this.formlyExpression.checkFields(this.form, this.fields, this.model, this.options);
        }
    }
    /**
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    trackModelChanges(fields, rootKey = []) {
        fields.forEach(field => {
            if (field.key && field.type && !field.fieldGroup && !field.fieldArray) {
                const /** @type {?} */ valueChanges = field.formControl.valueChanges.pipe(field.modelOptions && field.modelOptions.debounce && field.modelOptions.debounce.default
                    ? debounceTime(field.modelOptions.debounce.default)
                    : tap(() => { }), map(value => {
                    if (field.parsers && field.parsers.length > 0) {
                        field.parsers.forEach(parserFn => value = parserFn(value));
                    }
                    return value;
                }), tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })));
                this.modelChangeSubs.push(valueChanges.subscribe());
            }
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);
            }
        });
    }
    /**
     * @return {?}
     */
    clearModelSubscriptions() {
        this.modelChangeSubs.forEach(sub => sub.unsubscribe());
        this.modelChangeSubs = [];
    }
    /**
     * @param {?} model
     * @return {?}
     */
    patchModel(model) {
        assignModelToFields(this.fields, model);
        this.clearModelSubscriptions();
        this.resetFieldArray(this.fields, model);
        this.initializeFormValue(this.form);
        (/** @type {?} */ (this.form)).patchValue(model, { onlySelf: true });
        this.trackModelChanges(this.fields);
    }
    /**
     * @param {?=} model
     * @return {?}
     */
    resetModel(model) {
        model = isNullOrUndefined(model) ? this.initialModel : model;
        this.resetFieldArray(this.fields, model);
        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
        // but only when the current component is a root one.
        if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {
            this.options.parentForm.resetForm(model);
        }
        else {
            this.form.reset(model);
        }
        (/** @type {?} */ (this.options)).resetTrackModelChanges();
    }
    /**
     * @param {?} fields
     * @param {?} newModel
     * @return {?}
     */
    resetFieldArray(fields, newModel) {
        fields.forEach(field => {
            if ((field.fieldGroup && field.fieldGroup.length > 0) || field.fieldArray) {
                const /** @type {?} */ newFieldModel = getFieldModel(newModel, field, true);
                if (field.fieldArray) {
                    field.fieldGroup = field.fieldGroup || [];
                    field.fieldGroup.length = 0;
                    if (field.model !== newFieldModel && field.model) {
                        field.model.length = 0;
                    }
                    const /** @type {?} */ formControl = /** @type {?} */ (field.formControl);
                    while (formControl.length !== 0) {
                        formControl.removeAt(0);
                    }
                    newFieldModel.forEach((m, i) => {
                        field.model[i] = m;
                        field.fieldGroup.push(Object.assign({}, clone(field.fieldArray), { key: `${i}` }));
                        this.formlyBuilder.buildForm(formControl, [field.fieldGroup[i]], newFieldModel, this.options);
                    });
                }
                else {
                    this.resetFieldArray(field.fieldGroup, newFieldModel);
                }
            }
            else if (field.key && field.type) {
                field.formControl.reset(getFieldModel(newModel, field, false));
            }
        });
    }
    /**
     * @param {?} control
     * @return {?}
     */
    initializeFormValue(control) {
        if (control instanceof FormControl) {
            control.setValue(null);
        }
        else if (control instanceof FormGroup) {
            Object.keys(control.controls).forEach(k => this.initializeFormValue(control.controls[k]));
        }
        else if (control instanceof FormArray) {
            control.controls.forEach(c => this.initializeFormValue(c));
        }
    }
    /**
     * @return {?}
     */
    updateInitialValue() {
        this.initialModel = reverseDeepMerge({}, this.model);
    }
}
FormlyForm.decorators = [
    { type: Component, args: [{
                selector: 'formly-form',
                template: `
    <formly-field *ngFor="let field of fields"
      [model]="field.model" [form]="form"
      [field]="field"
      [ngClass]="field.className"
      [options]="options">
    </formly-field>
    <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
FormlyForm.ctorParameters = () => [
    { type: FormlyFormBuilder },
    { type: FormlyFormExpression },
    { type: FormlyConfig },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: FormlyForm, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
FormlyForm.propDecorators = {
    model: [{ type: Input }],
    form: [{ type: Input }],
    fields: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    isRoot: [{ type: Input }]
};
function FormlyForm_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyForm.prototype.model;
    /** @type {?} */
    FormlyForm.prototype.form;
    /** @type {?} */
    FormlyForm.prototype.fields;
    /** @type {?} */
    FormlyForm.prototype.options;
    /** @type {?} */
    FormlyForm.prototype.modelChange;
    /**
     * \@internal
     * @type {?}
     */
    FormlyForm.prototype.isRoot;
    /** @type {?} */
    FormlyForm.prototype.initialModel;
    /** @type {?} */
    FormlyForm.prototype.modelChangeSubs;
    /** @type {?} */
    FormlyForm.prototype.formlyBuilder;
    /** @type {?} */
    FormlyForm.prototype.formlyExpression;
    /** @type {?} */
    FormlyForm.prototype.formlyConfig;
    /** @type {?} */
    FormlyForm.prototype.parentForm;
    /** @type {?} */
    FormlyForm.prototype.parentFormGroup;
    /** @type {?} */
    FormlyForm.prototype.parentFormlyForm;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybWx5LmZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXNCLEtBQUssRUFBaUIsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3pJLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEgsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzVILE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBY3hELE1BQU07Ozs7Ozs7OztJQWFKLFlBQ1UsZUFDQSxrQkFDQSxjQUNZLFVBQWtCLEVBQ2xCLGVBQW1DLEVBQ3ZCLGdCQUE0QjtRQUxwRCxrQkFBYSxHQUFiLGFBQWE7UUFDYixxQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBQ2hCLGlCQUFZLEdBQVosWUFBWTtRQUNBLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsb0JBQWUsR0FBZixlQUFlLENBQW9CO1FBQ3ZCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBWTtxQkFsQnhDLEVB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LElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNGO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sWUFBWSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUQ7Ozs7O0lBR0ssa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzs7OztZQXhNeEQsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUU7Ozs7Ozs7O0dBUVQ7YUFDRjs7OztZQWxCUSxpQkFBaUI7WUFDakIsb0JBQW9CO1lBQ3BCLFlBQVk7WUFKVSxNQUFNLHVCQXNDaEMsUUFBUTtZQXRDMEIsa0JBQWtCLHVCQXVDcEQsUUFBUTtZQUN5QyxVQUFVLHVCQUEzRCxRQUFRLFlBQUksUUFBUTs7O29CQWxCdEIsS0FBSzttQkFDTCxLQUFLO3FCQUNMLEtBQUs7c0JBQ0wsS0FBSzswQkFDTCxNQUFNO3FCQUdOLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIERvQ2hlY2ssIE9uQ2hhbmdlcywgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIE9wdGlvbmFsLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgU2tpcFNlbGYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQXJyYXksIE5nRm9ybSwgRm9ybUdyb3VwRGlyZWN0aXZlLCBGb3JtQ29udHJvbCwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcsIEZvcm1seUZvcm1PcHRpb25zLCBGb3JtbHlWYWx1ZUNoYW5nZUV2ZW50IH0gZnJvbSAnLi9mb3JtbHkuZmllbGQuY29uZmlnJztcbmltcG9ydCB7IEZvcm1seUZvcm1CdWlsZGVyIH0gZnJvbSAnLi4vc2VydmljZXMvZm9ybWx5LmZvcm0uYnVpbGRlcic7XG5pbXBvcnQgeyBGb3JtbHlGb3JtRXhwcmVzc2lvbiB9IGZyb20gJy4uL3NlcnZpY2VzL2Zvcm1seS5mb3JtLmV4cHJlc3Npb24nO1xuaW1wb3J0IHsgRm9ybWx5Q29uZmlnIH0gZnJvbSAnLi4vc2VydmljZXMvZm9ybWx5LmNvbmZpZyc7XG5pbXBvcnQgeyBhc3NpZ25Nb2RlbFZhbHVlLCBpc051bGxPclVuZGVmaW5lZCwgcmV2ZXJzZURlZXBNZXJnZSwgZ2V0RmllbGRNb2RlbCwgY2xvbmUsIGFzc2lnbk1vZGVsVG9GaWVsZHMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1mb3JtJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8Zm9ybWx5LWZpZWxkICpuZ0Zvcj1cImxldCBmaWVsZCBvZiBmaWVsZHNcIlxuICAgICAgW21vZGVsXT1cImZpZWxkLm1vZGVsXCIgW2Zvcm1dPVwiZm9ybVwiXG4gICAgICBbZmllbGRdPVwiZmllbGRcIlxuICAgICAgW25nQ2xhc3NdPVwiZmllbGQuY2xhc3NOYW1lXCJcbiAgICAgIFtvcHRpb25zXT1cIm9wdGlvbnNcIj5cbiAgICA8L2Zvcm1seS1maWVsZD5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUZvcm0gaW1wbGVtZW50cyBEb0NoZWNrLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIG1vZGVsOiBhbnkgPSB7fTtcbiAgQElucHV0KCkgZm9ybTogRm9ybUdyb3VwIHwgRm9ybUFycmF5ID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gIEBJbnB1dCgpIGZpZWxkczogRm9ybWx5RmllbGRDb25maWdbXSA9IFtdO1xuICBASW5wdXQoKSBvcHRpb25zOiBGb3JtbHlGb3JtT3B0aW9ucztcbiAgQE91dHB1dCgpIG1vZGVsQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBASW5wdXQoKSBpc1Jvb3QgPSB0cnVlO1xuXG4gIHByaXZhdGUgaW5pdGlhbE1vZGVsOiBhbnk7XG4gIHByaXZhdGUgbW9kZWxDaGFuZ2VTdWJzOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZm9ybWx5QnVpbGRlcjogRm9ybWx5Rm9ybUJ1aWxkZXIsXG4gICAgcHJpdmF0ZSBmb3JtbHlFeHByZXNzaW9uOiBGb3JtbHlGb3JtRXhwcmVzc2lvbixcbiAgICBwcml2YXRlIGZvcm1seUNvbmZpZzogRm9ybWx5Q29uZmlnLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgcGFyZW50Rm9ybTogTmdGb3JtLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgcGFyZW50Rm9ybUdyb3VwOiBGb3JtR3JvdXBEaXJlY3RpdmUsXG4gICAgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcHJpdmF0ZSBwYXJlbnRGb3JtbHlGb3JtOiBGb3JtbHlGb3JtLFxuICApIHt9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uQ2hhbmdlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCF0aGlzLmZpZWxkcyB8fCB0aGlzLmZpZWxkcy5sZW5ndGggPT09IDAgfHwgIXRoaXMuaXNSb290KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXMuZmllbGRzIHx8IGNoYW5nZXMuZm9ybSkge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMubW9kZWwgfHwge307XG4gICAgICB0aGlzLmZvcm0gPSB0aGlzLmZvcm0gfHwgKG5ldyBGb3JtR3JvdXAoe30pKTtcbiAgICAgIHRoaXMuc2V0T3B0aW9ucygpO1xuICAgICAgdGhpcy5jbGVhck1vZGVsU3Vic2NyaXB0aW9ucygpO1xuICAgICAgdGhpcy5mb3JtbHlCdWlsZGVyLmJ1aWxkRm9ybSh0aGlzLmZvcm0sIHRoaXMuZmllbGRzLCB0aGlzLm1vZGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy50cmFja01vZGVsQ2hhbmdlcyh0aGlzLmZpZWxkcyk7XG4gICAgICB0aGlzLnVwZGF0ZUluaXRpYWxWYWx1ZSgpO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlcy5tb2RlbCkge1xuICAgICAgdGhpcy5wYXRjaE1vZGVsKHRoaXMubW9kZWwpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYXJNb2RlbFN1YnNjcmlwdGlvbnMoKTtcbiAgfVxuXG4gIGNoYW5nZU1vZGVsKGV2ZW50OiB7IGtleTogc3RyaW5nLCB2YWx1ZTogYW55IH0pIHtcbiAgICBhc3NpZ25Nb2RlbFZhbHVlKHRoaXMubW9kZWwsIGV2ZW50LmtleSwgZXZlbnQudmFsdWUpO1xuICAgIHRoaXMubW9kZWxDaGFuZ2UuZW1pdCh0aGlzLm1vZGVsKTtcbiAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkNoYW5nZSgpO1xuICB9XG5cbiAgc2V0T3B0aW9ucygpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG5cbiAgICB0aGlzLm9wdGlvbnMuZm9ybVN0YXRlID0gdGhpcy5vcHRpb25zLmZvcm1TdGF0ZSB8fCB7fTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93RXJyb3IpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5zaG93RXJyb3IgPSB0aGlzLmZvcm1seUNvbmZpZy5leHRyYXMuc2hvd0Vycm9yO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5maWVsZENoYW5nZXMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5maWVsZENoYW5nZXMgPSBuZXcgU3ViamVjdDxGb3JtbHlWYWx1ZUNoYW5nZUV2ZW50PigpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLnJlc2V0TW9kZWwpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5yZXNldE1vZGVsID0gdGhpcy5yZXNldE1vZGVsLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMucGFyZW50Rm9ybSkge1xuICAgICAgdGhpcy5vcHRpb25zLnBhcmVudEZvcm0gPSB0aGlzLnBhcmVudEZvcm1Hcm91cCB8fCB0aGlzLnBhcmVudEZvcm07XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudXBkYXRlSW5pdGlhbFZhbHVlKSB7XG4gICAgICB0aGlzLm9wdGlvbnMudXBkYXRlSW5pdGlhbFZhbHVlID0gdGhpcy51cGRhdGVJbml0aWFsVmFsdWUuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAoISg8YW55PiB0aGlzLm9wdGlvbnMpLnJlc2V0VHJhY2tNb2RlbENoYW5nZXMpIHtcbiAgICAgICg8YW55PiB0aGlzLm9wdGlvbnMpLnJlc2V0VHJhY2tNb2RlbENoYW5nZXMgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xlYXJNb2RlbFN1YnNjcmlwdGlvbnMoKTtcbiAgICAgICAgdGhpcy50cmFja01vZGVsQ2hhbmdlcyh0aGlzLmZpZWxkcyk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tFeHByZXNzaW9uQ2hhbmdlKCkge1xuICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgdGhpcy5mb3JtbHlFeHByZXNzaW9uLmNoZWNrRmllbGRzKHRoaXMuZm9ybSwgdGhpcy5maWVsZHMsIHRoaXMubW9kZWwsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0cmFja01vZGVsQ2hhbmdlcyhmaWVsZHM6IEZvcm1seUZpZWxkQ29uZmlnW10sIHJvb3RLZXk6IHN0cmluZ1tdID0gW10pIHtcbiAgICBmaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBpZiAoZmllbGQua2V5ICYmIGZpZWxkLnR5cGUgJiYgIWZpZWxkLmZpZWxkR3JvdXAgJiYgIWZpZWxkLmZpZWxkQXJyYXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWVDaGFuZ2VzID0gZmllbGQuZm9ybUNvbnRyb2wudmFsdWVDaGFuZ2VzLnBpcGUoXG4gICAgICAgICAgZmllbGQubW9kZWxPcHRpb25zICYmIGZpZWxkLm1vZGVsT3B0aW9ucy5kZWJvdW5jZSAmJiBmaWVsZC5tb2RlbE9wdGlvbnMuZGVib3VuY2UuZGVmYXVsdFxuICAgICAgICAgID8gZGVib3VuY2VUaW1lKGZpZWxkLm1vZGVsT3B0aW9ucy5kZWJvdW5jZS5kZWZhdWx0KVxuICAgICAgICAgIDogdGFwKCgpID0+IHt9KSxcbiAgICAgICAgICBtYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKGZpZWxkLnBhcnNlcnMgJiYgZmllbGQucGFyc2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGZpZWxkLnBhcnNlcnMuZm9yRWFjaChwYXJzZXJGbiA9PiB2YWx1ZSA9IHBhcnNlckZuKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0YXAodmFsdWUgPT4gdGhpcy5jaGFuZ2VNb2RlbCh7IGtleTogWy4uLnJvb3RLZXksIGZpZWxkLmtleV0uam9pbignLicpLCB2YWx1ZSB9KSksXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5tb2RlbENoYW5nZVN1YnMucHVzaCh2YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmllbGQuZmllbGRHcm91cCAmJiBmaWVsZC5maWVsZEdyb3VwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy50cmFja01vZGVsQ2hhbmdlcyhmaWVsZC5maWVsZEdyb3VwLCBmaWVsZC5rZXkgPyBbLi4ucm9vdEtleSwgZmllbGQua2V5XSA6IHJvb3RLZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhck1vZGVsU3Vic2NyaXB0aW9ucygpIHtcbiAgICB0aGlzLm1vZGVsQ2hhbmdlU3Vicy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gICAgdGhpcy5tb2RlbENoYW5nZVN1YnMgPSBbXTtcbiAgfVxuXG4gIHByaXZhdGUgcGF0Y2hNb2RlbChtb2RlbDogYW55KSB7XG4gICAgYXNzaWduTW9kZWxUb0ZpZWxkcyh0aGlzLmZpZWxkcywgbW9kZWwpO1xuICAgIHRoaXMuY2xlYXJNb2RlbFN1YnNjcmlwdGlvbnMoKTtcbiAgICB0aGlzLnJlc2V0RmllbGRBcnJheSh0aGlzLmZpZWxkcywgbW9kZWwpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZUZvcm1WYWx1ZSh0aGlzLmZvcm0pO1xuICAgICg8Rm9ybUdyb3VwPiB0aGlzLmZvcm0pLnBhdGNoVmFsdWUobW9kZWwsIHsgb25seVNlbGY6IHRydWUgfSk7XG4gICAgdGhpcy50cmFja01vZGVsQ2hhbmdlcyh0aGlzLmZpZWxkcyk7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0TW9kZWwobW9kZWw/OiBhbnkpIHtcbiAgICBtb2RlbCA9IGlzTnVsbE9yVW5kZWZpbmVkKG1vZGVsKSA/IHRoaXMuaW5pdGlhbE1vZGVsIDogbW9kZWw7XG4gICAgdGhpcy5yZXNldEZpZWxkQXJyYXkodGhpcy5maWVsZHMsIG1vZGVsKTtcblxuICAgIC8vIHdlIHNob3VsZCBjYWxsIGBOZ0Zvcm06OnJlc2V0Rm9ybWAgdG8gZW5zdXJlIGNoYW5naW5nIGBzdWJtaXR0ZWRgIHN0YXRlIGFmdGVyIHJlc2V0dGluZyBmb3JtXG4gICAgLy8gYnV0IG9ubHkgd2hlbiB0aGUgY3VycmVudCBjb21wb25lbnQgaXMgYSByb290IG9uZS5cbiAgICBpZiAoIXRoaXMucGFyZW50Rm9ybWx5Rm9ybSAmJiB0aGlzLm9wdGlvbnMucGFyZW50Rm9ybSAmJiB0aGlzLm9wdGlvbnMucGFyZW50Rm9ybS5jb250cm9sID09PSB0aGlzLmZvcm0pIHtcbiAgICAgIHRoaXMub3B0aW9ucy5wYXJlbnRGb3JtLnJlc2V0Rm9ybShtb2RlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9ybS5yZXNldChtb2RlbCk7XG4gICAgfVxuXG4gICAgKDxhbnk+IHRoaXMub3B0aW9ucykucmVzZXRUcmFja01vZGVsQ2hhbmdlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldEZpZWxkQXJyYXkoZmllbGRzOiBGb3JtbHlGaWVsZENvbmZpZ1tdLCBuZXdNb2RlbDogYW55KSB7XG4gICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgaWYgKChmaWVsZC5maWVsZEdyb3VwICYmIGZpZWxkLmZpZWxkR3JvdXAubGVuZ3RoID4gMCkgfHwgZmllbGQuZmllbGRBcnJheSkge1xuICAgICAgICBjb25zdCBuZXdGaWVsZE1vZGVsID0gZ2V0RmllbGRNb2RlbChuZXdNb2RlbCwgZmllbGQsIHRydWUpO1xuICAgICAgICBpZiAoZmllbGQuZmllbGRBcnJheSkge1xuICAgICAgICAgIGZpZWxkLmZpZWxkR3JvdXAgPSBmaWVsZC5maWVsZEdyb3VwIHx8IFtdO1xuICAgICAgICAgIGZpZWxkLmZpZWxkR3JvdXAubGVuZ3RoID0gMDtcblxuICAgICAgICAgIGlmIChmaWVsZC5tb2RlbCAhPT0gbmV3RmllbGRNb2RlbCAmJiBmaWVsZC5tb2RlbCkge1xuICAgICAgICAgICAgZmllbGQubW9kZWwubGVuZ3RoID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBmb3JtQ29udHJvbCA9IDxGb3JtQXJyYXk+ZmllbGQuZm9ybUNvbnRyb2w7XG4gICAgICAgICAgd2hpbGUgKGZvcm1Db250cm9sLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9ybUNvbnRyb2wucmVtb3ZlQXQoMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3RmllbGRNb2RlbC5mb3JFYWNoKChtOiBhbnksIGk6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgZmllbGQubW9kZWxbaV0gPSBtO1xuICAgICAgICAgICAgZmllbGQuZmllbGRHcm91cC5wdXNoKHsgLi4uY2xvbmUoZmllbGQuZmllbGRBcnJheSksIGtleTogYCR7aX1gIH0pO1xuICAgICAgICAgICAgdGhpcy5mb3JtbHlCdWlsZGVyLmJ1aWxkRm9ybShmb3JtQ29udHJvbCwgW2ZpZWxkLmZpZWxkR3JvdXBbaV1dLCBuZXdGaWVsZE1vZGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVzZXRGaWVsZEFycmF5KGZpZWxkLmZpZWxkR3JvdXAsIG5ld0ZpZWxkTW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkLmtleSAmJiBmaWVsZC50eXBlKSB7XG4gICAgICAgIGZpZWxkLmZvcm1Db250cm9sLnJlc2V0KGdldEZpZWxkTW9kZWwobmV3TW9kZWwsIGZpZWxkLCBmYWxzZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplRm9ybVZhbHVlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkge1xuICAgIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuc2V0VmFsdWUobnVsbCk7XG4gICAgfSBlbHNlIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUdyb3VwKSB7XG4gICAgICBPYmplY3Qua2V5cyhjb250cm9sLmNvbnRyb2xzKS5mb3JFYWNoKGsgPT4gdGhpcy5pbml0aWFsaXplRm9ybVZhbHVlKGNvbnRyb2wuY29udHJvbHNba10pKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtQXJyYXkpIHtcbiAgICAgIGNvbnRyb2wuY29udHJvbHMuZm9yRWFjaChjID0+IHRoaXMuaW5pdGlhbGl6ZUZvcm1WYWx1ZShjKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVJbml0aWFsVmFsdWUoKSB7XG4gICAgdGhpcy5pbml0aWFsTW9kZWwgPSByZXZlcnNlRGVlcE1lcmdlKHt9LCB0aGlzLm1vZGVsKTtcbiAgfVxufVxuIl19