(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-formly/core'), require('@angular/material/form-field'), require('rxjs'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/material/form-field', ['exports', '@angular/core', '@ngx-formly/core', '@angular/material/form-field', 'rxjs', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].material = global['ngx-formly'].material || {}, global['ngx-formly'].material['form-field'] = {}),global.ng.core,null,global.ng.material['form-field'],global.rxjs,global.ng.common,global.ng.forms));
}(this, (function (exports,core,core$1,formField,rxjs,common,forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyWrapperFormField = (function (_super) {
        __extends(FormlyWrapperFormField, _super);
        function FormlyWrapperFormField(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.stateChanges = new rxjs.Subject();
            _this._errorState = false;
            _this.initialGapCalculated = false;
            return _this;
        }
        /**
         * @return {?}
         */
        FormlyWrapperFormField.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.formField._control = this;
                ((this.field))['__formField__'] = this.formField;
                // fix for https://github.com/angular/material2/issues/11437
                if (this.field.hide && this.field.templateOptions["appearance"] === 'outline') {
                    this.initialGapCalculated = true;
                }
            };
        /**
         * @return {?}
         */
        FormlyWrapperFormField.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                if (!this.initialGapCalculated || this.field.hide) {
                    return;
                }
                this.formField._initialGapCalculated = false;
                this.initialGapCalculated = true;
            };
        /**
         * @return {?}
         */
        FormlyWrapperFormField.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // temporary fix for https://github.com/angular/material2/issues/7891
                if (this.formField.underlineRef && this.to["hideFieldUnderline"] === true) {
                    this.renderer.removeClass(this.formField.underlineRef.nativeElement, 'mat-form-field-underline');
                    this.renderer.removeClass(this.formField.underlineRef.nativeElement.firstChild, 'mat-form-field-ripple');
                }
            };
        /**
         * @return {?}
         */
        FormlyWrapperFormField.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                delete ((this.field))['__formField__'];
                this.stateChanges.complete();
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        FormlyWrapperFormField.prototype.setDescribedByIds = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) { };
        /**
         * @param {?} event
         * @return {?}
         */
        FormlyWrapperFormField.prototype.onContainerClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.field.focus = true;
                this.stateChanges.next();
            };
        Object.defineProperty(FormlyWrapperFormField.prototype, "errorState", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ showError = this.options.showError(this);
                if (showError !== this._errorState) {
                    this._errorState = showError;
                    this.stateChanges.next();
                }
                return showError;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "controlType", {
            get: /**
             * @return {?}
             */ function () { return this.to.type; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "focused", {
            get: /**
             * @return {?}
             */ function () { return this.field.focus && !this.disabled; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () { return this.to.disabled; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "required", {
            get: /**
             * @return {?}
             */ function () { return this.to.required; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "placeholder", {
            get: /**
             * @return {?}
             */ function () { return this.to.placeholder; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "shouldPlaceholderFloat", {
            get: /**
             * @return {?}
             */ function () { return this.shouldLabelFloat; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "value", {
            get: /**
             * @return {?}
             */ function () { return this.formControl.value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "ngControl", {
            get: /**
             * @return {?}
             */ function () { return /** @type {?} */ (this.formControl); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "empty", {
            get: /**
             * @return {?}
             */ function () { return !this.formControl.value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyWrapperFormField.prototype, "shouldLabelFloat", {
            get: /**
             * @return {?}
             */ function () { return this.focused || !this.empty; },
            enumerable: true,
            configurable: true
        });
        FormlyWrapperFormField.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-mat-form-field',
                        template: "\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\n    <mat-form-field\n      [hideRequiredMarker]=\"true\"\n      [floatLabel]=\"to.floatLabel\"\n      [appearance]=\"to.appearance\"\n      [color]=\"to.color\"\n      [style.width]=\"'100%'\">\n      <ng-container #fieldComponent></ng-container>\n      <mat-label *ngIf=\"to.label && to.hideLabel !== true\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" class=\"mat-form-field-required-marker\">*</span>\n      </mat-label>\n\n      <ng-container matPrefix>\n        <ng-container *ngTemplateOutlet=\"to.prefix\"></ng-container>\n      </ng-container>\n\n      <ng-container matSuffix>\n        <ng-container *ngTemplateOutlet=\"to.suffix\"></ng-container>\n      </ng-container>\n\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-error [id]=\"null\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </mat-error>\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-hint *ngIf=\"to.description\" [id]=\"null\">{{ to.description }}</mat-hint>\n    </mat-form-field>\n  ",
                        providers: [{ provide: formField.MatFormFieldControl, useExisting: FormlyWrapperFormField }],
                    },] },
        ];
        /** @nocollapse */
        FormlyWrapperFormField.ctorParameters = function () {
            return [
                { type: core.Renderer2 }
            ];
        };
        FormlyWrapperFormField.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }],
            formField: [{ type: core.ViewChild, args: [formField.MatFormField,] }]
        };
        return FormlyWrapperFormField;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyMatFormFieldModule = (function () {
        function FormlyMatFormFieldModule() {
        }
        FormlyMatFormFieldModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FormlyWrapperFormField],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            formField.MatFormFieldModule,
                            core$1.FormlyModule.forChild({
                                wrappers: [{
                                        name: 'form-field',
                                        component: FormlyWrapperFormField,
                                    }],
                            }),
                        ],
                    },] },
        ];
        return FormlyMatFormFieldModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyErrorStateMatcher = (function () {
        function FormlyErrorStateMatcher(field) {
            this.field = field;
        }
        /**
         * @param {?} control
         * @param {?} form
         * @return {?}
         */
        FormlyErrorStateMatcher.prototype.isErrorState = /**
         * @param {?} control
         * @param {?} form
         * @return {?}
         */
            function (control, form) {
                return this.field && this.field.showError;
            };
        return FormlyErrorStateMatcher;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var FieldType = (function (_super) {
        __extends(FieldType, _super);
        function FieldType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.formFieldControl = _this;
            _this.errorStateMatcher = new FormlyErrorStateMatcher(_this);
            _this.stateChanges = new rxjs.Subject();
            _this._errorState = false;
            return _this;
        }
        /**
         * @return {?}
         */
        FieldType.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.formField) {
                    this.formField._control = this.formFieldControl;
                }
            };
        /**
         * @return {?}
         */
        FieldType.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.matPrefix || this.matSuffix) {
                    setTimeout(function () {
                        _this.to["prefix"] = _this.matPrefix;
                        _this.to["suffix"] = _this.matSuffix;
                    });
                }
            };
        /**
         * @return {?}
         */
        FieldType.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.formFieldControl = null;
                if (this.formField) {
                    delete this.formField._control;
                }
                this.stateChanges.complete();
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        FieldType.prototype.setDescribedByIds = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) { };
        /**
         * @param {?} event
         * @return {?}
         */
        FieldType.prototype.onContainerClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.field.focus = true;
                this.stateChanges.next();
            };
        Object.defineProperty(FieldType.prototype, "errorState", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ showError = this.options.showError(this);
                if (showError !== this._errorState) {
                    this._errorState = showError;
                    this.stateChanges.next();
                }
                return showError;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "controlType", {
            get: /**
             * @return {?}
             */ function () { return this.to.type; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "focused", {
            get: /**
             * @return {?}
             */ function () { return this.field.focus && !this.disabled; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () { return this.to.disabled; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "required", {
            get: /**
             * @return {?}
             */ function () { return this.to.required; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "placeholder", {
            get: /**
             * @return {?}
             */ function () { return this.to.placeholder; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "shouldPlaceholderFloat", {
            get: /**
             * @return {?}
             */ function () { return this.shouldLabelFloat; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "value", {
            get: /**
             * @return {?}
             */ function () { return this.formControl.value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "ngControl", {
            get: /**
             * @return {?}
             */ function () { return /** @type {?} */ (this.formControl); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "empty", {
            get: /**
             * @return {?}
             */ function () { return !this.formControl.value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "shouldLabelFloat", {
            get: /**
             * @return {?}
             */ function () { return this.focused || !this.empty; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "formField", {
            get: /**
             * @return {?}
             */ function () { return ((this.field))['__formField__']; },
            enumerable: true,
            configurable: true
        });
        FieldType.propDecorators = {
            matPrefix: [{ type: core.ViewChild, args: ['matPrefix',] }],
            matSuffix: [{ type: core.ViewChild, args: ['matSuffix',] }]
        };
        return FieldType;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.FormlyMatFormFieldModule = FormlyMatFormFieldModule;
    exports.FieldType = FieldType;
    exports.ɵa = FormlyWrapperFormField;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,