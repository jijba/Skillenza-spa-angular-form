import { __extends } from 'tslib';
import { Component, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormlyToggleTypeComponent = /** @class */ (function (_super) {
    __extends(FormlyToggleTypeComponent, _super);
    function FormlyToggleTypeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyToggleTypeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-mat-toggle',
                    template: "\n    <mat-slide-toggle [formControl]=\"formControl\" [formlyAttributes]=\"field\">\n      {{ to.label }}\n    </mat-slide-toggle>\n  ",
                },] },
    ];
    return FormlyToggleTypeComponent;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormlyMatToggleModule = /** @class */ (function () {
    function FormlyMatToggleModule() {
    }
    FormlyMatToggleModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FormlyToggleTypeComponent],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        MatSlideToggleModule,
                        FormlyMatFormFieldModule,
                        FormlyModule.forChild({
                            types: [{
                                    name: 'toggle',
                                    component: FormlyToggleTypeComponent,
                                    wrappers: ['form-field'],
                                    defaultOptions: {
                                        templateOptions: {
                                            hideFieldUnderline: true,
                                            floatLabel: 'always',
                                            hideLabel: true,
                                        },
                                    },
                                }],
                        }),
                    ],
                },] },
    ];
    return FormlyMatToggleModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormlyMatToggleModule, FormlyToggleTypeComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1tYXRlcmlhbC10b2dnbGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZ3gtZm9ybWx5L21hdGVyaWFsL3RvZ2dsZS90b2dnbGUudHlwZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvdG9nZ2xlL3RvZ2dsZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICdAbmd4LWZvcm1seS9tYXRlcmlhbC9mb3JtLWZpZWxkJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LWZpZWxkLW1hdC10b2dnbGUnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxtYXQtc2xpZGUtdG9nZ2xlIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiIFtmb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCI+XG4gICAgICB7eyB0by5sYWJlbCB9fVxuICAgIDwvbWF0LXNsaWRlLXRvZ2dsZT5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5VG9nZ2xlVHlwZUNvbXBvbmVudCBleHRlbmRzIEZpZWxkVHlwZSB7fVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3JtbHlNb2R1bGUgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXRTbGlkZVRvZ2dsZU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NsaWRlLXRvZ2dsZSc7XG5pbXBvcnQgeyBGb3JtbHlNYXRGb3JtRmllbGRNb2R1bGUgfSBmcm9tICdAbmd4LWZvcm1seS9tYXRlcmlhbC9mb3JtLWZpZWxkJztcblxuaW1wb3J0IHsgRm9ybWx5VG9nZ2xlVHlwZUNvbXBvbmVudCB9IGZyb20gJy4vdG9nZ2xlLnR5cGUnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtGb3JtbHlUb2dnbGVUeXBlQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIE1hdFNsaWRlVG9nZ2xlTW9kdWxlLFxuICAgIEZvcm1seU1hdEZvcm1GaWVsZE1vZHVsZSxcbiAgICBGb3JtbHlNb2R1bGUuZm9yQ2hpbGQoe1xuICAgICAgdHlwZXM6IFt7XG4gICAgICAgIG5hbWU6ICd0b2dnbGUnLFxuICAgICAgICBjb21wb25lbnQ6IEZvcm1seVRvZ2dsZVR5cGVDb21wb25lbnQsXG4gICAgICAgIHdyYXBwZXJzOiBbJ2Zvcm0tZmllbGQnXSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgIGhpZGVGaWVsZFVuZGVybGluZTogdHJ1ZSxcbiAgICAgICAgICAgIGZsb2F0TGFiZWw6ICdhbHdheXMnLFxuICAgICAgICAgICAgaGlkZUxhYmVsOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9XSxcbiAgICB9KSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5TWF0VG9nZ2xlTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbInRzbGliXzEuX19leHRlbmRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0lBVytDQSw2Q0FBUzs7Ozs7Z0JBUnZELFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxRQUFRLEVBQUUsd0lBSVQ7aUJBQ0Y7O29DQVZEO0VBVytDLFNBQVM7Ozs7OztBQ1h4RDs7OztnQkFTQyxRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMseUJBQXlCLENBQUM7b0JBQ3pDLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLG1CQUFtQjt3QkFDbkIsb0JBQW9CO3dCQUNwQix3QkFBd0I7d0JBQ3hCLFlBQVksQ0FBQyxRQUFRLENBQUM7NEJBQ3BCLEtBQUssRUFBRSxDQUFDO29DQUNOLElBQUksRUFBRSxRQUFRO29DQUNkLFNBQVMsRUFBRSx5QkFBeUI7b0NBQ3BDLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQztvQ0FDeEIsY0FBYyxFQUFFO3dDQUNkLGVBQWUsRUFBRTs0Q0FDZixrQkFBa0IsRUFBRSxJQUFJOzRDQUN4QixVQUFVLEVBQUUsUUFBUTs0Q0FDcEIsU0FBUyxFQUFFLElBQUk7eUNBQ2hCO3FDQUNGO2lDQUNGLENBQUM7eUJBQ0gsQ0FBQztxQkFDSDtpQkFDRjs7Z0NBL0JEOzs7Ozs7Ozs7Ozs7Ozs7In0=