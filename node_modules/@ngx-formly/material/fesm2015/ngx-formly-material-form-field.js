import { Component, ViewChild, ViewContainerRef, Renderer2, NgModule } from '@angular/core';
import { FieldWrapper, FormlyModule, FieldType } from '@ngx-formly/core';
import { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyWrapperFormField extends FieldWrapper {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.stateChanges = new Subject();
        this._errorState = false;
        this.initialGapCalculated = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formField._control = this;
        (/** @type {?} */ (this.field))['__formField__'] = this.formField;
        // fix for https://github.com/angular/material2/issues/11437
        if (this.field.hide && this.field.templateOptions["appearance"] === 'outline') {
            this.initialGapCalculated = true;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (!this.initialGapCalculated || this.field.hide) {
            return;
        }
        this.formField._initialGapCalculated = false;
        this.initialGapCalculated = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // temporary fix for https://github.com/angular/material2/issues/7891
        if (this.formField.underlineRef && this.to["hideFieldUnderline"] === true) {
            this.renderer.removeClass(this.formField.underlineRef.nativeElement, 'mat-form-field-underline');
            this.renderer.removeClass(this.formField.underlineRef.nativeElement.firstChild, 'mat-form-field-ripple');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        delete (/** @type {?} */ (this.field))['__formField__'];
        this.stateChanges.complete();
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) { }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        this.field.focus = true;
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get errorState() {
        const /** @type {?} */ showError = this.options.showError(this);
        if (showError !== this._errorState) {
            this._errorState = showError;
            this.stateChanges.next();
        }
        return showError;
    }
    /**
     * @return {?}
     */
    get controlType() { return this.to.type; }
    /**
     * @return {?}
     */
    get focused() { return this.field.focus && !this.disabled; }
    /**
     * @return {?}
     */
    get disabled() { return this.to.disabled; }
    /**
     * @return {?}
     */
    get required() { return this.to.required; }
    /**
     * @return {?}
     */
    get placeholder() { return this.to.placeholder; }
    /**
     * @return {?}
     */
    get shouldPlaceholderFloat() { return this.shouldLabelFloat; }
    /**
     * @return {?}
     */
    get value() { return this.formControl.value; }
    /**
     * @return {?}
     */
    get ngControl() { return /** @type {?} */ (this.formControl); }
    /**
     * @return {?}
     */
    get empty() { return !this.formControl.value; }
    /**
     * @return {?}
     */
    get shouldLabelFloat() { return this.focused || !this.empty; }
}
FormlyWrapperFormField.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-mat-form-field',
                template: `
    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->
    <mat-form-field
      [hideRequiredMarker]="true"
      [floatLabel]="to.floatLabel"
      [appearance]="to.appearance"
      [color]="to.color"
      [style.width]="'100%'">
      <ng-container #fieldComponent></ng-container>
      <mat-label *ngIf="to.label && to.hideLabel !== true">
        {{ to.label }}
        <span *ngIf="to.required && to.hideRequiredMarker !== true" class="mat-form-field-required-marker">*</span>
      </mat-label>

      <ng-container matPrefix>
        <ng-container *ngTemplateOutlet="to.prefix"></ng-container>
      </ng-container>

      <ng-container matSuffix>
        <ng-container *ngTemplateOutlet="to.suffix"></ng-container>
      </ng-container>

      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->
      <mat-error [id]="null">
        <formly-validation-message [field]="field"></formly-validation-message>
      </mat-error>
      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->
      <mat-hint *ngIf="to.description" [id]="null">{{ to.description }}</mat-hint>
    </mat-form-field>
  `,
                providers: [{ provide: MatFormFieldControl, useExisting: FormlyWrapperFormField }],
            },] },
];
/** @nocollapse */
FormlyWrapperFormField.ctorParameters = () => [
    { type: Renderer2 }
];
FormlyWrapperFormField.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }],
    formField: [{ type: ViewChild, args: [MatFormField,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyMatFormFieldModule {
}
FormlyMatFormFieldModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyWrapperFormField],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatFormFieldModule,
                    FormlyModule.forChild({
                        wrappers: [{
                                name: 'form-field',
                                component: FormlyWrapperFormField,
                            }],
                    }),
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyErrorStateMatcher {
    /**
     * @param {?} field
     */
    constructor(field) {
        this.field = field;
    }
    /**
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    isErrorState(control, form) {
        return this.field && this.field.showError;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class FieldType$1 extends FieldType {
    constructor() {
        super(...arguments);
        this.formFieldControl = this;
        this.errorStateMatcher = new FormlyErrorStateMatcher(this);
        this.stateChanges = new Subject();
        this._errorState = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.formField) {
            this.formField._control = this.formFieldControl;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.matPrefix || this.matSuffix) {
            setTimeout(() => {
                this.to["prefix"] = this.matPrefix;
                this.to["suffix"] = this.matSuffix;
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.formFieldControl = null;
        if (this.formField) {
            delete this.formField._control;
        }
        this.stateChanges.complete();
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) { }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        this.field.focus = true;
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get errorState() {
        const /** @type {?} */ showError = this.options.showError(this);
        if (showError !== this._errorState) {
            this._errorState = showError;
            this.stateChanges.next();
        }
        return showError;
    }
    /**
     * @return {?}
     */
    get controlType() { return this.to.type; }
    /**
     * @return {?}
     */
    get focused() { return this.field.focus && !this.disabled; }
    /**
     * @return {?}
     */
    get disabled() { return this.to.disabled; }
    /**
     * @return {?}
     */
    get required() { return this.to.required; }
    /**
     * @return {?}
     */
    get placeholder() { return this.to.placeholder; }
    /**
     * @return {?}
     */
    get shouldPlaceholderFloat() { return this.shouldLabelFloat; }
    /**
     * @return {?}
     */
    get value() { return this.formControl.value; }
    /**
     * @return {?}
     */
    get ngControl() { return /** @type {?} */ (this.formControl); }
    /**
     * @return {?}
     */
    get empty() { return !this.formControl.value; }
    /**
     * @return {?}
     */
    get shouldLabelFloat() { return this.focused || !this.empty; }
    /**
     * @return {?}
     */
    get formField() { return (/** @type {?} */ (this.field))['__formField__']; }
}
FieldType$1.propDecorators = {
    matPrefix: [{ type: ViewChild, args: ['matPrefix',] }],
    matSuffix: [{ type: ViewChild, args: ['matSuffix',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormlyMatFormFieldModule, FieldType$1 as FieldType, FormlyWrapperFormField as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1tYXRlcmlhbC1mb3JtLWZpZWxkLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWZvcm1seS9tYXRlcmlhbC9mb3JtLWZpZWxkL2Zvcm0tZmllbGQud3JhcHBlci50cyIsIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvZm9ybS1maWVsZC9mb3JtLWZpZWxkLm1vZHVsZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvZm9ybS1maWVsZC9mb3JtbHkuZXJyb3Itc3RhdGUtbWF0Y2hlci50cyIsIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvZm9ybS1maWVsZC9maWVsZC50eXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmLCBPbkluaXQsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFdyYXBwZXIgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0Rm9ybUZpZWxkQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktd3JhcHBlci1tYXQtZm9ybS1maWVsZCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPCEtLSBmaXggaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyL3B1bGwvNzA4MyBieSBzZXR0aW5nIHdpZHRoIHRvIDEwMCUgLS0+XG4gICAgPG1hdC1mb3JtLWZpZWxkXG4gICAgICBbaGlkZVJlcXVpcmVkTWFya2VyXT1cInRydWVcIlxuICAgICAgW2Zsb2F0TGFiZWxdPVwidG8uZmxvYXRMYWJlbFwiXG4gICAgICBbYXBwZWFyYW5jZV09XCJ0by5hcHBlYXJhbmNlXCJcbiAgICAgIFtjb2xvcl09XCJ0by5jb2xvclwiXG4gICAgICBbc3R5bGUud2lkdGhdPVwiJzEwMCUnXCI+XG4gICAgICA8bmctY29udGFpbmVyICNmaWVsZENvbXBvbmVudD48L25nLWNvbnRhaW5lcj5cbiAgICAgIDxtYXQtbGFiZWwgKm5nSWY9XCJ0by5sYWJlbCAmJiB0by5oaWRlTGFiZWwgIT09IHRydWVcIj5cbiAgICAgICAge3sgdG8ubGFiZWwgfX1cbiAgICAgICAgPHNwYW4gKm5nSWY9XCJ0by5yZXF1aXJlZCAmJiB0by5oaWRlUmVxdWlyZWRNYXJrZXIgIT09IHRydWVcIiBjbGFzcz1cIm1hdC1mb3JtLWZpZWxkLXJlcXVpcmVkLW1hcmtlclwiPio8L3NwYW4+XG4gICAgICA8L21hdC1sYWJlbD5cblxuICAgICAgPG5nLWNvbnRhaW5lciBtYXRQcmVmaXg+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0by5wcmVmaXhcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICA8bmctY29udGFpbmVyIG1hdFN1ZmZpeD5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRvLnN1ZmZpeFwiPjwvbmctY29udGFpbmVyPlxuICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgIDwhLS0gZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMi9pc3N1ZXMvNzczNyBieSBzZXR0aW5nIGlkIHRvIG51bGwgIC0tPlxuICAgICAgPG1hdC1lcnJvciBbaWRdPVwibnVsbFwiPlxuICAgICAgICA8Zm9ybWx5LXZhbGlkYXRpb24tbWVzc2FnZSBbZmllbGRdPVwiZmllbGRcIj48L2Zvcm1seS12YWxpZGF0aW9uLW1lc3NhZ2U+XG4gICAgICA8L21hdC1lcnJvcj5cbiAgICAgIDwhLS0gZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMi9pc3N1ZXMvNzczNyBieSBzZXR0aW5nIGlkIHRvIG51bGwgIC0tPlxuICAgICAgPG1hdC1oaW50ICpuZ0lmPVwidG8uZGVzY3JpcHRpb25cIiBbaWRdPVwibnVsbFwiPnt7IHRvLmRlc2NyaXB0aW9uIH19PC9tYXQtaGludD5cbiAgICA8L21hdC1mb3JtLWZpZWxkPlxuICBgLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE1hdEZvcm1GaWVsZENvbnRyb2wsIHVzZUV4aXN0aW5nOiBGb3JtbHlXcmFwcGVyRm9ybUZpZWxkIH1dLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlXcmFwcGVyRm9ybUZpZWxkIGV4dGVuZHMgRmllbGRXcmFwcGVyIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE1hdEZvcm1GaWVsZENvbnRyb2w8YW55PiwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XG4gIEBWaWV3Q2hpbGQoJ2ZpZWxkQ29tcG9uZW50JywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pIGZpZWxkQ29tcG9uZW50OiBWaWV3Q29udGFpbmVyUmVmO1xuICBAVmlld0NoaWxkKE1hdEZvcm1GaWVsZCkgZm9ybUZpZWxkOiBNYXRGb3JtRmllbGQ7XG5cbiAgc3RhdGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgX2Vycm9yU3RhdGUgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpbml0aWFsR2FwQ2FsY3VsYXRlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmZvcm1GaWVsZC5fY29udHJvbCA9IHRoaXM7XG4gICAgKDxhbnk+IHRoaXMuZmllbGQpWydfX2Zvcm1GaWVsZF9fJ10gPSB0aGlzLmZvcm1GaWVsZDtcblxuICAgIC8vIGZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyL2lzc3Vlcy8xMTQzN1xuICAgIGlmICh0aGlzLmZpZWxkLmhpZGUgJiYgdGhpcy5maWVsZC50ZW1wbGF0ZU9wdGlvbnMuYXBwZWFyYW5jZSA9PT0gJ291dGxpbmUnKSB7XG4gICAgICB0aGlzLmluaXRpYWxHYXBDYWxjdWxhdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxHYXBDYWxjdWxhdGVkIHx8IHRoaXMuZmllbGQuaGlkZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybUZpZWxkLl9pbml0aWFsR2FwQ2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdGlhbEdhcENhbGN1bGF0ZWQgPSB0cnVlO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIC8vIHRlbXBvcmFyeSBmaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMi9pc3N1ZXMvNzg5MVxuICAgIGlmICh0aGlzLmZvcm1GaWVsZC51bmRlcmxpbmVSZWYgJiYgdGhpcy50by5oaWRlRmllbGRVbmRlcmxpbmUgPT09IHRydWUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5mb3JtRmllbGQudW5kZXJsaW5lUmVmLm5hdGl2ZUVsZW1lbnQsICdtYXQtZm9ybS1maWVsZC11bmRlcmxpbmUnKTtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5mb3JtRmllbGQudW5kZXJsaW5lUmVmLm5hdGl2ZUVsZW1lbnQuZmlyc3RDaGlsZCwgJ21hdC1mb3JtLWZpZWxkLXJpcHBsZScpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGRlbGV0ZSAoPGFueT4gdGhpcy5maWVsZClbJ19fZm9ybUZpZWxkX18nXTtcbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgc2V0RGVzY3JpYmVkQnlJZHMoaWRzOiBzdHJpbmdbXSk6IHZvaWQgeyB9XG4gIG9uQ29udGFpbmVyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmZpZWxkLmZvY3VzID0gdHJ1ZTtcbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gIH1cblxuICBnZXQgZXJyb3JTdGF0ZSgpIHtcbiAgICBjb25zdCBzaG93RXJyb3IgPSB0aGlzLm9wdGlvbnMuc2hvd0Vycm9yKHRoaXMpO1xuICAgIGlmIChzaG93RXJyb3IgIT09IHRoaXMuX2Vycm9yU3RhdGUpIHtcbiAgICAgIHRoaXMuX2Vycm9yU3RhdGUgPSBzaG93RXJyb3I7XG4gICAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3dFcnJvcjtcbiAgfVxuICBnZXQgY29udHJvbFR5cGUoKSB7IHJldHVybiB0aGlzLnRvLnR5cGU7IH1cbiAgZ2V0IGZvY3VzZWQoKSB7IHJldHVybiB0aGlzLmZpZWxkLmZvY3VzICYmICF0aGlzLmRpc2FibGVkOyB9XG4gIGdldCBkaXNhYmxlZCgpIHsgcmV0dXJuIHRoaXMudG8uZGlzYWJsZWQ7IH1cbiAgZ2V0IHJlcXVpcmVkKCkgeyByZXR1cm4gdGhpcy50by5yZXF1aXJlZDsgfVxuICBnZXQgcGxhY2Vob2xkZXIoKSB7IHJldHVybiB0aGlzLnRvLnBsYWNlaG9sZGVyOyB9XG4gIGdldCBzaG91bGRQbGFjZWhvbGRlckZsb2F0KCkgeyByZXR1cm4gdGhpcy5zaG91bGRMYWJlbEZsb2F0OyB9XG4gIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMuZm9ybUNvbnRyb2wudmFsdWU7IH1cbiAgZ2V0IG5nQ29udHJvbCgpIHsgcmV0dXJuIHRoaXMuZm9ybUNvbnRyb2wgYXMgYW55OyB9XG4gIGdldCBlbXB0eSgpIHsgcmV0dXJuICF0aGlzLmZvcm1Db250cm9sLnZhbHVlOyB9XG4gIGdldCBzaG91bGRMYWJlbEZsb2F0KCkgeyByZXR1cm4gdGhpcy5mb2N1c2VkIHx8ICF0aGlzLmVtcHR5OyB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1seU1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgRm9ybWx5V3JhcHBlckZvcm1GaWVsZCB9IGZyb20gJy4vZm9ybS1maWVsZC53cmFwcGVyJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbRm9ybWx5V3JhcHBlckZvcm1GaWVsZF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBNYXRGb3JtRmllbGRNb2R1bGUsXG4gICAgRm9ybWx5TW9kdWxlLmZvckNoaWxkKHtcbiAgICAgIHdyYXBwZXJzOiBbe1xuICAgICAgICBuYW1lOiAnZm9ybS1maWVsZCcsXG4gICAgICAgIGNvbXBvbmVudDogRm9ybWx5V3JhcHBlckZvcm1GaWVsZCxcbiAgICAgIH1dLFxuICAgIH0pLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlNYXRGb3JtRmllbGRNb2R1bGUgeyB9XG4iLCJpbXBvcnQgeyBGb3JtQ29udHJvbCwgRm9ybUdyb3VwRGlyZWN0aXZlLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFcnJvclN0YXRlTWF0Y2hlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcblxuZXhwb3J0IGNsYXNzIEZvcm1seUVycm9yU3RhdGVNYXRjaGVyIGltcGxlbWVudHMgRXJyb3JTdGF0ZU1hdGNoZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpZWxkOiBGaWVsZCkge31cblxuICBpc0Vycm9yU3RhdGUoY29udHJvbDogRm9ybUNvbnRyb2wgfCBudWxsLCBmb3JtOiBGb3JtR3JvdXBEaXJlY3RpdmUgfCBOZ0Zvcm0gfCBudWxsKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGQgJiYgdGhpcy5maWVsZC5zaG93RXJyb3I7XG4gIH1cbn1cbiIsImltcG9ydCB7IE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgYXMgQ29yZUZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTWF0Rm9ybUZpZWxkLCBNYXRGb3JtRmllbGRDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBGb3JtbHlFcnJvclN0YXRlTWF0Y2hlciB9IGZyb20gJy4vZm9ybWx5LmVycm9yLXN0YXRlLW1hdGNoZXInO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmllbGRUeXBlIGV4dGVuZHMgQ29yZUZpZWxkVHlwZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBNYXRGb3JtRmllbGRDb250cm9sPGFueT4ge1xuICBAVmlld0NoaWxkKCdtYXRQcmVmaXgnKSBtYXRQcmVmaXg6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBWaWV3Q2hpbGQoJ21hdFN1ZmZpeCcpIG1hdFN1ZmZpeDogVGVtcGxhdGVSZWY8YW55PjtcblxuICBmb3JtRmllbGRDb250cm9sOiBNYXRGb3JtRmllbGRDb250cm9sPGFueT4gPSB0aGlzO1xuICBlcnJvclN0YXRlTWF0Y2hlciA9IG5ldyBGb3JtbHlFcnJvclN0YXRlTWF0Y2hlcih0aGlzKTtcbiAgc3RhdGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgX2Vycm9yU3RhdGUgPSBmYWxzZTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5mb3JtRmllbGQpIHtcbiAgICAgIHRoaXMuZm9ybUZpZWxkLl9jb250cm9sID0gdGhpcy5mb3JtRmllbGRDb250cm9sO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5tYXRQcmVmaXggfHwgdGhpcy5tYXRTdWZmaXgpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvLnByZWZpeCA9IHRoaXMubWF0UHJlZml4O1xuICAgICAgICB0aGlzLnRvLnN1ZmZpeCA9IHRoaXMubWF0U3VmZml4O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5mb3JtRmllbGRDb250cm9sID0gbnVsbDtcbiAgICBpZiAodGhpcy5mb3JtRmllbGQpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmZvcm1GaWVsZC5fY29udHJvbDtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZUNoYW5nZXMuY29tcGxldGUoKTtcbiAgfVxuXG4gIHNldERlc2NyaWJlZEJ5SWRzKGlkczogc3RyaW5nW10pOiB2b2lkIHsgfVxuICBvbkNvbnRhaW5lckNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5maWVsZC5mb2N1cyA9IHRydWU7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICB9XG5cbiAgZ2V0IGVycm9yU3RhdGUoKSB7XG4gICAgY29uc3Qgc2hvd0Vycm9yID0gdGhpcy5vcHRpb25zLnNob3dFcnJvcih0aGlzKTtcbiAgICBpZiAoc2hvd0Vycm9yICE9PSB0aGlzLl9lcnJvclN0YXRlKSB7XG4gICAgICB0aGlzLl9lcnJvclN0YXRlID0gc2hvd0Vycm9yO1xuICAgICAgdGhpcy5zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICAgIH1cblxuICAgIHJldHVybiBzaG93RXJyb3I7XG4gIH1cblxuICBnZXQgY29udHJvbFR5cGUoKSB7IHJldHVybiB0aGlzLnRvLnR5cGU7IH1cbiAgZ2V0IGZvY3VzZWQoKSB7IHJldHVybiB0aGlzLmZpZWxkLmZvY3VzICYmICF0aGlzLmRpc2FibGVkOyB9XG4gIGdldCBkaXNhYmxlZCgpIHsgcmV0dXJuIHRoaXMudG8uZGlzYWJsZWQ7IH1cbiAgZ2V0IHJlcXVpcmVkKCkgeyByZXR1cm4gdGhpcy50by5yZXF1aXJlZDsgfVxuICBnZXQgcGxhY2Vob2xkZXIoKSB7IHJldHVybiB0aGlzLnRvLnBsYWNlaG9sZGVyOyB9XG4gIGdldCBzaG91bGRQbGFjZWhvbGRlckZsb2F0KCkgeyByZXR1cm4gdGhpcy5zaG91bGRMYWJlbEZsb2F0OyB9XG4gIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMuZm9ybUNvbnRyb2wudmFsdWU7IH1cbiAgZ2V0IG5nQ29udHJvbCgpIHsgcmV0dXJuIHRoaXMuZm9ybUNvbnRyb2wgYXMgYW55OyB9XG4gIGdldCBlbXB0eSgpIHsgcmV0dXJuICF0aGlzLmZvcm1Db250cm9sLnZhbHVlOyB9XG4gIGdldCBzaG91bGRMYWJlbEZsb2F0KCkgeyByZXR1cm4gdGhpcy5mb2N1c2VkIHx8ICF0aGlzLmVtcHR5OyB9XG4gIGdldCBmb3JtRmllbGQoKTogTWF0Rm9ybUZpZWxkIHsgcmV0dXJuICg8YW55PnRoaXMuZmllbGQpWydfX2Zvcm1GaWVsZF9fJ107IH1cbn1cbiJdLCJuYW1lcyI6WyJDb3JlRmllbGRUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLDRCQXdDb0MsU0FBUSxZQUFZOzs7O0lBUXRELFlBQW9CLFFBQW1CO1FBQ3JDLEtBQUssRUFBRSxDQUFDO1FBRFUsYUFBUSxHQUFSLFFBQVEsQ0FBVzs0QkFK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