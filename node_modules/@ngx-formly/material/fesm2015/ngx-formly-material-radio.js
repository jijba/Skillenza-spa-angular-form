import { Component, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MatRadioModule } from '@angular/material/radio';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyFieldRadio extends FieldType {
    /**
     * @param {?} $event
     * @return {?}
     */
    change($event) {
        if (this.to.change) {
            this.to.change(this.field, $event);
        }
    }
}
FormlyFieldRadio.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-radio',
                template: `
    <mat-radio-group [formControl]="formControl" [formlyAttributes]="field" (change)="change($event)">
      <mat-radio-button *ngFor="let option of to.options; let i = index;"
        [id]="id + '_' + i"
        [color]="to.color"
        [labelPosition]="to.labelPosition"
        [value]="option.label ? option.value : option.key">
        {{ option.label ? option.label : option.value }}
      </mat-radio-button>
    </mat-radio-group>
  `,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyMatRadioModule {
}
FormlyMatRadioModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyFieldRadio],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatRadioModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'radio',
                                component: FormlyFieldRadio,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        hideFieldUnderline: true,
                                        floatLabel: 'always',
                                        options: [],
                                    },
                                },
                            }],
                    }),
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormlyMatRadioModule, FormlyFieldRadio };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1tYXRlcmlhbC1yYWRpby5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvcmFkaW8vcmFkaW8udHlwZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvcmFkaW8vcmFkaW8ubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnQG5neC1mb3JtbHkvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBNYXRSYWRpb0NoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3JhZGlvJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LWZpZWxkLW1hdC1yYWRpbycsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG1hdC1yYWRpby1ncm91cCBbZm9ybUNvbnRyb2xdPVwiZm9ybUNvbnRyb2xcIiBbZm9ybWx5QXR0cmlidXRlc109XCJmaWVsZFwiIChjaGFuZ2UpPVwiY2hhbmdlKCRldmVudClcIj5cbiAgICAgIDxtYXQtcmFkaW8tYnV0dG9uICpuZ0Zvcj1cImxldCBvcHRpb24gb2YgdG8ub3B0aW9uczsgbGV0IGkgPSBpbmRleDtcIlxuICAgICAgICBbaWRdPVwiaWQgKyAnXycgKyBpXCJcbiAgICAgICAgW2NvbG9yXT1cInRvLmNvbG9yXCJcbiAgICAgICAgW2xhYmVsUG9zaXRpb25dPVwidG8ubGFiZWxQb3NpdGlvblwiXG4gICAgICAgIFt2YWx1ZV09XCJvcHRpb24ubGFiZWwgPyBvcHRpb24udmFsdWUgOiBvcHRpb24ua2V5XCI+XG4gICAgICAgIHt7IG9wdGlvbi5sYWJlbCA/IG9wdGlvbi5sYWJlbCA6IG9wdGlvbi52YWx1ZSB9fVxuICAgICAgPC9tYXQtcmFkaW8tYnV0dG9uPlxuICAgIDwvbWF0LXJhZGlvLWdyb3VwPlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlGaWVsZFJhZGlvIGV4dGVuZHMgRmllbGRUeXBlIHtcbiAgY2hhbmdlKCRldmVudDogTWF0UmFkaW9DaGFuZ2UpIHtcbiAgICBpZiAodGhpcy50by5jaGFuZ2UpIHtcbiAgICAgIHRoaXMudG8uY2hhbmdlKHRoaXMuZmllbGQsICRldmVudCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1seU1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRm9ybWx5TWF0Rm9ybUZpZWxkTW9kdWxlIH0gZnJvbSAnQG5neC1mb3JtbHkvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBNYXRSYWRpb01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3JhZGlvJztcblxuaW1wb3J0IHsgRm9ybWx5RmllbGRSYWRpbyB9IGZyb20gJy4vcmFkaW8udHlwZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0Zvcm1seUZpZWxkUmFkaW9dLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgTWF0UmFkaW9Nb2R1bGUsXG5cbiAgICBGb3JtbHlNYXRGb3JtRmllbGRNb2R1bGUsXG4gICAgRm9ybWx5TW9kdWxlLmZvckNoaWxkKHtcbiAgICAgIHR5cGVzOiBbe1xuICAgICAgICBuYW1lOiAncmFkaW8nLFxuICAgICAgICBjb21wb25lbnQ6IEZvcm1seUZpZWxkUmFkaW8sXG4gICAgICAgIHdyYXBwZXJzOiBbJ2Zvcm0tZmllbGQnXSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgIGhpZGVGaWVsZFVuZGVybGluZTogdHJ1ZSxcbiAgICAgICAgICAgIGZsb2F0TGFiZWw6ICdhbHdheXMnLFxuICAgICAgICAgICAgb3B0aW9uczogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH1dLFxuICAgIH0pLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlNYXRSYWRpb01vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHNCQWtCOEIsU0FBUSxTQUFTOzs7OztJQUM3QyxNQUFNLENBQUMsTUFBc0I7UUFDM0IsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3BDO0tBQ0Y7OztZQW5CRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsUUFBUSxFQUFFOzs7Ozs7Ozs7O0dBVVQ7YUFDRjs7Ozs7OztBQ2pCRDs7O1lBVUMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDO2dCQUNoQyxPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixtQkFBbUI7b0JBQ25CLGNBQWM7b0JBRWQsd0JBQXdCO29CQUN4QixZQUFZLENBQUMsUUFBUSxDQUFDO3dCQUNwQixLQUFLLEVBQUUsQ0FBQztnQ0FDTixJQUFJLEVBQUUsT0FBTztnQ0FDYixTQUFTLEVBQUUsZ0JBQWdCO2dDQUMzQixRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0NBQ3hCLGNBQWMsRUFBRTtvQ0FDZCxlQUFlLEVBQUU7d0NBQ2Ysa0JBQWtCLEVBQUUsSUFBSTt3Q0FDeEIsVUFBVSxFQUFFLFFBQVE7d0NBQ3BCLE9BQU8sRUFBRSxFQUFFO3FDQUNaO2lDQUNGOzZCQUNGLENBQUM7cUJBQ0gsQ0FBQztpQkFDSDthQUNGOzs7Ozs7Ozs7Ozs7Ozs7In0=