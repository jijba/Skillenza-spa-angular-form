import { Component, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MatSliderModule } from '@angular/material/slider';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlySliderTypeComponent extends FieldType {
}
FormlySliderTypeComponent.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-slider',
                template: `
    <mat-slider
      [style.width]="'100%'"
      [formControl]="formControl"
      [formlyAttributes]="field"
      [color]="to.color">
    </mat-slider>
  `,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyMatSliderModule {
}
FormlyMatSliderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlySliderTypeComponent],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatSliderModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'slider',
                                component: FormlySliderTypeComponent,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        hideFieldUnderline: true,
                                        floatLabel: 'always',
                                    },
                                },
                            }],
                    }),
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormlyMatSliderModule, FormlySliderTypeComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1tYXRlcmlhbC1zbGlkZXIuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZ3gtZm9ybWx5L21hdGVyaWFsL3NsaWRlci9zbGlkZXIudHlwZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvc2xpZGVyL3NsaWRlci5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICdAbmd4LWZvcm1seS9tYXRlcmlhbC9mb3JtLWZpZWxkJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LWZpZWxkLW1hdC1zbGlkZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxtYXQtc2xpZGVyXG4gICAgICBbc3R5bGUud2lkdGhdPVwiJzEwMCUnXCJcbiAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXG4gICAgICBbZm9ybWx5QXR0cmlidXRlc109XCJmaWVsZFwiXG4gICAgICBbY29sb3JdPVwidG8uY29sb3JcIj5cbiAgICA8L21hdC1zbGlkZXI+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seVNsaWRlclR5cGVDb21wb25lbnQgZXh0ZW5kcyBGaWVsZFR5cGUge31cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybWx5TW9kdWxlIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0U2xpZGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2xpZGVyJztcbmltcG9ydCB7IEZvcm1seU1hdEZvcm1GaWVsZE1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuXG5pbXBvcnQgeyBGb3JtbHlTbGlkZXJUeXBlQ29tcG9uZW50IH0gZnJvbSAnLi9zbGlkZXIudHlwZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0Zvcm1seVNsaWRlclR5cGVDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgTWF0U2xpZGVyTW9kdWxlLFxuICAgIEZvcm1seU1hdEZvcm1GaWVsZE1vZHVsZSxcbiAgICBGb3JtbHlNb2R1bGUuZm9yQ2hpbGQoe1xuICAgICAgdHlwZXM6IFt7XG4gICAgICAgIG5hbWU6ICdzbGlkZXInLFxuICAgICAgICBjb21wb25lbnQ6IEZvcm1seVNsaWRlclR5cGVDb21wb25lbnQsXG4gICAgICAgIHdyYXBwZXJzOiBbJ2Zvcm0tZmllbGQnXSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgIGhpZGVGaWVsZFVuZGVybGluZTogdHJ1ZSxcbiAgICAgICAgICAgIGZsb2F0TGFiZWw6ICdhbHdheXMnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9XSxcbiAgICB9KSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5TWF0U2xpZGVyTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsK0JBY3VDLFNBQVEsU0FBUzs7O1lBWHZELFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxRQUFRLEVBQUU7Ozs7Ozs7R0FPVDthQUNGOzs7Ozs7O0FDYkQ7OztZQVNDLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztnQkFDekMsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osbUJBQW1CO29CQUNuQixlQUFlO29CQUNmLHdCQUF3QjtvQkFDeEIsWUFBWSxDQUFDLFFBQVEsQ0FBQzt3QkFDcEIsS0FBSyxFQUFFLENBQUM7Z0NBQ04sSUFBSSxFQUFFLFFBQVE7Z0NBQ2QsU0FBUyxFQUFFLHlCQUF5QjtnQ0FDcEMsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDO2dDQUN4QixjQUFjLEVBQUU7b0NBQ2QsZUFBZSxFQUFFO3dDQUNmLGtCQUFrQixFQUFFLElBQUk7d0NBQ3hCLFVBQVUsRUFBRSxRQUFRO3FDQUNyQjtpQ0FDRjs2QkFDRixDQUFDO3FCQUNILENBQUM7aUJBQ0g7YUFDRjs7Ozs7Ozs7Ozs7Ozs7OyJ9