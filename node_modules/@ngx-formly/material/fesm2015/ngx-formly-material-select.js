import { Component, ViewChild, Pipe, NgModule } from '@angular/core';
import { MatSelect, MatSelectModule } from '@angular/material/select';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyFieldSelect extends FieldType {
    /**
     * @return {?}
     */
    get labelProp() { return this.to["labelProp"] || 'label'; }
    /**
     * @return {?}
     */
    get valueProp() { return this.to["valueProp"] || 'value'; }
    /**
     * @return {?}
     */
    get groupProp() { return this.to["groupProp"] || 'group'; }
    /**
     * @param {?} $event
     * @return {?}
     */
    change($event) {
        if (this.to.change) {
            this.to.change(this.field, $event);
        }
    }
}
FormlyFieldSelect.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-select',
                template: `
    <mat-select [id]="id"
      [formControl]="formControl"
      [formlyAttributes]="field"
      [placeholder]="to.placeholder"
      [multiple]="to.multiple"
      (selectionChange)="change($event)"
      [errorStateMatcher]="errorStateMatcher">
      <ng-container *ngFor="let item of to.options | formlySelectOptions:groupProp | async">
        <mat-optgroup *ngIf="item.group" [label]="item.label">
          <mat-option *ngFor="let child of item.group" [value]="child[valueProp]" [disabled]="child.disabled">
            {{ child[labelProp] }}
          </mat-option>
        </mat-optgroup>
        <mat-option *ngIf="!item.group" [value]="item[valueProp]" [disabled]="item.disabled">{{ item[labelProp] }}</mat-option>
      </ng-container>
    </mat-select>
  `,
            },] },
];
FormlyFieldSelect.propDecorators = {
    formFieldControl: [{ type: ViewChild, args: [MatSelect,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlySelectOptionsPipe {
    /**
     * @param {?} options
     * @param {?=} groupBy
     * @return {?}
     */
    transform(options, groupBy = 'group') {
        if (!(options instanceof Observable)) {
            options = of(options);
        }
        return (/** @type {?} */ (options)).pipe(map(value => this.toOptions(value, groupBy)));
    }
    /**
     * @param {?} options
     * @param {?} groupBy
     * @return {?}
     */
    toOptions(options, groupBy) {
        const /** @type {?} */ gOptions = [], /** @type {?} */
        groups = {};
        options.map((option) => {
            if (!option[groupBy]) {
                gOptions.push(option);
            }
            else {
                if (groups[option[groupBy]]) {
                    groups[option[groupBy]].push(option);
                }
                else {
                    groups[option[groupBy]] = [option];
                    gOptions.push({
                        label: option[groupBy],
                        group: groups[option[groupBy]],
                    });
                }
            }
        });
        return gOptions;
    }
}
FormlySelectOptionsPipe.decorators = [
    { type: Pipe, args: [{ name: 'formlySelectOptions' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyMatSelectModule {
}
FormlyMatSelectModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyFieldSelect, FormlySelectOptionsPipe],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatSelectModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'select',
                                component: FormlyFieldSelect,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        options: [],
                                    },
                                },
                            }],
                    }),
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormlyMatSelectModule, FormlyFieldSelect, FormlySelectOptionsPipe as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1tYXRlcmlhbC1zZWxlY3QuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZ3gtZm9ybWx5L21hdGVyaWFsL3NlbGVjdC9zZWxlY3QudHlwZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvc2VsZWN0L3NlbGVjdC1vcHRpb25zLnBpcGUudHMiLCJuZzovL0BuZ3gtZm9ybWx5L21hdGVyaWFsL3NlbGVjdC9zZWxlY3QubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTZWxlY3QsIE1hdFNlbGVjdENoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NlbGVjdCc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICdAbmd4LWZvcm1seS9tYXRlcmlhbC9mb3JtLWZpZWxkJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LWZpZWxkLW1hdC1zZWxlY3QnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxtYXQtc2VsZWN0IFtpZF09XCJpZFwiXG4gICAgICBbZm9ybUNvbnRyb2xdPVwiZm9ybUNvbnRyb2xcIlxuICAgICAgW2Zvcm1seUF0dHJpYnV0ZXNdPVwiZmllbGRcIlxuICAgICAgW3BsYWNlaG9sZGVyXT1cInRvLnBsYWNlaG9sZGVyXCJcbiAgICAgIFttdWx0aXBsZV09XCJ0by5tdWx0aXBsZVwiXG4gICAgICAoc2VsZWN0aW9uQ2hhbmdlKT1cImNoYW5nZSgkZXZlbnQpXCJcbiAgICAgIFtlcnJvclN0YXRlTWF0Y2hlcl09XCJlcnJvclN0YXRlTWF0Y2hlclwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbSBvZiB0by5vcHRpb25zIHwgZm9ybWx5U2VsZWN0T3B0aW9uczpncm91cFByb3AgfCBhc3luY1wiPlxuICAgICAgICA8bWF0LW9wdGdyb3VwICpuZ0lmPVwiaXRlbS5ncm91cFwiIFtsYWJlbF09XCJpdGVtLmxhYmVsXCI+XG4gICAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IGNoaWxkIG9mIGl0ZW0uZ3JvdXBcIiBbdmFsdWVdPVwiY2hpbGRbdmFsdWVQcm9wXVwiIFtkaXNhYmxlZF09XCJjaGlsZC5kaXNhYmxlZFwiPlxuICAgICAgICAgICAge3sgY2hpbGRbbGFiZWxQcm9wXSB9fVxuICAgICAgICAgIDwvbWF0LW9wdGlvbj5cbiAgICAgICAgPC9tYXQtb3B0Z3JvdXA+XG4gICAgICAgIDxtYXQtb3B0aW9uICpuZ0lmPVwiIWl0ZW0uZ3JvdXBcIiBbdmFsdWVdPVwiaXRlbVt2YWx1ZVByb3BdXCIgW2Rpc2FibGVkXT1cIml0ZW0uZGlzYWJsZWRcIj57eyBpdGVtW2xhYmVsUHJvcF0gfX08L21hdC1vcHRpb24+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L21hdC1zZWxlY3Q+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUZpZWxkU2VsZWN0IGV4dGVuZHMgRmllbGRUeXBlIHtcbiAgQFZpZXdDaGlsZChNYXRTZWxlY3QpIGZvcm1GaWVsZENvbnRyb2w6IE1hdFNlbGVjdDtcblxuICBnZXQgbGFiZWxQcm9wKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLnRvLmxhYmVsUHJvcCB8fCAnbGFiZWwnOyB9XG4gIGdldCB2YWx1ZVByb3AoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMudG8udmFsdWVQcm9wIHx8ICd2YWx1ZSc7IH1cbiAgZ2V0IGdyb3VwUHJvcCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy50by5ncm91cFByb3AgfHwgJ2dyb3VwJzsgfVxuXG4gIGNoYW5nZSgkZXZlbnQ6IE1hdFNlbGVjdENoYW5nZSkge1xuICAgIGlmICh0aGlzLnRvLmNoYW5nZSkge1xuICAgICAgdGhpcy50by5jaGFuZ2UodGhpcy5maWVsZCwgJGV2ZW50KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIGFzIG9ic2VydmFibGVPZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AUGlwZSh7IG5hbWU6ICdmb3JtbHlTZWxlY3RPcHRpb25zJyB9KVxuZXhwb3J0IGNsYXNzIEZvcm1seVNlbGVjdE9wdGlvbnNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvcHRpb25zLCBncm91cEJ5ID0gJ2dyb3VwJykge1xuICAgIGlmICghKG9wdGlvbnMgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSkge1xuICAgICAgb3B0aW9ucyA9IG9ic2VydmFibGVPZihvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKG9wdGlvbnMgYXMgT2JzZXJ2YWJsZTxhbnk+KS5waXBlKFxuICAgICAgbWFwKHZhbHVlID0+IHRoaXMudG9PcHRpb25zKHZhbHVlLCBncm91cEJ5KSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9PcHRpb25zKG9wdGlvbnMsIGdyb3VwQnkpIHtcbiAgICBjb25zdCBnT3B0aW9uczogYW55W10gPSBbXSxcbiAgICAgIGdyb3VwczogeyBba2V5OiBzdHJpbmddOiBhbnlbXSB9ID0ge307XG5cbiAgICBvcHRpb25zLm1hcCgob3B0aW9uOiBhbnkpID0+IHtcbiAgICAgIGlmICghb3B0aW9uW2dyb3VwQnldKSB7XG4gICAgICAgIGdPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChncm91cHNbb3B0aW9uW2dyb3VwQnldXSkge1xuICAgICAgICAgIGdyb3Vwc1tvcHRpb25bZ3JvdXBCeV1dLnB1c2gob3B0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBncm91cHNbb3B0aW9uW2dyb3VwQnldXSA9IFtvcHRpb25dO1xuICAgICAgICAgIGdPcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgbGFiZWw6IG9wdGlvbltncm91cEJ5XSxcbiAgICAgICAgICAgIGdyb3VwOiBncm91cHNbb3B0aW9uW2dyb3VwQnldXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdPcHRpb25zO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1seU1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRm9ybWx5TWF0Rm9ybUZpZWxkTW9kdWxlIH0gZnJvbSAnQG5neC1mb3JtbHkvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBNYXRTZWxlY3RNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QnO1xuXG5pbXBvcnQgeyBGb3JtbHlGaWVsZFNlbGVjdCB9IGZyb20gJy4vc2VsZWN0LnR5cGUnO1xuaW1wb3J0IHsgRm9ybWx5U2VsZWN0T3B0aW9uc1BpcGUgfSBmcm9tICcuL3NlbGVjdC1vcHRpb25zLnBpcGUnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtGb3JtbHlGaWVsZFNlbGVjdCwgRm9ybWx5U2VsZWN0T3B0aW9uc1BpcGVdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgTWF0U2VsZWN0TW9kdWxlLFxuXG4gICAgRm9ybWx5TWF0Rm9ybUZpZWxkTW9kdWxlLFxuICAgIEZvcm1seU1vZHVsZS5mb3JDaGlsZCh7XG4gICAgICB0eXBlczogW3tcbiAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgIGNvbXBvbmVudDogRm9ybWx5RmllbGRTZWxlY3QsXG4gICAgICAgIHdyYXBwZXJzOiBbJ2Zvcm0tZmllbGQnXSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9XSxcbiAgICB9KSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5TWF0U2VsZWN0TW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIm9ic2VydmFibGVPZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHVCQXlCK0IsU0FBUSxTQUFTOzs7O0lBRzlDLElBQUksU0FBUyxLQUFhLE9BQU8sSUFBSSxDQUFDLEVBQUUsaUJBQWMsT0FBTyxDQUFDLEVBQUU7Ozs7SUFDaEUsSUFBSSxTQUFTLEtBQWEsT0FBTyxJQUFJLENBQUMsRUFBRSxpQkFBYyxPQUFPLENBQUMsRUFBRTs7OztJQUNoRSxJQUFJLFNBQVMsS0FBYSxPQUFPLElBQUksQ0FBQyxFQUFFLGlCQUFjLE9BQU8sQ0FBQyxFQUFFOzs7OztJQUVoRSxNQUFNLENBQUMsTUFBdUI7UUFDNUIsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3BDO0tBQ0Y7OztZQWhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCVDthQUNGOzs7K0JBRUUsU0FBUyxTQUFDLFNBQVM7Ozs7Ozs7QUMxQnRCOzs7Ozs7SUFNRSxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sR0FBRyxPQUFPO1FBQ2xDLElBQUksRUFBRSxPQUFPLFlBQVksVUFBVSxDQUFDLEVBQUU7WUFDcEMsT0FBTyxHQUFHQSxFQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDakM7UUFFRCxPQUFPLG1CQUFDLE9BQTBCLEdBQUUsSUFBSSxDQUN0QyxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQzdDLENBQUM7S0FDSDs7Ozs7O0lBRU8sU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPO1FBQ2hDLHVCQUFNLFFBQVEsR0FBVSxFQUFFO1FBQ3hCLE1BQU0sR0FBNkIsRUFBRSxDQUFDO1FBRXhDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFXO1lBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3BCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0wsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7b0JBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3RDO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNuQyxRQUFRLENBQUMsSUFBSSxDQUFDO3dCQUNaLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDO3dCQUN0QixLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDL0IsQ0FBQyxDQUFDO2lCQUNKO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPLFFBQVEsQ0FBQzs7OztZQWhDbkIsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFOzs7Ozs7O0FDSnJDOzs7WUFXQyxRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUM7Z0JBQzFELE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLG1CQUFtQjtvQkFDbkIsZUFBZTtvQkFFZix3QkFBd0I7b0JBQ3hCLFlBQVksQ0FBQyxRQUFRLENBQUM7d0JBQ3BCLEtBQUssRUFBRSxDQUFDO2dDQUNOLElBQUksRUFBRSxRQUFRO2dDQUNkLFNBQVMsRUFBRSxpQkFBaUI7Z0NBQzVCLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQztnQ0FDeEIsY0FBYyxFQUFFO29DQUNkLGVBQWUsRUFBRTt3Q0FDZixPQUFPLEVBQUUsRUFBRTtxQ0FDWjtpQ0FDRjs2QkFDRixDQUFDO3FCQUNILENBQUM7aUJBQ0g7YUFDRjs7Ozs7Ozs7Ozs7Ozs7OyJ9