/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { TemplateRef, ViewChild } from '@angular/core';
import { FieldType as CoreFieldType } from '@ngx-formly/core';
import { Subject } from 'rxjs';
import { FormlyErrorStateMatcher } from './formly.error-state-matcher';
/**
 * @abstract
 */
export class FieldType extends CoreFieldType {
    constructor() {
        super(...arguments);
        this.formFieldControl = this;
        this.errorStateMatcher = new FormlyErrorStateMatcher(this);
        this.stateChanges = new Subject();
        this._errorState = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.formField) {
            this.formField._control = this.formFieldControl;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.matPrefix || this.matSuffix) {
            setTimeout(() => {
                this.to["prefix"] = this.matPrefix;
                this.to["suffix"] = this.matSuffix;
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.formFieldControl = null;
        if (this.formField) {
            delete this.formField._control;
        }
        this.stateChanges.complete();
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) { }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        this.field.focus = true;
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get errorState() {
        const /** @type {?} */ showError = this.options.showError(this);
        if (showError !== this._errorState) {
            this._errorState = showError;
            this.stateChanges.next();
        }
        return showError;
    }
    /**
     * @return {?}
     */
    get controlType() { return this.to.type; }
    /**
     * @return {?}
     */
    get focused() { return this.field.focus && !this.disabled; }
    /**
     * @return {?}
     */
    get disabled() { return this.to.disabled; }
    /**
     * @return {?}
     */
    get required() { return this.to.required; }
    /**
     * @return {?}
     */
    get placeholder() { return this.to.placeholder; }
    /**
     * @return {?}
     */
    get shouldPlaceholderFloat() { return this.shouldLabelFloat; }
    /**
     * @return {?}
     */
    get value() { return this.formControl.value; }
    /**
     * @return {?}
     */
    get ngControl() { return /** @type {?} */ (this.formControl); }
    /**
     * @return {?}
     */
    get empty() { return !this.formControl.value; }
    /**
     * @return {?}
     */
    get shouldLabelFloat() { return this.focused || !this.empty; }
    /**
     * @return {?}
     */
    get formField() { return (/** @type {?} */ (this.field))['__formField__']; }
}
FieldType.propDecorators = {
    matPrefix: [{ type: ViewChild, args: ['matPrefix',] }],
    matSuffix: [{ type: ViewChild, args: ['matSuffix',] }]
};
function FieldType_tsickle_Closure_declarations() {
    /** @type {?} */
    FieldType.prototype.matPrefix;
    /** @type {?} */
    FieldType.prototype.matSuffix;
    /** @type {?} */
    FieldType.prototype.formFieldControl;
    /** @type {?} */
    FieldType.prototype.errorStateMatcher;
    /** @type {?} */
    FieldType.prototype.stateChanges;
    /** @type {?} */
    FieldType.prototype._errorState;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQudHlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQvIiwic291cmNlcyI6WyJmaWVsZC50eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQW9DLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFFLFNBQVMsSUFBSSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7O0FBRXZFLE1BQU0sZ0JBQTBCLFNBQVEsYUFBYTs7O2dDQUlOLElBQUk7aUNBQzdCLElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDOzRCQUN0QyxJQUFJLE9BQU8sRUFBUTsyQkFDcEIsS0FBSzs7Ozs7SUFFbkIsUUFBUTtRQUNOLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUNqRDtLQUNGOzs7O0lBRUQsZUFBZTtRQUNiLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDckMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsRUFBRSxhQUFVLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxFQUFFLGFBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUNqQyxDQUFDLENBQUM7U0FDSjtLQUNGOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztTQUNoQztRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDOUI7Ozs7O0lBRUQsaUJBQWlCLENBQUMsR0FBYSxLQUFXOzs7OztJQUMxQyxnQkFBZ0IsQ0FBQyxLQUFpQjtRQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUMxQjs7OztJQUVELElBQUksVUFBVTtRQUNaLHVCQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7WUFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtRQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7S0FDbEI7Ozs7SUFFRCxJQUFJLFdBQVcsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTs7OztJQUMxQyxJQUFJLE9BQU8sS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7Ozs7SUFDNUQsSUFBSSxRQUFRLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUU7Ozs7SUFDM0MsSUFBSSxRQUFRLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUU7Ozs7SUFDM0MsSUFBSSxXQUFXLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUU7Ozs7SUFDakQsSUFBSSxzQkFBc0IsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7Ozs7SUFDOUQsSUFBSSxLQUFLLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7Ozs7SUFDOUMsSUFBSSxTQUFTLEtBQUssTUFBTSxtQkFBQyxJQUFJLENBQUMsV0FBa0IsRUFBQyxFQUFFOzs7O0lBQ25ELElBQUksS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7Ozs7SUFDL0MsSUFBSSxnQkFBZ0IsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTs7OztJQUM5RCxJQUFJLFNBQVMsS0FBbUIsTUFBTSxDQUFDLG1CQUFNLElBQUksQ0FBQyxLQUFLLEVBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFOzs7d0JBekQzRSxTQUFTLFNBQUMsV0FBVzt3QkFDckIsU0FBUyxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmllbGRUeXBlIGFzIENvcmVGaWVsZFR5cGUgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZCwgTWF0Rm9ybUZpZWxkQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgRm9ybWx5RXJyb3JTdGF0ZU1hdGNoZXIgfSBmcm9tICcuL2Zvcm1seS5lcnJvci1zdGF0ZS1tYXRjaGVyJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZWxkVHlwZSBleHRlbmRzIENvcmVGaWVsZFR5cGUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgTWF0Rm9ybUZpZWxkQ29udHJvbDxhbnk+IHtcbiAgQFZpZXdDaGlsZCgnbWF0UHJlZml4JykgbWF0UHJlZml4OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBAVmlld0NoaWxkKCdtYXRTdWZmaXgnKSBtYXRTdWZmaXg6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgZm9ybUZpZWxkQ29udHJvbDogTWF0Rm9ybUZpZWxkQ29udHJvbDxhbnk+ID0gdGhpcztcbiAgZXJyb3JTdGF0ZU1hdGNoZXIgPSBuZXcgRm9ybWx5RXJyb3JTdGF0ZU1hdGNoZXIodGhpcyk7XG4gIHN0YXRlQ2hhbmdlcyA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIF9lcnJvclN0YXRlID0gZmFsc2U7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuZm9ybUZpZWxkKSB7XG4gICAgICB0aGlzLmZvcm1GaWVsZC5fY29udHJvbCA9IHRoaXMuZm9ybUZpZWxkQ29udHJvbDtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMubWF0UHJlZml4IHx8IHRoaXMubWF0U3VmZml4KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy50by5wcmVmaXggPSB0aGlzLm1hdFByZWZpeDtcbiAgICAgICAgdGhpcy50by5zdWZmaXggPSB0aGlzLm1hdFN1ZmZpeDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZm9ybUZpZWxkQ29udHJvbCA9IG51bGw7XG4gICAgaWYgKHRoaXMuZm9ybUZpZWxkKSB7XG4gICAgICBkZWxldGUgdGhpcy5mb3JtRmllbGQuX2NvbnRyb2w7XG4gICAgfVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBzZXREZXNjcmliZWRCeUlkcyhpZHM6IHN0cmluZ1tdKTogdm9pZCB7IH1cbiAgb25Db250YWluZXJDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuZmllbGQuZm9jdXMgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBlcnJvclN0YXRlKCkge1xuICAgIGNvbnN0IHNob3dFcnJvciA9IHRoaXMub3B0aW9ucy5zaG93RXJyb3IodGhpcyk7XG4gICAgaWYgKHNob3dFcnJvciAhPT0gdGhpcy5fZXJyb3JTdGF0ZSkge1xuICAgICAgdGhpcy5fZXJyb3JTdGF0ZSA9IHNob3dFcnJvcjtcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hvd0Vycm9yO1xuICB9XG5cbiAgZ2V0IGNvbnRyb2xUeXBlKCkgeyByZXR1cm4gdGhpcy50by50eXBlOyB9XG4gIGdldCBmb2N1c2VkKCkgeyByZXR1cm4gdGhpcy5maWVsZC5mb2N1cyAmJiAhdGhpcy5kaXNhYmxlZDsgfVxuICBnZXQgZGlzYWJsZWQoKSB7IHJldHVybiB0aGlzLnRvLmRpc2FibGVkOyB9XG4gIGdldCByZXF1aXJlZCgpIHsgcmV0dXJuIHRoaXMudG8ucmVxdWlyZWQ7IH1cbiAgZ2V0IHBsYWNlaG9sZGVyKCkgeyByZXR1cm4gdGhpcy50by5wbGFjZWhvbGRlcjsgfVxuICBnZXQgc2hvdWxkUGxhY2Vob2xkZXJGbG9hdCgpIHsgcmV0dXJuIHRoaXMuc2hvdWxkTGFiZWxGbG9hdDsgfVxuICBnZXQgdmFsdWUoKSB7IHJldHVybiB0aGlzLmZvcm1Db250cm9sLnZhbHVlOyB9XG4gIGdldCBuZ0NvbnRyb2woKSB7IHJldHVybiB0aGlzLmZvcm1Db250cm9sIGFzIGFueTsgfVxuICBnZXQgZW1wdHkoKSB7IHJldHVybiAhdGhpcy5mb3JtQ29udHJvbC52YWx1ZTsgfVxuICBnZXQgc2hvdWxkTGFiZWxGbG9hdCgpIHsgcmV0dXJuIHRoaXMuZm9jdXNlZCB8fCAhdGhpcy5lbXB0eTsgfVxuICBnZXQgZm9ybUZpZWxkKCk6IE1hdEZvcm1GaWVsZCB7IHJldHVybiAoPGFueT50aGlzLmZpZWxkKVsnX19mb3JtRmllbGRfXyddOyB9XG59XG4iXX0=