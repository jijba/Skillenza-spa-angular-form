import { Component, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';
import { Observable } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { MatCheckboxModule } from '@angular/material/checkbox';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyFieldCheckbox extends FieldType {
    /**
     * @param {?} $event
     * @return {?}
     */
    change($event) {
        if (this.to.change) {
            this.to.change(this.field, $event);
        }
    }
}
FormlyFieldCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-checkbox',
                template: `
    <mat-checkbox
      [formControl]="formControl"
      [id]="id"
      [formlyAttributes]="field"
      (change)="change($event)"
      [indeterminate]="to.indeterminate && model[key] === undefined"
      [color]="to.color"
      [labelPosition]="to.align || to.labelPosition">
      {{ to.label }}
      <ng-container *ngIf="to.required && to.hideRequiredMarker !== true">*</ng-container>
    </mat-checkbox>
  `,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyFieldMultiCheckbox extends FieldType {
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    static createControl(model, field) {
        if (!(field.templateOptions.options instanceof Observable)) {
            let /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce((previous, option) => {
                previous[option.key] = new FormControl(model ? model[option.key] : undefined);
                return previous;
            }, {});
            return new FormGroup(controlGroupConfig, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        else {
            throw new Error(`[Formly Error] You cannot pass an Observable to a multicheckbox yet.`);
        }
    }
}
FormlyFieldMultiCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-multicheckbox',
                template: `
    <ng-container *ngFor="let option of to.options; let i = index;">
      <mat-checkbox [id]="id + '_' + i"
        [formControl]="formControl.get(option.key)"
        [formlyAttributes]="field"
        [color]="to.color"
        [labelPosition]="to.labelPosition">
          {{ option.value }}
      </mat-checkbox>
    </ng-container>
  `,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyMatCheckboxModule {
}
FormlyMatCheckboxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyFieldCheckbox, FormlyFieldMultiCheckbox],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatCheckboxModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [
                            {
                                name: 'checkbox',
                                component: FormlyFieldCheckbox,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        hideFieldUnderline: true,
                                        indeterminate: true,
                                        floatLabel: 'always',
                                        hideLabel: true,
                                        align: 'start',
                                    },
                                },
                            },
                            {
                                name: 'multicheckbox',
                                component: FormlyFieldMultiCheckbox,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        hideFieldUnderline: true,
                                        floatLabel: 'always',
                                        options: [],
                                    },
                                },
                            },
                        ],
                    }),
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { FormlyMatCheckboxModule, FormlyFieldCheckbox, FormlyFieldMultiCheckbox };
//# sourceMappingURL=ngx-formly-material-checkbox.js.map
