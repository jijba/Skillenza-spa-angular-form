import { Component, ViewChild, Pipe, NgModule } from '@angular/core';
import { MatSelect, MatSelectModule } from '@angular/material/select';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyFieldSelect extends FieldType {
    /**
     * @return {?}
     */
    get labelProp() { return this.to["labelProp"] || 'label'; }
    /**
     * @return {?}
     */
    get valueProp() { return this.to["valueProp"] || 'value'; }
    /**
     * @return {?}
     */
    get groupProp() { return this.to["groupProp"] || 'group'; }
    /**
     * @param {?} $event
     * @return {?}
     */
    change($event) {
        if (this.to.change) {
            this.to.change(this.field, $event);
        }
    }
}
FormlyFieldSelect.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-select',
                template: `
    <mat-select [id]="id"
      [formControl]="formControl"
      [formlyAttributes]="field"
      [placeholder]="to.placeholder"
      [multiple]="to.multiple"
      (selectionChange)="change($event)"
      [errorStateMatcher]="errorStateMatcher">
      <ng-container *ngFor="let item of to.options | formlySelectOptions:groupProp | async">
        <mat-optgroup *ngIf="item.group" [label]="item.label">
          <mat-option *ngFor="let child of item.group" [value]="child[valueProp]" [disabled]="child.disabled">
            {{ child[labelProp] }}
          </mat-option>
        </mat-optgroup>
        <mat-option *ngIf="!item.group" [value]="item[valueProp]" [disabled]="item.disabled">{{ item[labelProp] }}</mat-option>
      </ng-container>
    </mat-select>
  `,
            },] },
];
/** @nocollapse */
FormlyFieldSelect.propDecorators = {
    "formFieldControl": [{ type: ViewChild, args: [MatSelect,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlySelectOptionsPipe {
    /**
     * @param {?} options
     * @param {?=} groupBy
     * @return {?}
     */
    transform(options, groupBy = 'group') {
        if (!(options instanceof Observable)) {
            options = of(options);
        }
        return (/** @type {?} */ (options)).pipe(map(value => this.toOptions(value, groupBy)));
    }
    /**
     * @param {?} options
     * @param {?} groupBy
     * @return {?}
     */
    toOptions(options, groupBy) {
        const /** @type {?} */ gOptions = [], /** @type {?} */
        groups = {};
        options.map((option) => {
            if (!option[groupBy]) {
                gOptions.push(option);
            }
            else {
                if (groups[option[groupBy]]) {
                    groups[option[groupBy]].push(option);
                }
                else {
                    groups[option[groupBy]] = [option];
                    gOptions.push({
                        label: option[groupBy],
                        group: groups[option[groupBy]],
                    });
                }
            }
        });
        return gOptions;
    }
}
FormlySelectOptionsPipe.decorators = [
    { type: Pipe, args: [{ name: 'formlySelectOptions' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormlyMatSelectModule {
}
FormlyMatSelectModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyFieldSelect, FormlySelectOptionsPipe],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatSelectModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'select',
                                component: FormlyFieldSelect,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        options: [],
                                    },
                                },
                            }],
                    }),
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { FormlyMatSelectModule, FormlyFieldSelect, FormlySelectOptionsPipe as Éµa };
//# sourceMappingURL=ngx-formly-material-select.js.map
