/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { Observable, of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
export class FormlySelectOptionsPipe {
    /**
     * @param {?} options
     * @param {?=} groupBy
     * @return {?}
     */
    transform(options, groupBy = 'group') {
        if (!(options instanceof Observable)) {
            options = observableOf(options);
        }
        return (/** @type {?} */ (options)).pipe(map(value => this.toOptions(value, groupBy)));
    }
    /**
     * @param {?} options
     * @param {?} groupBy
     * @return {?}
     */
    toOptions(options, groupBy) {
        const /** @type {?} */ gOptions = [], /** @type {?} */
        groups = {};
        options.map((option) => {
            if (!option[groupBy]) {
                gOptions.push(option);
            }
            else {
                if (groups[option[groupBy]]) {
                    groups[option[groupBy]].push(option);
                }
                else {
                    groups[option[groupBy]] = [option];
                    gOptions.push({
                        label: option[groupBy],
                        group: groups[option[groupBy]],
                    });
                }
            }
        });
        return gOptions;
    }
}
FormlySelectOptionsPipe.decorators = [
    { type: Pipe, args: [{ name: 'formlySelectOptions' },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbnMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L21hdGVyaWFsL3NlbGVjdC8iLCJzb3VyY2VzIjpbInNlbGVjdC1vcHRpb25zLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRSxJQUFJLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsTUFBTTs7Ozs7O0lBQ0osU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLEdBQUcsT0FBTztRQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pDO1FBRUQsTUFBTSxDQUFDLG1CQUFDLE9BQTBCLEVBQUMsQ0FBQyxJQUFJLENBQ3RDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQzdDLENBQUM7S0FDSDs7Ozs7O0lBRU8sU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPO1FBQ2hDLHVCQUFNLFFBQVEsR0FBVSxFQUFFO1FBQ3hCLE1BQU0sR0FBNkIsRUFBRSxDQUFDO1FBRXhDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN0QztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDbkMsUUFBUSxDQUFDLElBQUksQ0FBQzt3QkFDWixLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQzt3QkFDdEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7cUJBQy9CLENBQUMsQ0FBQztpQkFDSjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7OztZQWhDbkIsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgYXMgb2JzZXJ2YWJsZU9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBQaXBlKHsgbmFtZTogJ2Zvcm1seVNlbGVjdE9wdGlvbnMnIH0pXG5leHBvcnQgY2xhc3MgRm9ybWx5U2VsZWN0T3B0aW9uc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG9wdGlvbnMsIGdyb3VwQnkgPSAnZ3JvdXAnKSB7XG4gICAgaWYgKCEob3B0aW9ucyBpbnN0YW5jZW9mIE9ic2VydmFibGUpKSB7XG4gICAgICBvcHRpb25zID0gb2JzZXJ2YWJsZU9mKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiAob3B0aW9ucyBhcyBPYnNlcnZhYmxlPGFueT4pLnBpcGUoXG4gICAgICBtYXAodmFsdWUgPT4gdGhpcy50b09wdGlvbnModmFsdWUsIGdyb3VwQnkpKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB0b09wdGlvbnMob3B0aW9ucywgZ3JvdXBCeSkge1xuICAgIGNvbnN0IGdPcHRpb25zOiBhbnlbXSA9IFtdLFxuICAgICAgZ3JvdXBzOiB7IFtrZXk6IHN0cmluZ106IGFueVtdIH0gPSB7fTtcblxuICAgIG9wdGlvbnMubWFwKChvcHRpb246IGFueSkgPT4ge1xuICAgICAgaWYgKCFvcHRpb25bZ3JvdXBCeV0pIHtcbiAgICAgICAgZ09wdGlvbnMucHVzaChvcHRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGdyb3Vwc1tvcHRpb25bZ3JvdXBCeV1dKSB7XG4gICAgICAgICAgZ3JvdXBzW29wdGlvbltncm91cEJ5XV0ucHVzaChvcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyb3Vwc1tvcHRpb25bZ3JvdXBCeV1dID0gW29wdGlvbl07XG4gICAgICAgICAgZ09wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogb3B0aW9uW2dyb3VwQnldLFxuICAgICAgICAgICAgZ3JvdXA6IGdyb3Vwc1tvcHRpb25bZ3JvdXBCeV1dLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ09wdGlvbnM7XG4gIH1cbn1cbiJdfQ==