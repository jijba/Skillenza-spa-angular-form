{
  "version": 3,
  "file": "ngx-formly-material-select.js",
  "sources": [
    "ng://@ngx-formly/material/select/out/select.module.ts",
    "ng://@ngx-formly/material/select/out/select-options.pipe.ts",
    "ng://@ngx-formly/material/select/out/select.type.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { FormlyFieldSelect } from './select.type';\nimport { FormlySelectOptionsPipe } from './select-options.pipe';\n\n@NgModule({\n  declarations: [FormlyFieldSelect, FormlySelectOptionsPipe],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n\n    FormlyMatFormFieldModule,\n    FormlyModule.forChild({\n      types: [{\n        name: 'select',\n        component: FormlyFieldSelect,\n        wrappers: ['form-field'],\n        defaultOptions: {\n          templateOptions: {\n            options: [],\n          },\n        },\n      }],\n    }),\n  ],\n})\nexport class FormlyMatSelectModule { }\n",
    "import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Pipe({ name: 'formlySelectOptions' })\nexport class FormlySelectOptionsPipe implements PipeTransform {\n  transform(options, groupBy = 'group') {\n    if (!(options instanceof Observable)) {\n      options = observableOf(options);\n    }\n\n    return (options as Observable<any>).pipe(\n      map(value => this.toOptions(value, groupBy)),\n    );\n  }\n\n  private toOptions(options, groupBy) {\n    const gOptions: any[] = [],\n      groups: { [key: string]: any[] } = {};\n\n    options.map((option: any) => {\n      if (!option[groupBy]) {\n        gOptions.push(option);\n      } else {\n        if (groups[option[groupBy]]) {\n          groups[option[groupBy]].push(option);\n        } else {\n          groups[option[groupBy]] = [option];\n          gOptions.push({\n            label: option[groupBy],\n            group: groups[option[groupBy]],\n          });\n        }\n      }\n    });\n\n    return gOptions;\n  }\n}\n",
    "import { Component, ViewChild } from '@angular/core';\nimport { MatSelect, MatSelectChange } from '@angular/material/select';\nimport { FieldType } from '@ngx-formly/material/form-field';\n\n@Component({\n  selector: 'formly-field-mat-select',\n  template: `\n    <mat-select [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [multiple]=\"to.multiple\"\n      (selectionChange)=\"change($event)\"\n      [errorStateMatcher]=\"errorStateMatcher\">\n      <ng-container *ngFor=\"let item of to.options | formlySelectOptions:groupProp | async\">\n        <mat-optgroup *ngIf=\"item.group\" [label]=\"item.label\">\n          <mat-option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n            {{ child[labelProp] }}\n          </mat-option>\n        </mat-optgroup>\n        <mat-option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</mat-option>\n      </ng-container>\n    </mat-select>\n  `,\n})\nexport class FormlyFieldSelect extends FieldType {\n  @ViewChild(MatSelect) formFieldControl: MatSelect;\n\n  get labelProp(): string { return this.to.labelProp || 'label'; }\n  get valueProp(): string { return this.to.valueProp || 'value'; }\n  get groupProp(): string { return this.to.groupProp || 'group'; }\n\n  change($event: MatSelectChange) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n  }\n}\n"
  ],
  "names": [
    "observableOf",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
