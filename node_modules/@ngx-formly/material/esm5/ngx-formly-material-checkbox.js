import { __extends } from 'tslib';
import { Component, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';
import { Observable } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { MatCheckboxModule } from '@angular/material/checkbox';

var FormlyFieldCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldCheckbox, _super);
    function FormlyFieldCheckbox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFieldCheckbox.prototype.change = function ($event) {
        if (this.to.change) {
            this.to.change(this.field, $event);
        }
    };
    return FormlyFieldCheckbox;
}(FieldType));
FormlyFieldCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-checkbox',
                template: "\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      (change)=\"change($event)\"\n      [indeterminate]=\"to.indeterminate && model[key] === undefined\"\n      [color]=\"to.color\"\n      [labelPosition]=\"to.align || to.labelPosition\">\n      {{ to.label }}\n      <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n    </mat-checkbox>\n  ",
            },] },
];
var FormlyFieldMultiCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldMultiCheckbox, _super);
    function FormlyFieldMultiCheckbox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFieldMultiCheckbox.createControl = function (model, field) {
        if (!(field.templateOptions.options instanceof Observable)) {
            var controlGroupConfig = field.templateOptions.options.reduce(function (previous, option) {
                previous[option.key] = new FormControl(model ? model[option.key] : undefined);
                return previous;
            }, {});
            return new FormGroup(controlGroupConfig, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        else {
            throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");
        }
    };
    return FormlyFieldMultiCheckbox;
}(FieldType));
FormlyFieldMultiCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-multicheckbox',
                template: "\n    <ng-container *ngFor=\"let option of to.options; let i = index;\">\n      <mat-checkbox [id]=\"id + '_' + i\"\n        [formControl]=\"formControl.get(option.key)\"\n        [formlyAttributes]=\"field\"\n        [color]=\"to.color\"\n        [labelPosition]=\"to.labelPosition\">\n          {{ option.value }}\n      </mat-checkbox>\n    </ng-container>\n  ",
            },] },
];
var FormlyMatCheckboxModule = /** @class */ (function () {
    function FormlyMatCheckboxModule() {
    }
    return FormlyMatCheckboxModule;
}());
FormlyMatCheckboxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyFieldCheckbox, FormlyFieldMultiCheckbox],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatCheckboxModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [
                            {
                                name: 'checkbox',
                                component: FormlyFieldCheckbox,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        hideFieldUnderline: true,
                                        indeterminate: true,
                                        floatLabel: 'always',
                                        hideLabel: true,
                                        align: 'start',
                                    },
                                },
                            },
                            {
                                name: 'multicheckbox',
                                component: FormlyFieldMultiCheckbox,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        hideFieldUnderline: true,
                                        floatLabel: 'always',
                                        options: [],
                                    },
                                },
                            },
                        ],
                    }),
                ],
            },] },
];

export { FormlyMatCheckboxModule, FormlyFieldCheckbox, FormlyFieldMultiCheckbox };
//# sourceMappingURL=ngx-formly-material-checkbox.js.map
