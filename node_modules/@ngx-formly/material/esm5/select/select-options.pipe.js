/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { Observable, of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
var FormlySelectOptionsPipe = /** @class */ (function () {
    function FormlySelectOptionsPipe() {
    }
    /**
     * @param {?} options
     * @param {?=} groupBy
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.transform = /**
     * @param {?} options
     * @param {?=} groupBy
     * @return {?}
     */
    function (options, groupBy) {
        var _this = this;
        if (groupBy === void 0) { groupBy = 'group'; }
        if (!(options instanceof Observable)) {
            options = observableOf(options);
        }
        return (/** @type {?} */ (options)).pipe(map(function (value) { return _this.toOptions(value, groupBy); }));
    };
    /**
     * @param {?} options
     * @param {?} groupBy
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.toOptions = /**
     * @param {?} options
     * @param {?} groupBy
     * @return {?}
     */
    function (options, groupBy) {
        var /** @type {?} */ gOptions = [], /** @type {?} */
        groups = {};
        options.map(function (option) {
            if (!option[groupBy]) {
                gOptions.push(option);
            }
            else {
                if (groups[option[groupBy]]) {
                    groups[option[groupBy]].push(option);
                }
                else {
                    groups[option[groupBy]] = [option];
                    gOptions.push({
                        label: option[groupBy],
                        group: groups[option[groupBy]],
                    });
                }
            }
        });
        return gOptions;
    };
    FormlySelectOptionsPipe.decorators = [
        { type: Pipe, args: [{ name: 'formlySelectOptions' },] },
    ];
    return FormlySelectOptionsPipe;
}());
export { FormlySelectOptionsPipe };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbnMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L21hdGVyaWFsL3NlbGVjdC8iLCJzb3VyY2VzIjpbInNlbGVjdC1vcHRpb25zLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRSxJQUFJLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7OztJQUluQywyQ0FBUzs7Ozs7SUFBVCxVQUFVLE9BQU8sRUFBRSxPQUFpQjtRQUFwQyxpQkFRQztRQVJrQix3QkFBQSxFQUFBLGlCQUFpQjtRQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pDO1FBRUQsTUFBTSxDQUFDLG1CQUFDLE9BQTBCLEVBQUMsQ0FBQyxJQUFJLENBQ3RDLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUE5QixDQUE4QixDQUFDLENBQzdDLENBQUM7S0FDSDs7Ozs7O0lBRU8sMkNBQVM7Ozs7O2NBQUMsT0FBTyxFQUFFLE9BQU87UUFDaEMscUJBQU0sUUFBUSxHQUFVLEVBQUU7UUFDeEIsTUFBTSxHQUE2QixFQUFFLENBQUM7UUFFeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFDLE1BQVc7WUFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3ZCO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDdEM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ25DLFFBQVEsQ0FBQyxJQUFJLENBQUM7d0JBQ1osS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7d0JBQ3RCLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUMvQixDQUFDLENBQUM7aUJBQ0o7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxRQUFRLENBQUM7OztnQkFoQ25CLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRTs7a0NBSnJDOztTQUthLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIGFzIG9ic2VydmFibGVPZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AUGlwZSh7IG5hbWU6ICdmb3JtbHlTZWxlY3RPcHRpb25zJyB9KVxuZXhwb3J0IGNsYXNzIEZvcm1seVNlbGVjdE9wdGlvbnNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvcHRpb25zLCBncm91cEJ5ID0gJ2dyb3VwJykge1xuICAgIGlmICghKG9wdGlvbnMgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSkge1xuICAgICAgb3B0aW9ucyA9IG9ic2VydmFibGVPZihvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKG9wdGlvbnMgYXMgT2JzZXJ2YWJsZTxhbnk+KS5waXBlKFxuICAgICAgbWFwKHZhbHVlID0+IHRoaXMudG9PcHRpb25zKHZhbHVlLCBncm91cEJ5KSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9PcHRpb25zKG9wdGlvbnMsIGdyb3VwQnkpIHtcbiAgICBjb25zdCBnT3B0aW9uczogYW55W10gPSBbXSxcbiAgICAgIGdyb3VwczogeyBba2V5OiBzdHJpbmddOiBhbnlbXSB9ID0ge307XG5cbiAgICBvcHRpb25zLm1hcCgob3B0aW9uOiBhbnkpID0+IHtcbiAgICAgIGlmICghb3B0aW9uW2dyb3VwQnldKSB7XG4gICAgICAgIGdPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChncm91cHNbb3B0aW9uW2dyb3VwQnldXSkge1xuICAgICAgICAgIGdyb3Vwc1tvcHRpb25bZ3JvdXBCeV1dLnB1c2gob3B0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBncm91cHNbb3B0aW9uW2dyb3VwQnldXSA9IFtvcHRpb25dO1xuICAgICAgICAgIGdPcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgbGFiZWw6IG9wdGlvbltncm91cEJ5XSxcbiAgICAgICAgICAgIGdyb3VwOiBncm91cHNbb3B0aW9uW2dyb3VwQnldXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdPcHRpb25zO1xuICB9XG59XG4iXX0=