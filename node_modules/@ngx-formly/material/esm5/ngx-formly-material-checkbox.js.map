{
  "version": 3,
  "file": "ngx-formly-material-checkbox.js",
  "sources": [
    "ng://@ngx-formly/material/checkbox/out/checkbox.module.ts",
    "ng://@ngx-formly/material/checkbox/out/multicheckbox.type.ts",
    "ng://@ngx-formly/material/checkbox/out/checkbox.type.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { FormlyFieldCheckbox } from './checkbox.type';\nimport { FormlyFieldMultiCheckbox } from './multicheckbox.type';\n\n@NgModule({\n  declarations: [FormlyFieldCheckbox, FormlyFieldMultiCheckbox],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n\n    MatCheckboxModule,\n\n    FormlyMatFormFieldModule,\n    FormlyModule.forChild({\n      types: [\n        {\n          name: 'checkbox',\n          component: FormlyFieldCheckbox,\n          wrappers: ['form-field'],\n          defaultOptions: {\n            templateOptions: {\n              hideFieldUnderline: true,\n              indeterminate: true,\n              floatLabel: 'always',\n              hideLabel: true,\n              align: 'start', // start or end\n            },\n          },\n        },\n        {\n          name: 'multicheckbox',\n          component: FormlyFieldMultiCheckbox,\n          wrappers: ['form-field'],\n          defaultOptions: {\n            templateOptions: {\n              hideFieldUnderline: true,\n              floatLabel: 'always',\n              options: [],\n            },\n          },\n        },\n      ],\n    }),\n  ],\n})\nexport class FormlyMatCheckboxModule { }\n",
    "import { Component } from '@angular/core';\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { FieldType } from '@ngx-formly/material/form-field';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'formly-field-mat-multicheckbox',\n  template: `\n    <ng-container *ngFor=\"let option of to.options; let i = index;\">\n      <mat-checkbox [id]=\"id + '_' + i\"\n        [formControl]=\"formControl.get(option.key)\"\n        [formlyAttributes]=\"field\"\n        [color]=\"to.color\"\n        [labelPosition]=\"to.labelPosition\">\n          {{ option.value }}\n      </mat-checkbox>\n    </ng-container>\n  `,\n})\nexport class FormlyFieldMultiCheckbox extends FieldType {\n  static createControl(model: any, field: FormlyFieldConfig): AbstractControl {\n    if (!(field.templateOptions.options instanceof Observable)) {\n      let controlGroupConfig = field.templateOptions.options.reduce((previous, option) => {\n        previous[option.key] = new FormControl(model ? model[option.key] : undefined);\n        return previous;\n      }, {});\n\n      return new FormGroup(\n        controlGroupConfig,\n        field.validators ? field.validators.validation : undefined,\n        field.asyncValidators ? field.asyncValidators.validation : undefined,\n      );\n    } else {\n      throw new Error(`[Formly Error] You cannot pass an Observable to a multicheckbox yet.`);\n    }\n  }\n}\n",
    "import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/material/form-field';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'formly-field-mat-checkbox',\n  template: `\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      (change)=\"change($event)\"\n      [indeterminate]=\"to.indeterminate && model[key] === undefined\"\n      [color]=\"to.color\"\n      [labelPosition]=\"to.align || to.labelPosition\">\n      {{ to.label }}\n      <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n    </mat-checkbox>\n  `,\n})\nexport class FormlyFieldCheckbox extends FieldType {\n  change($event: MatCheckboxChange) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n  }\n}\n"
  ],
  "names": [
    "tslib_1.__extends"
  ],
  "mappings": ";;;;;;;;;AEAA;IAoByCA,uCAAS;IApBlD;;;IAqBE,oCAAM,GAAN,UAAO,MAAyB;QAC9B,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SACpC;KACF;;EALsC,SAAS;;IAhBlD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;gBACT,QAAQ,EAAE,2BAA2B;gBACrC,QAAQ,EAAE,8bAYT;aACF,EAAD,EAAA;;ADnBA;IAoB8CA,4CAAS;IApBvD;;;IAqBS,sCAAa,GAApB,UAAqB,KAAU,EAAE,KAAwB;QACvD,IAAI,EAAE,KAAK,CAAC,eAAe,CAAC,OAAO,YAAY,UAAU,CAAC,EAAE;YAC1D,IAAI,kBAAkB,GAAG,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,MAAM;gBAC7E,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;gBAC9E,OAAO,QAAQ,CAAC;aACjB,EAAE,EAAE,CAAC,CAAC;YAEP,OAAO,IAAI,SAAS,CAClB,kBAAkB,EAClB,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,GAAG,SAAS,EAC1D,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC,UAAU,GAAG,SAAS,CACrE,CAAC;SACH;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;SACzF;KACF;;EAhB2C,SAAS;;IAdvD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;gBACT,QAAQ,EAAE,gCAAgC;gBAC1C,QAAQ,EAAE,6WAUT;aACF,EAAD,EAAA;;ADnBA;IAAA;;;;;IAWA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,YAAY,EAAE,CAAC,mBAAmB,EAAE,wBAAwB,CAAC;gBAC7D,OAAO,EAAE;oBACP,YAAY;oBACZ,mBAAmB;oBAEnB,iBAAiB;oBAEjB,wBAAwB;oBACxB,YAAY,CAAC,QAAQ,CAAC;wBACpB,KAAK,EAAE;4BACL;gCACE,IAAI,EAAE,UAAU;gCAChB,SAAS,EAAE,mBAAmB;gCAC9B,QAAQ,EAAE,CAAC,YAAY,CAAC;gCACxB,cAAc,EAAE;oCACd,eAAe,EAAE;wCACf,kBAAkB,EAAE,IAAI;wCACxB,aAAa,EAAE,IAAI;wCACnB,UAAU,EAAE,QAAQ;wCACpB,SAAS,EAAE,IAAI;wCACf,KAAK,EAAE,OAAO;qCACf;iCACF;6BACF;4BACD;gCACE,IAAI,EAAE,eAAe;gCACrB,SAAS,EAAE,wBAAwB;gCACnC,QAAQ,EAAE,CAAC,YAAY,CAAC;gCACxB,cAAc,EAAE;oCACd,eAAe,EAAE;wCACf,kBAAkB,EAAE,IAAI;wCACxB,UAAU,EAAE,QAAQ;wCACpB,OAAO,EAAE,EAAE;qCACZ;iCACF;6BACF;yBACF;qBACF,CAAC;iBACH;aACF,EAAD,EAAA;;;;;"
}
