import { __extends } from 'tslib';
import { Component, ViewChild, Pipe, NgModule } from '@angular/core';
import { MatSelect, MatSelectModule } from '@angular/material/select';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';

var FormlyFieldSelect = /** @class */ (function (_super) {
    __extends(FormlyFieldSelect, _super);
    function FormlyFieldSelect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormlyFieldSelect.prototype, "labelProp", {
        get: function () { return this.to["labelProp"] || 'label'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "valueProp", {
        get: function () { return this.to["valueProp"] || 'value'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "groupProp", {
        get: function () { return this.to["groupProp"] || 'group'; },
        enumerable: true,
        configurable: true
    });
    FormlyFieldSelect.prototype.change = function ($event) {
        if (this.to.change) {
            this.to.change(this.field, $event);
        }
    };
    return FormlyFieldSelect;
}(FieldType));
FormlyFieldSelect.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-select',
                template: "\n    <mat-select [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [multiple]=\"to.multiple\"\n      (selectionChange)=\"change($event)\"\n      [errorStateMatcher]=\"errorStateMatcher\">\n      <ng-container *ngFor=\"let item of to.options | formlySelectOptions:groupProp | async\">\n        <mat-optgroup *ngIf=\"item.group\" [label]=\"item.label\">\n          <mat-option *ngFor=\"let child of item.group\" [value]=\"child[valueProp]\" [disabled]=\"child.disabled\">\n            {{ child[labelProp] }}\n          </mat-option>\n        </mat-optgroup>\n        <mat-option *ngIf=\"!item.group\" [value]=\"item[valueProp]\" [disabled]=\"item.disabled\">{{ item[labelProp] }}</mat-option>\n      </ng-container>\n    </mat-select>\n  ",
            },] },
];
FormlyFieldSelect.propDecorators = {
    "formFieldControl": [{ type: ViewChild, args: [MatSelect,] },],
};
var FormlySelectOptionsPipe = /** @class */ (function () {
    function FormlySelectOptionsPipe() {
    }
    FormlySelectOptionsPipe.prototype.transform = function (options, groupBy) {
        var _this = this;
        if (groupBy === void 0) { groupBy = 'group'; }
        if (!(options instanceof Observable)) {
            options = of(options);
        }
        return ((options)).pipe(map(function (value) { return _this.toOptions(value, groupBy); }));
    };
    FormlySelectOptionsPipe.prototype.toOptions = function (options, groupBy) {
        var gOptions = [], groups = {};
        options.map(function (option) {
            if (!option[groupBy]) {
                gOptions.push(option);
            }
            else {
                if (groups[option[groupBy]]) {
                    groups[option[groupBy]].push(option);
                }
                else {
                    groups[option[groupBy]] = [option];
                    gOptions.push({
                        label: option[groupBy],
                        group: groups[option[groupBy]],
                    });
                }
            }
        });
        return gOptions;
    };
    return FormlySelectOptionsPipe;
}());
FormlySelectOptionsPipe.decorators = [
    { type: Pipe, args: [{ name: 'formlySelectOptions' },] },
];
var FormlyMatSelectModule = /** @class */ (function () {
    function FormlyMatSelectModule() {
    }
    return FormlyMatSelectModule;
}());
FormlyMatSelectModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyFieldSelect, FormlySelectOptionsPipe],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatSelectModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'select',
                                component: FormlyFieldSelect,
                                wrappers: ['form-field'],
                                defaultOptions: {
                                    templateOptions: {
                                        options: [],
                                    },
                                },
                            }],
                    }),
                ],
            },] },
];

export { FormlyMatSelectModule, FormlyFieldSelect, FormlySelectOptionsPipe as Éµa };
//# sourceMappingURL=ngx-formly-material-select.js.map
